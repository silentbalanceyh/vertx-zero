/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.jet.domain.tables.daos;


import cn.vertxup.jet.domain.tables.IService;
import cn.vertxup.jet.domain.tables.records.IServiceRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IServiceDao extends AbstractVertxDAO<IServiceRecord, cn.vertxup.jet.domain.tables.pojos.IService, String, Future<List<cn.vertxup.jet.domain.tables.pojos.IService>>, Future<cn.vertxup.jet.domain.tables.pojos.IService>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<IServiceRecord,cn.vertxup.jet.domain.tables.pojos.IService,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public IServiceDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(IService.I_SERVICE, cn.vertxup.jet.domain.tables.pojos.IService.class, new JDBCClassicQueryExecutor<IServiceRecord,cn.vertxup.jet.domain.tables.pojos.IService,String>(configuration,cn.vertxup.jet.domain.tables.pojos.IService.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.jet.domain.tables.pojos.IService object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAMESPACE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByNamespace(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.NAMESPACE.in(values));
        }

        /**
     * Find records that have <code>NAMESPACE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByNamespace(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.NAMESPACE.in(values),limit);
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByName(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByComment(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.COMMENT.in(values),limit);
        }

        /**
     * Find records that have <code>IS_WORKFLOW IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByIsWorkflow(Collection<Boolean> values) {
                return findManyByCondition(IService.I_SERVICE.IS_WORKFLOW.in(values));
        }

        /**
     * Find records that have <code>IS_WORKFLOW IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByIsWorkflow(Collection<Boolean> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.IS_WORKFLOW.in(values),limit);
        }

        /**
     * Find records that have <code>IS_GRAPHIC IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByIsGraphic(Collection<Boolean> values) {
                return findManyByCondition(IService.I_SERVICE.IS_GRAPHIC.in(values));
        }

        /**
     * Find records that have <code>IS_GRAPHIC IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByIsGraphic(Collection<Boolean> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.IS_GRAPHIC.in(values),limit);
        }

        /**
     * Find records that have <code>IN_SCRIPT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByInScript(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.IN_SCRIPT.in(values));
        }

        /**
     * Find records that have <code>IN_SCRIPT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByInScript(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.IN_SCRIPT.in(values),limit);
        }

        /**
     * Find records that have <code>OUT_SCRIPT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByOutScript(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.OUT_SCRIPT.in(values));
        }

        /**
     * Find records that have <code>OUT_SCRIPT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByOutScript(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.OUT_SCRIPT.in(values),limit);
        }

        /**
     * Find records that have <code>CHANNEL_TYPE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByChannelType(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.CHANNEL_TYPE.in(values));
        }

        /**
     * Find records that have <code>CHANNEL_TYPE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByChannelType(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.CHANNEL_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>CHANNEL_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByChannelComponent(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.CHANNEL_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>CHANNEL_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByChannelComponent(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.CHANNEL_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>CHANNEL_CONFIG IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByChannelConfig(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.CHANNEL_CONFIG.in(values));
        }

        /**
     * Find records that have <code>CHANNEL_CONFIG IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByChannelConfig(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.CHANNEL_CONFIG.in(values),limit);
        }

        /**
     * Find records that have <code>CONFIG_INTEGRATION IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByConfigIntegration(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.CONFIG_INTEGRATION.in(values));
        }

        /**
     * Find records that have <code>CONFIG_INTEGRATION IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByConfigIntegration(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.CONFIG_INTEGRATION.in(values),limit);
        }

        /**
     * Find records that have <code>CONFIG_DATABASE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByConfigDatabase(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.CONFIG_DATABASE.in(values));
        }

        /**
     * Find records that have <code>CONFIG_DATABASE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByConfigDatabase(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.CONFIG_DATABASE.in(values),limit);
        }

        /**
     * Find records that have <code>DICT_CONFIG IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByDictConfig(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.DICT_CONFIG.in(values));
        }

        /**
     * Find records that have <code>DICT_CONFIG IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByDictConfig(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.DICT_CONFIG.in(values),limit);
        }

        /**
     * Find records that have <code>DICT_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByDictComponent(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.DICT_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>DICT_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByDictComponent(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.DICT_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>DICT_EPSILON IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByDictEpsilon(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.DICT_EPSILON.in(values));
        }

        /**
     * Find records that have <code>DICT_EPSILON IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByDictEpsilon(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.DICT_EPSILON.in(values),limit);
        }

        /**
     * Find records that have <code>MAPPING_CONFIG IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByMappingConfig(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.MAPPING_CONFIG.in(values));
        }

        /**
     * Find records that have <code>MAPPING_CONFIG IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByMappingConfig(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.MAPPING_CONFIG.in(values),limit);
        }

        /**
     * Find records that have <code>MAPPING_MODE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByMappingMode(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.MAPPING_MODE.in(values));
        }

        /**
     * Find records that have <code>MAPPING_MODE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByMappingMode(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.MAPPING_MODE.in(values),limit);
        }

        /**
     * Find records that have <code>MAPPING_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByMappingComponent(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.MAPPING_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>MAPPING_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByMappingComponent(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.MAPPING_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>SERVICE_RECORD IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByServiceRecord(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.SERVICE_RECORD.in(values));
        }

        /**
     * Find records that have <code>SERVICE_RECORD IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByServiceRecord(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.SERVICE_RECORD.in(values),limit);
        }

        /**
     * Find records that have <code>SERVICE_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByServiceComponent(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.SERVICE_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>SERVICE_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByServiceComponent(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.SERVICE_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>SERVICE_CONFIG IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByServiceConfig(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.SERVICE_CONFIG.in(values));
        }

        /**
     * Find records that have <code>SERVICE_CONFIG IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByServiceConfig(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.SERVICE_CONFIG.in(values),limit);
        }

        /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByIdentifier(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.IDENTIFIER.in(values));
        }

        /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByIdentifier(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.IDENTIFIER.in(values),limit);
        }

        /**
     * Find records that have <code>IDENTIFIER_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByIdentifierComponent(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.IDENTIFIER_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>IDENTIFIER_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByIdentifierComponent(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.IDENTIFIER_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>RULE_UNIQUE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByRuleUnique(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.RULE_UNIQUE.in(values));
        }

        /**
     * Find records that have <code>RULE_UNIQUE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByRuleUnique(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.RULE_UNIQUE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(IService.I_SERVICE.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(IService.I_SERVICE.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(IService.I_SERVICE.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(IService.I_SERVICE.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.jet.domain.tables.pojos.IService>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(IService.I_SERVICE.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<IServiceRecord,cn.vertxup.jet.domain.tables.pojos.IService,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<IServiceRecord,cn.vertxup.jet.domain.tables.pojos.IService,String>) super.queryExecutor();
        }
}
