/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.jet.domain.tables;


import cn.vertxup.jet.domain.Db;
import cn.vertxup.jet.domain.Keys;
import cn.vertxup.jet.domain.tables.records.IServiceRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class IService extends TableImpl<IServiceRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.I_SERVICE</code>
     */
    public static final IService I_SERVICE = new IService();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.KEY</code>. 「key」- 服务ID
     */
    public final TableField<IServiceRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 服务ID");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.NAMESPACE</code>. 「namespace」-
     * 服务所在名空间
     */
    public final TableField<IServiceRecord, String> NAMESPACE = createField(DSL.name("NAMESPACE"), SQLDataType.VARCHAR(255), this, "「namespace」- 服务所在名空间");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.NAME</code>. 「name」- 服务名称
     */
    public final TableField<IServiceRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 服务名称");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.COMMENT</code>. 「comment」- 备注信息
     */
    public final TableField<IServiceRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB, this, "「comment」- 备注信息");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.IS_WORKFLOW</code>. 「isWorkflow」-
     * 是否驱动工作流引擎
     */
    public final TableField<IServiceRecord, Boolean> IS_WORKFLOW = createField(DSL.name("IS_WORKFLOW"), SQLDataType.BIT, this, "「isWorkflow」- 是否驱动工作流引擎");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.IS_GRAPHIC</code>. 「isGraphic」-
     * 是否驱动图引擎
     */
    public final TableField<IServiceRecord, Boolean> IS_GRAPHIC = createField(DSL.name("IS_GRAPHIC"), SQLDataType.BIT, this, "「isGraphic」- 是否驱动图引擎");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.IN_SCRIPT</code>. 「inScript」-
     * 本次不使用，加载脚本引擎ScriptEngine前置脚本
     */
    public final TableField<IServiceRecord, String> IN_SCRIPT = createField(DSL.name("IN_SCRIPT"), SQLDataType.CLOB, this, "「inScript」- 本次不使用，加载脚本引擎ScriptEngine前置脚本");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.OUT_SCRIPT</code>. 「outScript」-
     * 本次不使用，加载脚本引擎ScriptEngine后置脚本
     */
    public final TableField<IServiceRecord, String> OUT_SCRIPT = createField(DSL.name("OUT_SCRIPT"), SQLDataType.CLOB, this, "「outScript」- 本次不使用，加载脚本引擎ScriptEngine后置脚本");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.CHANNEL_TYPE</code>. 「channelType」-
     * 通道类型：ADAPTOR / CONNECTOR / ACTOR / DIRECTOR / DEFINE
     */
    public final TableField<IServiceRecord, String> CHANNEL_TYPE = createField(DSL.name("CHANNEL_TYPE"), SQLDataType.VARCHAR(20), this, "「channelType」- 通道类型：ADAPTOR / CONNECTOR / ACTOR / DIRECTOR / DEFINE");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.CHANNEL_COMPONENT</code>.
     * 「channelComponent」- 自定义通道专用组件
     */
    public final TableField<IServiceRecord, String> CHANNEL_COMPONENT = createField(DSL.name("CHANNEL_COMPONENT"), SQLDataType.VARCHAR(255), this, "「channelComponent」- 自定义通道专用组件");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.CHANNEL_CONFIG</code>.
     * 「channelConfig」- 通道（自定义）配置信息，Channel专用
     */
    public final TableField<IServiceRecord, String> CHANNEL_CONFIG = createField(DSL.name("CHANNEL_CONFIG"), SQLDataType.CLOB, this, "「channelConfig」- 通道（自定义）配置信息，Channel专用");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.CONFIG_INTEGRATION</code>.
     * 「configIntegration」- 集成配置信息，第三方专用
     */
    public final TableField<IServiceRecord, String> CONFIG_INTEGRATION = createField(DSL.name("CONFIG_INTEGRATION"), SQLDataType.CLOB, this, "「configIntegration」- 集成配置信息，第三方专用");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.CONFIG_DATABASE</code>.
     * 「configDatabase」- 数据库配置，当前通道访问的Database
     */
    public final TableField<IServiceRecord, String> CONFIG_DATABASE = createField(DSL.name("CONFIG_DATABASE"), SQLDataType.CLOB, this, "「configDatabase」- 数据库配置，当前通道访问的Database");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.DICT_CONFIG</code>. 「dictConfig」-
     * 字典的配置信息
     */
    public final TableField<IServiceRecord, String> DICT_CONFIG = createField(DSL.name("DICT_CONFIG"), SQLDataType.CLOB, this, "「dictConfig」- 字典的配置信息");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.DICT_COMPONENT</code>.
     * 「dictComponent」- 字典配置中的插件
     */
    public final TableField<IServiceRecord, String> DICT_COMPONENT = createField(DSL.name("DICT_COMPONENT"), SQLDataType.VARCHAR(255), this, "「dictComponent」- 字典配置中的插件");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.DICT_EPSILON</code>. 「dictEpsilon」-
     * 字典的消费配置
     */
    public final TableField<IServiceRecord, String> DICT_EPSILON = createField(DSL.name("DICT_EPSILON"), SQLDataType.CLOB, this, "「dictEpsilon」- 字典的消费配置");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.MAPPING_CONFIG</code>.
     * 「mappingConfig」- 映射专用配置
     */
    public final TableField<IServiceRecord, String> MAPPING_CONFIG = createField(DSL.name("MAPPING_CONFIG"), SQLDataType.CLOB, this, "「mappingConfig」- 映射专用配置");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.MAPPING_MODE</code>. 「mappingMode」-
     * 映射的模式
     */
    public final TableField<IServiceRecord, String> MAPPING_MODE = createField(DSL.name("MAPPING_MODE"), SQLDataType.VARCHAR(20), this, "「mappingMode」- 映射的模式");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.MAPPING_COMPONENT</code>.
     * 「mappingComponent」- 映射组件类型
     */
    public final TableField<IServiceRecord, String> MAPPING_COMPONENT = createField(DSL.name("MAPPING_COMPONENT"), SQLDataType.VARCHAR(255), this, "「mappingComponent」- 映射组件类型");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.SERVICE_RECORD</code>.
     * 「serviceRecord」- 服务记录定义
     */
    public final TableField<IServiceRecord, String> SERVICE_RECORD = createField(DSL.name("SERVICE_RECORD"), SQLDataType.VARCHAR(255), this, "「serviceRecord」- 服务记录定义");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.SERVICE_COMPONENT</code>.
     * 「serviceComponent」- 服务组件定义
     */
    public final TableField<IServiceRecord, String> SERVICE_COMPONENT = createField(DSL.name("SERVICE_COMPONENT"), SQLDataType.VARCHAR(255), this, "「serviceComponent」- 服务组件定义");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.SERVICE_CONFIG</code>.
     * 「serviceConfig」- 业务组件配置，业务组件专用
     */
    public final TableField<IServiceRecord, String> SERVICE_CONFIG = createField(DSL.name("SERVICE_CONFIG"), SQLDataType.CLOB, this, "「serviceConfig」- 业务组件配置，业务组件专用");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.IDENTIFIER</code>. 「identifier」-
     * 当前类型描述的Model的标识
     */
    public final TableField<IServiceRecord, String> IDENTIFIER = createField(DSL.name("IDENTIFIER"), SQLDataType.VARCHAR(255), this, "「identifier」- 当前类型描述的Model的标识");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.IDENTIFIER_COMPONENT</code>.
     * 「identifierComponent」- 当前业务接口使用的标识选择器
     */
    public final TableField<IServiceRecord, String> IDENTIFIER_COMPONENT = createField(DSL.name("IDENTIFIER_COMPONENT"), SQLDataType.VARCHAR(255), this, "「identifierComponent」- 当前业务接口使用的标识选择器");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.RULE_UNIQUE</code>. 「ruleUnique」-
     * 第二标识规则，当前通道的专用标识规则RuleUnique
     */
    public final TableField<IServiceRecord, String> RULE_UNIQUE = createField(DSL.name("RULE_UNIQUE"), SQLDataType.CLOB, this, "「ruleUnique」- 第二标识规则，当前通道的专用标识规则RuleUnique");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<IServiceRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<IServiceRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<IServiceRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<IServiceRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<IServiceRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<IServiceRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<IServiceRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.I_SERVICE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<IServiceRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private IService(Name alias, Table<IServiceRecord> aliased) {
        this(alias, aliased, null);
    }

    private IService(Name alias, Table<IServiceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.I_SERVICE</code> table reference
     */
    public IService(String alias) {
        this(DSL.name(alias), I_SERVICE);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.I_SERVICE</code> table reference
     */
    public IService(Name alias) {
        this(alias, I_SERVICE);
    }

    /**
     * Create a <code>DB_ETERNAL.I_SERVICE</code> table reference
     */
    public IService() {
        this(DSL.name("I_SERVICE"), null);
    }

    public <O extends Record> IService(Table<O> child, ForeignKey<O, IServiceRecord> key) {
        super(child, key, I_SERVICE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IServiceRecord> getRecordType() {
        return IServiceRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<IServiceRecord> getPrimaryKey() {
        return Keys.KEY_I_SERVICE_PRIMARY;
    }

    @Override
    public List<UniqueKey<IServiceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_I_SERVICE_NAME);
    }

    @Override
    public IService as(String alias) {
        return new IService(DSL.name(alias), this);
    }

    @Override
    public IService as(Name alias) {
        return new IService(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IService rename(String name) {
        return new IService(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IService rename(Name name) {
        return new IService(name, null);
    }
}
