/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.jet.domain.tables;


import cn.vertxup.jet.domain.Db;
import cn.vertxup.jet.domain.Keys;
import cn.vertxup.jet.domain.tables.records.IApiRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class IApi extends TableImpl<IApiRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.I_API</code>
     */
    public static final IApi I_API = new IApi();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.I_API.KEY</code>. 「key」- 接口ID
     */
    public final TableField<IApiRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 接口ID");
    /**
     * The column <code>DB_ETERNAL.I_API.NAME</code>. 「name」- 接口名称
     */
    public final TableField<IApiRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 接口名称");
    /**
     * The column <code>DB_ETERNAL.I_API.URI</code>. 「uri」- 接口路径，安全路径位于 /api 之下
     */
    public final TableField<IApiRecord, String> URI = createField(DSL.name("URI"), SQLDataType.VARCHAR(255), this, "「uri」- 接口路径，安全路径位于 /api 之下");
    /**
     * The column <code>DB_ETERNAL.I_API.METHOD</code>. 「method」- 接口对应的HTTP方法
     */
    public final TableField<IApiRecord, String> METHOD = createField(DSL.name("METHOD"), SQLDataType.VARCHAR(20), this, "「method」- 接口对应的HTTP方法");
    /**
     * The column <code>DB_ETERNAL.I_API.CONSUMES</code>. 「consumes」- 当前接口使用的客户端
     * MIME
     */
    public final TableField<IApiRecord, String> CONSUMES = createField(DSL.name("CONSUMES"), SQLDataType.CLOB, this, "「consumes」- 当前接口使用的客户端 MIME");
    /**
     * The column <code>DB_ETERNAL.I_API.PRODUCES</code>. 「produces」- 当前接口使用的服务端
     * MIME
     */
    public final TableField<IApiRecord, String> PRODUCES = createField(DSL.name("PRODUCES"), SQLDataType.CLOB, this, "「produces」- 当前接口使用的服务端 MIME");
    /**
     * The column <code>DB_ETERNAL.I_API.SECURE</code>. 「secure」-
     * 是否走安全通道，默认为TRUE
     */
    public final TableField<IApiRecord, Boolean> SECURE = createField(DSL.name("SECURE"), SQLDataType.BIT, this, "「secure」- 是否走安全通道，默认为TRUE");
    /**
     * The column <code>DB_ETERNAL.I_API.COMMENT</code>. 「comment」- 备注信息
     */
    public final TableField<IApiRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB, this, "「comment」- 备注信息");
    /**
     * The column <code>DB_ETERNAL.I_API.TYPE</code>. 「type」- 通信类型，ONE-WAY /
     * REQUEST-RESPONSE / PUBLISH-SUBSCRIBE
     */
    public final TableField<IApiRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(64), this, "「type」- 通信类型，ONE-WAY / REQUEST-RESPONSE / PUBLISH-SUBSCRIBE");
    /**
     * The column <code>DB_ETERNAL.I_API.PARAM_MODE</code>. 「paramMode」-
     * 参数来源，QUERY / BODY / DEFINE / PATH
     */
    public final TableField<IApiRecord, String> PARAM_MODE = createField(DSL.name("PARAM_MODE"), SQLDataType.VARCHAR(20), this, "「paramMode」- 参数来源，QUERY / BODY / DEFINE / PATH");
    /**
     * The column <code>DB_ETERNAL.I_API.PARAM_REQUIRED</code>. 「paramRequired」-
     * 必须参数表，一个JsonArray用于返回 400基本验证（验证Query和Path）
     */
    public final TableField<IApiRecord, String> PARAM_REQUIRED = createField(DSL.name("PARAM_REQUIRED"), SQLDataType.CLOB, this, "「paramRequired」- 必须参数表，一个JsonArray用于返回 400基本验证（验证Query和Path）");
    /**
     * The column <code>DB_ETERNAL.I_API.PARAM_CONTAINED</code>.
     * 「paramContained」- 必须参数表，一个JsonArray用于返回 400基本验证（验证Body）
     */
    public final TableField<IApiRecord, String> PARAM_CONTAINED = createField(DSL.name("PARAM_CONTAINED"), SQLDataType.CLOB, this, "「paramContained」- 必须参数表，一个JsonArray用于返回 400基本验证（验证Body）");
    /**
     * The column <code>DB_ETERNAL.I_API.IN_RULE</code>. 「inRule」- 参数验证、转换基本规则
     */
    public final TableField<IApiRecord, String> IN_RULE = createField(DSL.name("IN_RULE"), SQLDataType.CLOB, this, "「inRule」- 参数验证、转换基本规则");
    /**
     * The column <code>DB_ETERNAL.I_API.IN_MAPPING</code>. 「inMapping」- 参数映射规则
     */
    public final TableField<IApiRecord, String> IN_MAPPING = createField(DSL.name("IN_MAPPING"), SQLDataType.CLOB, this, "「inMapping」- 参数映射规则");
    /**
     * The column <code>DB_ETERNAL.I_API.IN_PLUG</code>. 「inPlug」- 参数请求流程中的插件
     */
    public final TableField<IApiRecord, String> IN_PLUG = createField(DSL.name("IN_PLUG"), SQLDataType.VARCHAR(255), this, "「inPlug」- 参数请求流程中的插件");
    /**
     * The column <code>DB_ETERNAL.I_API.IN_SCRIPT</code>. 「inScript」-
     * 【保留】参数请求流程中的脚本控制
     */
    public final TableField<IApiRecord, String> IN_SCRIPT = createField(DSL.name("IN_SCRIPT"), SQLDataType.VARCHAR(255), this, "「inScript」- 【保留】参数请求流程中的脚本控制");
    /**
     * The column <code>DB_ETERNAL.I_API.OUT_WRITER</code>. 「outWriter」- 响应格式处理器
     */
    public final TableField<IApiRecord, String> OUT_WRITER = createField(DSL.name("OUT_WRITER"), SQLDataType.VARCHAR(255), this, "「outWriter」- 响应格式处理器");
    /**
     * The column <code>DB_ETERNAL.I_API.WORKER_TYPE</code>. 「workerType」-
     * Worker类型：JS / PLUG / STD
     */
    public final TableField<IApiRecord, String> WORKER_TYPE = createField(DSL.name("WORKER_TYPE"), SQLDataType.VARCHAR(255), this, "「workerType」- Worker类型：JS / PLUG / STD");
    /**
     * The column <code>DB_ETERNAL.I_API.WORKER_ADDRESS</code>. 「workerAddress」-
     * 请求发送地址
     */
    public final TableField<IApiRecord, String> WORKER_ADDRESS = createField(DSL.name("WORKER_ADDRESS"), SQLDataType.VARCHAR(255), this, "「workerAddress」- 请求发送地址");
    /**
     * The column <code>DB_ETERNAL.I_API.WORKER_CONSUMER</code>.
     * 「workerConsumer」- 请求地址消费专用组件
     */
    public final TableField<IApiRecord, String> WORKER_CONSUMER = createField(DSL.name("WORKER_CONSUMER"), SQLDataType.VARCHAR(255), this, "「workerConsumer」- 请求地址消费专用组件");
    /**
     * The column <code>DB_ETERNAL.I_API.WORKER_CLASS</code>. 「workerClass」- OX
     * | PLUG专用，请求执行器对应的JavaClass名称
     */
    public final TableField<IApiRecord, String> WORKER_CLASS = createField(DSL.name("WORKER_CLASS"), SQLDataType.VARCHAR(255), this, "「workerClass」- OX | PLUG专用，请求执行器对应的JavaClass名称");
    /**
     * The column <code>DB_ETERNAL.I_API.WORKER_JS</code>. 「workerJs」- JS
     * 专用，JavaScript路径：runtime/workers/&lt;app&gt;/下的执行器
     */
    public final TableField<IApiRecord, String> WORKER_JS = createField(DSL.name("WORKER_JS"), SQLDataType.VARCHAR(255), this, "「workerJs」- JS 专用，JavaScript路径：runtime/workers/<app>/下的执行器");
    /**
     * The column <code>DB_ETERNAL.I_API.SERVICE_ID</code>. 「serviceId」- 关联的服务ID
     */
    public final TableField<IApiRecord, String> SERVICE_ID = createField(DSL.name("SERVICE_ID"), SQLDataType.VARCHAR(36), this, "「serviceId」- 关联的服务ID");
    /**
     * The column <code>DB_ETERNAL.I_API.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<IApiRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.I_API.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<IApiRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.I_API.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<IApiRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.I_API.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<IApiRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>DB_ETERNAL.I_API.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<IApiRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.I_API.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<IApiRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.I_API.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<IApiRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.I_API.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<IApiRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private IApi(Name alias, Table<IApiRecord> aliased) {
        this(alias, aliased, null);
    }

    private IApi(Name alias, Table<IApiRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.I_API</code> table reference
     */
    public IApi(String alias) {
        this(DSL.name(alias), I_API);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.I_API</code> table reference
     */
    public IApi(Name alias) {
        this(alias, I_API);
    }

    /**
     * Create a <code>DB_ETERNAL.I_API</code> table reference
     */
    public IApi() {
        this(DSL.name("I_API"), null);
    }

    public <O extends Record> IApi(Table<O> child, ForeignKey<O, IApiRecord> key) {
        super(child, key, I_API);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IApiRecord> getRecordType() {
        return IApiRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<IApiRecord> getPrimaryKey() {
        return Keys.KEY_I_API_PRIMARY;
    }

    @Override
    public List<UniqueKey<IApiRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_I_API_URI);
    }

    @Override
    public IApi as(String alias) {
        return new IApi(DSL.name(alias), this);
    }

    @Override
    public IApi as(Name alias) {
        return new IApi(alias, this);
    }

    @Override
    public IApi as(Table<?> alias) {
        return new IApi(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public IApi rename(String name) {
        return new IApi(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IApi rename(Name name) {
        return new IApi(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public IApi rename(Table<?> name) {
        return new IApi(name.getQualifiedName(), null);
    }
}
