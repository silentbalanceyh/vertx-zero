/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.jet.domain.tables.records;


import cn.vertxup.jet.domain.tables.IService;
import cn.vertxup.jet.domain.tables.interfaces.IIService;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IServiceRecord extends UpdatableRecordImpl<IServiceRecord> implements VertxPojo, IIService {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.KEY</code>. 「key」- 服务ID
     */
    @Override
    public IServiceRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.KEY</code>. 「key」- 服务ID
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.NAMESPACE</code>. 「namespace」-
     * 服务所在名空间
     */
    @Override
    public IServiceRecord setNamespace(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.NAMESPACE</code>. 「namespace」-
     * 服务所在名空间
     */
    @Override
    public String getNamespace() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.NAME</code>. 「name」- 服务名称
     */
    @Override
    public IServiceRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.NAME</code>. 「name」- 服务名称
     */
    @Override
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.COMMENT</code>. 「comment」- 备注信息
     */
    @Override
    public IServiceRecord setComment(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.COMMENT</code>. 「comment」- 备注信息
     */
    @Override
    public String getComment() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.IS_WORKFLOW</code>. 「isWorkflow」-
     * 是否驱动工作流引擎
     */
    @Override
    public IServiceRecord setIsWorkflow(Boolean value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.IS_WORKFLOW</code>. 「isWorkflow」-
     * 是否驱动工作流引擎
     */
    @Override
    public Boolean getIsWorkflow() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.IS_GRAPHIC</code>. 「isGraphic」-
     * 是否驱动图引擎
     */
    @Override
    public IServiceRecord setIsGraphic(Boolean value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.IS_GRAPHIC</code>. 「isGraphic」-
     * 是否驱动图引擎
     */
    @Override
    public Boolean getIsGraphic() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.IN_SCRIPT</code>. 「inScript」-
     * 本次不使用，加载脚本引擎ScriptEngine前置脚本
     */
    @Override
    public IServiceRecord setInScript(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.IN_SCRIPT</code>. 「inScript」-
     * 本次不使用，加载脚本引擎ScriptEngine前置脚本
     */
    @Override
    public String getInScript() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.OUT_SCRIPT</code>. 「outScript」-
     * 本次不使用，加载脚本引擎ScriptEngine后置脚本
     */
    @Override
    public IServiceRecord setOutScript(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.OUT_SCRIPT</code>. 「outScript」-
     * 本次不使用，加载脚本引擎ScriptEngine后置脚本
     */
    @Override
    public String getOutScript() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.CHANNEL_TYPE</code>. 「channelType」-
     * 通道类型：ADAPTOR / CONNECTOR / ACTOR / DIRECTOR / DEFINE
     */
    @Override
    public IServiceRecord setChannelType(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.CHANNEL_TYPE</code>. 「channelType」-
     * 通道类型：ADAPTOR / CONNECTOR / ACTOR / DIRECTOR / DEFINE
     */
    @Override
    public String getChannelType() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.CHANNEL_COMPONENT</code>.
     * 「channelComponent」- 自定义通道专用组件
     */
    @Override
    public IServiceRecord setChannelComponent(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.CHANNEL_COMPONENT</code>.
     * 「channelComponent」- 自定义通道专用组件
     */
    @Override
    public String getChannelComponent() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.CHANNEL_CONFIG</code>.
     * 「channelConfig」- 通道（自定义）配置信息，Channel专用
     */
    @Override
    public IServiceRecord setChannelConfig(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.CHANNEL_CONFIG</code>.
     * 「channelConfig」- 通道（自定义）配置信息，Channel专用
     */
    @Override
    public String getChannelConfig() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.CONFIG_INTEGRATION</code>.
     * 「configIntegration」- 集成配置信息，第三方专用
     */
    @Override
    public IServiceRecord setConfigIntegration(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.CONFIG_INTEGRATION</code>.
     * 「configIntegration」- 集成配置信息，第三方专用
     */
    @Override
    public String getConfigIntegration() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.CONFIG_DATABASE</code>.
     * 「configDatabase」- 数据库配置，当前通道访问的Database
     */
    @Override
    public IServiceRecord setConfigDatabase(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.CONFIG_DATABASE</code>.
     * 「configDatabase」- 数据库配置，当前通道访问的Database
     */
    @Override
    public String getConfigDatabase() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.DICT_CONFIG</code>. 「dictConfig」-
     * 字典的配置信息
     */
    @Override
    public IServiceRecord setDictConfig(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.DICT_CONFIG</code>. 「dictConfig」-
     * 字典的配置信息
     */
    @Override
    public String getDictConfig() {
        return (String) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.DICT_COMPONENT</code>.
     * 「dictComponent」- 字典配置中的插件
     */
    @Override
    public IServiceRecord setDictComponent(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.DICT_COMPONENT</code>.
     * 「dictComponent」- 字典配置中的插件
     */
    @Override
    public String getDictComponent() {
        return (String) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.DICT_EPSILON</code>. 「dictEpsilon」-
     * 字典的消费配置
     */
    @Override
    public IServiceRecord setDictEpsilon(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.DICT_EPSILON</code>. 「dictEpsilon」-
     * 字典的消费配置
     */
    @Override
    public String getDictEpsilon() {
        return (String) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.MAPPING_CONFIG</code>.
     * 「mappingConfig」- 映射专用配置
     */
    @Override
    public IServiceRecord setMappingConfig(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.MAPPING_CONFIG</code>.
     * 「mappingConfig」- 映射专用配置
     */
    @Override
    public String getMappingConfig() {
        return (String) get(16);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.MAPPING_MODE</code>. 「mappingMode」-
     * 映射的模式
     */
    @Override
    public IServiceRecord setMappingMode(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.MAPPING_MODE</code>. 「mappingMode」-
     * 映射的模式
     */
    @Override
    public String getMappingMode() {
        return (String) get(17);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.MAPPING_COMPONENT</code>.
     * 「mappingComponent」- 映射组件类型
     */
    @Override
    public IServiceRecord setMappingComponent(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.MAPPING_COMPONENT</code>.
     * 「mappingComponent」- 映射组件类型
     */
    @Override
    public String getMappingComponent() {
        return (String) get(18);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.SERVICE_RECORD</code>.
     * 「serviceRecord」- 服务记录定义
     */
    @Override
    public IServiceRecord setServiceRecord(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.SERVICE_RECORD</code>.
     * 「serviceRecord」- 服务记录定义
     */
    @Override
    public String getServiceRecord() {
        return (String) get(19);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.SERVICE_COMPONENT</code>.
     * 「serviceComponent」- 服务组件定义
     */
    @Override
    public IServiceRecord setServiceComponent(String value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.SERVICE_COMPONENT</code>.
     * 「serviceComponent」- 服务组件定义
     */
    @Override
    public String getServiceComponent() {
        return (String) get(20);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.SERVICE_CONFIG</code>.
     * 「serviceConfig」- 业务组件配置，业务组件专用
     */
    @Override
    public IServiceRecord setServiceConfig(String value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.SERVICE_CONFIG</code>.
     * 「serviceConfig」- 业务组件配置，业务组件专用
     */
    @Override
    public String getServiceConfig() {
        return (String) get(21);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.IDENTIFIER</code>. 「identifier」-
     * 当前类型描述的Model的标识
     */
    @Override
    public IServiceRecord setIdentifier(String value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.IDENTIFIER</code>. 「identifier」-
     * 当前类型描述的Model的标识
     */
    @Override
    public String getIdentifier() {
        return (String) get(22);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.IDENTIFIER_COMPONENT</code>.
     * 「identifierComponent」- 当前业务接口使用的标识选择器
     */
    @Override
    public IServiceRecord setIdentifierComponent(String value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.IDENTIFIER_COMPONENT</code>.
     * 「identifierComponent」- 当前业务接口使用的标识选择器
     */
    @Override
    public String getIdentifierComponent() {
        return (String) get(23);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.RULE_UNIQUE</code>. 「ruleUnique」-
     * 第二标识规则，当前通道的专用标识规则RuleUnique
     */
    @Override
    public IServiceRecord setRuleUnique(String value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.RULE_UNIQUE</code>. 「ruleUnique」-
     * 第二标识规则，当前通道的专用标识规则RuleUnique
     */
    @Override
    public String getRuleUnique() {
        return (String) get(24);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public IServiceRecord setSigma(String value) {
        set(25, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(25);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public IServiceRecord setLanguage(String value) {
        set(26, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(26);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public IServiceRecord setActive(Boolean value) {
        set(27, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(27);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public IServiceRecord setMetadata(String value) {
        set(28, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(28);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public IServiceRecord setCreatedAt(LocalDateTime value) {
        set(29, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(29);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public IServiceRecord setCreatedBy(String value) {
        set(30, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(30);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public IServiceRecord setUpdatedAt(LocalDateTime value) {
        set(31, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(31);
    }

    /**
     * Setter for <code>DB_ETERNAL.I_SERVICE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public IServiceRecord setUpdatedBy(String value) {
        set(32, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.I_SERVICE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(32);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IIService from) {
        setKey(from.getKey());
        setNamespace(from.getNamespace());
        setName(from.getName());
        setComment(from.getComment());
        setIsWorkflow(from.getIsWorkflow());
        setIsGraphic(from.getIsGraphic());
        setInScript(from.getInScript());
        setOutScript(from.getOutScript());
        setChannelType(from.getChannelType());
        setChannelComponent(from.getChannelComponent());
        setChannelConfig(from.getChannelConfig());
        setConfigIntegration(from.getConfigIntegration());
        setConfigDatabase(from.getConfigDatabase());
        setDictConfig(from.getDictConfig());
        setDictComponent(from.getDictComponent());
        setDictEpsilon(from.getDictEpsilon());
        setMappingConfig(from.getMappingConfig());
        setMappingMode(from.getMappingMode());
        setMappingComponent(from.getMappingComponent());
        setServiceRecord(from.getServiceRecord());
        setServiceComponent(from.getServiceComponent());
        setServiceConfig(from.getServiceConfig());
        setIdentifier(from.getIdentifier());
        setIdentifierComponent(from.getIdentifierComponent());
        setRuleUnique(from.getRuleUnique());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IIService> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached IServiceRecord
     */
    public IServiceRecord() {
        super(IService.I_SERVICE);
    }

    /**
     * Create a detached, initialised IServiceRecord
     */
    public IServiceRecord(String key, String namespace, String name, String comment, Boolean isWorkflow, Boolean isGraphic, String inScript, String outScript, String channelType, String channelComponent, String channelConfig, String configIntegration, String configDatabase, String dictConfig, String dictComponent, String dictEpsilon, String mappingConfig, String mappingMode, String mappingComponent, String serviceRecord, String serviceComponent, String serviceConfig, String identifier, String identifierComponent, String ruleUnique, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(IService.I_SERVICE);

        setKey(key);
        setNamespace(namespace);
        setName(name);
        setComment(comment);
        setIsWorkflow(isWorkflow);
        setIsGraphic(isGraphic);
        setInScript(inScript);
        setOutScript(outScript);
        setChannelType(channelType);
        setChannelComponent(channelComponent);
        setChannelConfig(channelConfig);
        setConfigIntegration(configIntegration);
        setConfigDatabase(configDatabase);
        setDictConfig(dictConfig);
        setDictComponent(dictComponent);
        setDictEpsilon(dictEpsilon);
        setMappingConfig(mappingConfig);
        setMappingMode(mappingMode);
        setMappingComponent(mappingComponent);
        setServiceRecord(serviceRecord);
        setServiceComponent(serviceComponent);
        setServiceConfig(serviceConfig);
        setIdentifier(identifier);
        setIdentifierComponent(identifierComponent);
        setRuleUnique(ruleUnique);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
    }

    /**
     * Create a detached, initialised IServiceRecord
     */
    public IServiceRecord(cn.vertxup.jet.domain.tables.pojos.IService value) {
        super(IService.I_SERVICE);

        if (value != null) {
            setKey(value.getKey());
            setNamespace(value.getNamespace());
            setName(value.getName());
            setComment(value.getComment());
            setIsWorkflow(value.getIsWorkflow());
            setIsGraphic(value.getIsGraphic());
            setInScript(value.getInScript());
            setOutScript(value.getOutScript());
            setChannelType(value.getChannelType());
            setChannelComponent(value.getChannelComponent());
            setChannelConfig(value.getChannelConfig());
            setConfigIntegration(value.getConfigIntegration());
            setConfigDatabase(value.getConfigDatabase());
            setDictConfig(value.getDictConfig());
            setDictComponent(value.getDictComponent());
            setDictEpsilon(value.getDictEpsilon());
            setMappingConfig(value.getMappingConfig());
            setMappingMode(value.getMappingMode());
            setMappingComponent(value.getMappingComponent());
            setServiceRecord(value.getServiceRecord());
            setServiceComponent(value.getServiceComponent());
            setServiceConfig(value.getServiceConfig());
            setIdentifier(value.getIdentifier());
            setIdentifierComponent(value.getIdentifierComponent());
            setRuleUnique(value.getRuleUnique());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
        }
    }

        public IServiceRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
