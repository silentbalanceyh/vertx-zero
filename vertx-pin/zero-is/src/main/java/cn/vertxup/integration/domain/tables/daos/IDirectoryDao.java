/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.integration.domain.tables.daos;


import cn.vertxup.integration.domain.tables.IDirectory;
import cn.vertxup.integration.domain.tables.records.IDirectoryRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IDirectoryDao extends AbstractVertxDAO<IDirectoryRecord, cn.vertxup.integration.domain.tables.pojos.IDirectory, String, Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>>, Future<cn.vertxup.integration.domain.tables.pojos.IDirectory>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<IDirectoryRecord,cn.vertxup.integration.domain.tables.pojos.IDirectory,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public IDirectoryDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(IDirectory.I_DIRECTORY, cn.vertxup.integration.domain.tables.pojos.IDirectory.class, new JDBCClassicQueryExecutor<IDirectoryRecord,cn.vertxup.integration.domain.tables.pojos.IDirectory,String>(configuration,cn.vertxup.integration.domain.tables.pojos.IDirectory.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.integration.domain.tables.pojos.IDirectory object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByName(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByCode(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>STORE_PATH IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByStorePath(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.STORE_PATH.in(values));
        }

        /**
     * Find records that have <code>STORE_PATH IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByStorePath(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.STORE_PATH.in(values),limit);
        }

        /**
     * Find records that have <code>LINKED_PATH IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByLinkedPath(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.LINKED_PATH.in(values));
        }

        /**
     * Find records that have <code>LINKED_PATH IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByLinkedPath(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.LINKED_PATH.in(values),limit);
        }

        /**
     * Find records that have <code>PARENT_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByParentId(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.PARENT_ID.in(values));
        }

        /**
     * Find records that have <code>PARENT_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByParentId(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.PARENT_ID.in(values),limit);
        }

        /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByCategory(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.CATEGORY.in(values));
        }

        /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByCategory(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.CATEGORY.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByType(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>OWNER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByOwner(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.OWNER.in(values));
        }

        /**
     * Find records that have <code>OWNER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByOwner(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.OWNER.in(values),limit);
        }

        /**
     * Find records that have <code>INTEGRATION_ID IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByIntegrationId(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.INTEGRATION_ID.in(values));
        }

        /**
     * Find records that have <code>INTEGRATION_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByIntegrationId(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.INTEGRATION_ID.in(values),limit);
        }

        /**
     * Find records that have <code>RUN_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByRunComponent(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.RUN_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>RUN_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByRunComponent(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.RUN_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>VISIT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByVisit(Collection<Boolean> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.VISIT.in(values));
        }

        /**
     * Find records that have <code>VISIT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByVisit(Collection<Boolean> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.VISIT.in(values),limit);
        }

        /**
     * Find records that have <code>VISIT_MODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByVisitMode(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.VISIT_MODE.in(values));
        }

        /**
     * Find records that have <code>VISIT_MODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByVisitMode(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.VISIT_MODE.in(values),limit);
        }

        /**
     * Find records that have <code>VISIT_ROLE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByVisitRole(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.VISIT_ROLE.in(values));
        }

        /**
     * Find records that have <code>VISIT_ROLE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByVisitRole(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.VISIT_ROLE.in(values),limit);
        }

        /**
     * Find records that have <code>VISIT_GROUP IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByVisitGroup(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.VISIT_GROUP.in(values));
        }

        /**
     * Find records that have <code>VISIT_GROUP IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByVisitGroup(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.VISIT_GROUP.in(values),limit);
        }

        /**
     * Find records that have <code>VISIT_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByVisitComponent(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.VISIT_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>VISIT_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByVisitComponent(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.VISIT_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(IDirectory.I_DIRECTORY.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IDirectory>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(IDirectory.I_DIRECTORY.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<IDirectoryRecord,cn.vertxup.integration.domain.tables.pojos.IDirectory,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<IDirectoryRecord,cn.vertxup.integration.domain.tables.pojos.IDirectory,String>) super.queryExecutor();
        }
}
