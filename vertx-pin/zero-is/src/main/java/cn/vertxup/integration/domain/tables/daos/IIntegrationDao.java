/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.integration.domain.tables.daos;


import cn.vertxup.integration.domain.tables.IIntegration;
import cn.vertxup.integration.domain.tables.records.IIntegrationRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IIntegrationDao extends AbstractVertxDAO<IIntegrationRecord, cn.vertxup.integration.domain.tables.pojos.IIntegration, String, Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>>, Future<cn.vertxup.integration.domain.tables.pojos.IIntegration>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<IIntegrationRecord,cn.vertxup.integration.domain.tables.pojos.IIntegration,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public IIntegrationDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(IIntegration.I_INTEGRATION, cn.vertxup.integration.domain.tables.pojos.IIntegration.class, new JDBCClassicQueryExecutor<IIntegrationRecord,cn.vertxup.integration.domain.tables.pojos.IIntegration,String>(configuration,cn.vertxup.integration.domain.tables.pojos.IIntegration.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.integration.domain.tables.pojos.IIntegration object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByName(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByType(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>IP_V4 IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByIpV4(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.IP_V4.in(values));
        }

        /**
     * Find records that have <code>IP_V4 IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByIpV4(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.IP_V4.in(values),limit);
        }

        /**
     * Find records that have <code>IP_V6 IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByIpV6(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.IP_V6.in(values));
        }

        /**
     * Find records that have <code>IP_V6 IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByIpV6(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.IP_V6.in(values),limit);
        }

        /**
     * Find records that have <code>HOSTNAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByHostname(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.HOSTNAME.in(values));
        }

        /**
     * Find records that have <code>HOSTNAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByHostname(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.HOSTNAME.in(values),limit);
        }

        /**
     * Find records that have <code>PORT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByPort(Collection<Integer> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.PORT.in(values));
        }

        /**
     * Find records that have <code>PORT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByPort(Collection<Integer> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.PORT.in(values),limit);
        }

        /**
     * Find records that have <code>PROTOCOL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByProtocol(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.PROTOCOL.in(values));
        }

        /**
     * Find records that have <code>PROTOCOL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByProtocol(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.PROTOCOL.in(values),limit);
        }

        /**
     * Find records that have <code>SECURE_PORT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyBySecurePort(Collection<Integer> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.SECURE_PORT.in(values));
        }

        /**
     * Find records that have <code>SECURE_PORT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyBySecurePort(Collection<Integer> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.SECURE_PORT.in(values),limit);
        }

        /**
     * Find records that have <code>SECURE_PROTOCOL IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyBySecureProtocol(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.SECURE_PROTOCOL.in(values));
        }

        /**
     * Find records that have <code>SECURE_PROTOCOL IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyBySecureProtocol(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.SECURE_PROTOCOL.in(values),limit);
        }

        /**
     * Find records that have <code>ENDPOINT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByEndpoint(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.ENDPOINT.in(values));
        }

        /**
     * Find records that have <code>ENDPOINT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByEndpoint(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.ENDPOINT.in(values),limit);
        }

        /**
     * Find records that have <code>PATH IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByPath(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.PATH.in(values));
        }

        /**
     * Find records that have <code>PATH IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByPath(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.PATH.in(values),limit);
        }

        /**
     * Find records that have <code>OS_KEY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByOsKey(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.OS_KEY.in(values));
        }

        /**
     * Find records that have <code>OS_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByOsKey(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.OS_KEY.in(values),limit);
        }

        /**
     * Find records that have <code>OS_SECRET IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByOsSecret(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.OS_SECRET.in(values));
        }

        /**
     * Find records that have <code>OS_SECRET IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByOsSecret(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.OS_SECRET.in(values),limit);
        }

        /**
     * Find records that have <code>OS_AUTHORIZE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByOsAuthorize(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.OS_AUTHORIZE.in(values));
        }

        /**
     * Find records that have <code>OS_AUTHORIZE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByOsAuthorize(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.OS_AUTHORIZE.in(values),limit);
        }

        /**
     * Find records that have <code>OS_TOKEN IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByOsToken(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.OS_TOKEN.in(values));
        }

        /**
     * Find records that have <code>OS_TOKEN IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByOsToken(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.OS_TOKEN.in(values),limit);
        }

        /**
     * Find records that have <code>USERNAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByUsername(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.USERNAME.in(values));
        }

        /**
     * Find records that have <code>USERNAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByUsername(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.USERNAME.in(values),limit);
        }

        /**
     * Find records that have <code>PASSWORD IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByPassword(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.PASSWORD.in(values));
        }

        /**
     * Find records that have <code>PASSWORD IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByPassword(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.PASSWORD.in(values),limit);
        }

        /**
     * Find records that have <code>PUBLIC_KEY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByPublicKey(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.PUBLIC_KEY.in(values));
        }

        /**
     * Find records that have <code>PUBLIC_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByPublicKey(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.PUBLIC_KEY.in(values),limit);
        }

        /**
     * Find records that have <code>OPTIONS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByOptions(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.OPTIONS.in(values));
        }

        /**
     * Find records that have <code>OPTIONS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByOptions(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.OPTIONS.in(values),limit);
        }

        /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByAppId(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.APP_ID.in(values));
        }

        /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByAppId(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.APP_ID.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(IIntegration.I_INTEGRATION.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.integration.domain.tables.pojos.IIntegration>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(IIntegration.I_INTEGRATION.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<IIntegrationRecord,cn.vertxup.integration.domain.tables.pojos.IIntegration,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<IIntegrationRecord,cn.vertxup.integration.domain.tables.pojos.IIntegration,String>) super.queryExecutor();
        }
}
