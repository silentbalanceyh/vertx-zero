/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.psi.domain.tables;


import cn.vertxup.psi.domain.Db;
import cn.vertxup.psi.domain.Keys;
import cn.vertxup.psi.domain.tables.records.PAmountSpecRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PAmountSpec extends TableImpl<PAmountSpecRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.P_AMOUNT_SPEC</code>
     */
    public static final PAmountSpec P_AMOUNT_SPEC = new PAmountSpec();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.KEY</code>. 「key」- 物料价目表主键
     */
    public final TableField<PAmountSpecRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 物料价目表主键");
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.SERIAL</code>. 「serial」-
     * 物料价目表号（系统可用，直接计算）
     */
    public final TableField<PAmountSpecRecord, String> SERIAL = createField(DSL.name("SERIAL"), SQLDataType.VARCHAR(255), this, "「serial」- 物料价目表号（系统可用，直接计算）");
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.COMMODITY_ID</code>.
     * 「commodityId」- 商品ID
     */
    public final TableField<PAmountSpecRecord, String> COMMODITY_ID = createField(DSL.name("COMMODITY_ID"), SQLDataType.VARCHAR(36), this, "「commodityId」- 商品ID");
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.COMMODITY_CODE</code>.
     * 「commodityCode」- 商品编码
     */
    public final TableField<PAmountSpecRecord, String> COMMODITY_CODE = createField(DSL.name("COMMODITY_CODE"), SQLDataType.VARCHAR(255), this, "「commodityCode」- 商品编码");
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.COMMODITY_NAME</code>.
     * 「commodityName」- 商品名称
     */
    public final TableField<PAmountSpecRecord, String> COMMODITY_NAME = createField(DSL.name("COMMODITY_NAME"), SQLDataType.VARCHAR(255), this, "「commodityName」- 商品名称");
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.WH_ID</code>. 「whId」- 所属仓库
     */
    public final TableField<PAmountSpecRecord, String> WH_ID = createField(DSL.name("WH_ID"), SQLDataType.VARCHAR(36), this, "「whId」- 所属仓库");
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.AMOUNT_MIN</code>. 「amountMin」-
     * 定价最低
     */
    public final TableField<PAmountSpecRecord, BigDecimal> AMOUNT_MIN = createField(DSL.name("AMOUNT_MIN"), SQLDataType.DECIMAL(18, 2), this, "「amountMin」- 定价最低");
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.AMOUNT_MAX</code>. 「amountMax」-
     * 定价最高
     */
    public final TableField<PAmountSpecRecord, BigDecimal> AMOUNT_MAX = createField(DSL.name("AMOUNT_MAX"), SQLDataType.DECIMAL(18, 2), this, "「amountMax」- 定价最高");
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<PAmountSpecRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<PAmountSpecRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.METADATA</code>. 「metadata」-
     * 附加配置
     */
    public final TableField<PAmountSpecRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public final TableField<PAmountSpecRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<PAmountSpecRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public final TableField<PAmountSpecRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<PAmountSpecRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.P_AMOUNT_SPEC.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public final TableField<PAmountSpecRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private PAmountSpec(Name alias, Table<PAmountSpecRecord> aliased) {
        this(alias, aliased, null);
    }

    private PAmountSpec(Name alias, Table<PAmountSpecRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.P_AMOUNT_SPEC</code> table reference
     */
    public PAmountSpec(String alias) {
        this(DSL.name(alias), P_AMOUNT_SPEC);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.P_AMOUNT_SPEC</code> table reference
     */
    public PAmountSpec(Name alias) {
        this(alias, P_AMOUNT_SPEC);
    }

    /**
     * Create a <code>DB_ETERNAL.P_AMOUNT_SPEC</code> table reference
     */
    public PAmountSpec() {
        this(DSL.name("P_AMOUNT_SPEC"), null);
    }

    public <O extends Record> PAmountSpec(Table<O> child, ForeignKey<O, PAmountSpecRecord> key) {
        super(child, key, P_AMOUNT_SPEC);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PAmountSpecRecord> getRecordType() {
        return PAmountSpecRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<PAmountSpecRecord> getPrimaryKey() {
        return Keys.KEY_P_AMOUNT_SPEC_PRIMARY;
    }

    @Override
    public List<UniqueKey<PAmountSpecRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_P_AMOUNT_SPEC_SERIAL);
    }

    @Override
    public PAmountSpec as(String alias) {
        return new PAmountSpec(DSL.name(alias), this);
    }

    @Override
    public PAmountSpec as(Name alias) {
        return new PAmountSpec(alias, this);
    }

    @Override
    public PAmountSpec as(Table<?> alias) {
        return new PAmountSpec(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PAmountSpec rename(String name) {
        return new PAmountSpec(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PAmountSpec rename(Name name) {
        return new PAmountSpec(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PAmountSpec rename(Table<?> name) {
        return new PAmountSpec(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, String, String, String, String, String, BigDecimal, BigDecimal, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
