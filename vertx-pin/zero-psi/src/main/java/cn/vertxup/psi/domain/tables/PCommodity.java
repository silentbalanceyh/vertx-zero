/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.psi.domain.tables;


import cn.vertxup.psi.domain.Db;
import cn.vertxup.psi.domain.Keys;
import cn.vertxup.psi.domain.tables.records.PCommodityRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PCommodity extends TableImpl<PCommodityRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.P_COMMODITY</code>
     */
    public static final PCommodity P_COMMODITY = new PCommodity();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.KEY</code>. 「key」- 产品主键
     */
    public final TableField<PCommodityRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 产品主键");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.NAME</code>. 「name」- 产品名称
     */
    public final TableField<PCommodityRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 产品名称");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.CODE</code>. 「code」- 产品编号（系统可用）
     */
    public final TableField<PCommodityRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 产品编号（系统可用）");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.TYPE</code>. 「type」- 产品类型
     */
    public final TableField<PCommodityRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(36), this, "「type」- 产品类型");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.STATUS</code>. 「status」- 产品状态
     */
    public final TableField<PCommodityRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(36), this, "「status」- 产品状态");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.TAGS</code>. 「tags」- 商品标签
     */
    public final TableField<PCommodityRecord, String> TAGS = createField(DSL.name("TAGS"), SQLDataType.CLOB, this, "「tags」- 商品标签");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.ORIGIN</code>. 「origin」- 商品产地
     */
    public final TableField<PCommodityRecord, String> ORIGIN = createField(DSL.name("ORIGIN"), SQLDataType.CLOB, this, "「origin」- 商品产地");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.BAR_CODE</code>. 「barCode」- 条形码
     */
    public final TableField<PCommodityRecord, String> BAR_CODE = createField(DSL.name("BAR_CODE"), SQLDataType.CLOB, this, "「barCode」- 条形码");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.HELP_CODE</code>. 「helpCode」- 助记码
     */
    public final TableField<PCommodityRecord, String> HELP_CODE = createField(DSL.name("HELP_CODE"), SQLDataType.VARCHAR(255), this, "「helpCode」- 助记码");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.BRAND_ID</code>. 「brandId」- 品牌
     */
    public final TableField<PCommodityRecord, String> BRAND_ID = createField(DSL.name("BRAND_ID"), SQLDataType.VARCHAR(36), this, "「brandId」- 品牌");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.MODEL_NUMBER</code>.
     * 「modelNumber」- 规格型号
     */
    public final TableField<PCommodityRecord, String> MODEL_NUMBER = createField(DSL.name("MODEL_NUMBER"), SQLDataType.VARCHAR(255), this, "「modelNumber」- 规格型号");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.UNIT</code>. 「unit」- 计量单位
     */
    public final TableField<PCommodityRecord, String> UNIT = createField(DSL.name("UNIT"), SQLDataType.VARCHAR(64), this, "「unit」- 计量单位");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.EXPIRED_DAY</code>. 「expiredDay」-
     * 保质天数
     */
    public final TableField<PCommodityRecord, Integer> EXPIRED_DAY = createField(DSL.name("EXPIRED_DAY"), SQLDataType.INTEGER, this, "「expiredDay」- 保质天数");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.K_WAY_COST</code>. 「kWayCost」-
     * 成本计算方法
     */
    public final TableField<PCommodityRecord, String> K_WAY_COST = createField(DSL.name("K_WAY_COST"), SQLDataType.VARCHAR(36), this, "「kWayCost」- 成本计算方法");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.K_BY_BATCH</code>. 「kByBatch」-
     * 按批核算成本
     */
    public final TableField<PCommodityRecord, Boolean> K_BY_BATCH = createField(DSL.name("K_BY_BATCH"), SQLDataType.BIT, this, "「kByBatch」- 按批核算成本");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.K_TAX_TYPE</code>. 「kTaxType」-
     * 税收分类编码
     */
    public final TableField<PCommodityRecord, String> K_TAX_TYPE = createField(DSL.name("K_TAX_TYPE"), SQLDataType.VARCHAR(36), this, "「kTaxType」- 税收分类编码");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.K_TAX_RATE</code>. 「kTaxRate」- 税率
     */
    public final TableField<PCommodityRecord, BigDecimal> K_TAX_RATE = createField(DSL.name("K_TAX_RATE"), SQLDataType.DECIMAL(10, 2), this, "「kTaxRate」- 税率");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.DF_CUSTOMER</code>. 「dfCustomer」-
     * 默认供应商
     */
    public final TableField<PCommodityRecord, String> DF_CUSTOMER = createField(DSL.name("DF_CUSTOMER"), SQLDataType.VARCHAR(36), this, "「dfCustomer」- 默认供应商");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.DF_WH</code>. 「dfWh」- 默认仓库
     */
    public final TableField<PCommodityRecord, String> DF_WH = createField(DSL.name("DF_WH"), SQLDataType.VARCHAR(36), this, "「dfWh」- 默认仓库");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.LOGO</code>. 「logo」- 产品图片
     */
    public final TableField<PCommodityRecord, String> LOGO = createField(DSL.name("LOGO"), SQLDataType.VARCHAR(255), this, "「logo」- 产品图片");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.PRICE</code>. 「price」- 商品单价
     */
    public final TableField<PCommodityRecord, BigDecimal> PRICE = createField(DSL.name("PRICE"), SQLDataType.DECIMAL(18, 2).nullable(false), this, "「price」- 商品单价");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.QUANTITY</code>. 「quantity」- 商品数量
     */
    public final TableField<PCommodityRecord, Integer> QUANTITY = createField(DSL.name("QUANTITY"), SQLDataType.INTEGER.nullable(false), this, "「quantity」- 商品数量");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.AMOUNT</code>.
     * 「amount」——总价，理论计算结果
     */
    public final TableField<PCommodityRecord, BigDecimal> AMOUNT = createField(DSL.name("AMOUNT"), SQLDataType.DECIMAL(18, 2).nullable(false), this, "「amount」——总价，理论计算结果");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.COMMENT</code>. 「comment」- 产品备注
     */
    public final TableField<PCommodityRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB, this, "「comment」- 产品备注");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<PCommodityRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<PCommodityRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<PCommodityRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public final TableField<PCommodityRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<PCommodityRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public final TableField<PCommodityRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<PCommodityRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public final TableField<PCommodityRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private PCommodity(Name alias, Table<PCommodityRecord> aliased) {
        this(alias, aliased, null);
    }

    private PCommodity(Name alias, Table<PCommodityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.P_COMMODITY</code> table reference
     */
    public PCommodity(String alias) {
        this(DSL.name(alias), P_COMMODITY);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.P_COMMODITY</code> table reference
     */
    public PCommodity(Name alias) {
        this(alias, P_COMMODITY);
    }

    /**
     * Create a <code>DB_ETERNAL.P_COMMODITY</code> table reference
     */
    public PCommodity() {
        this(DSL.name("P_COMMODITY"), null);
    }

    public <O extends Record> PCommodity(Table<O> child, ForeignKey<O, PCommodityRecord> key) {
        super(child, key, P_COMMODITY);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PCommodityRecord> getRecordType() {
        return PCommodityRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<PCommodityRecord> getPrimaryKey() {
        return Keys.KEY_P_COMMODITY_PRIMARY;
    }

    @Override
    public List<UniqueKey<PCommodityRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_P_COMMODITY_CODE);
    }

    @Override
    public PCommodity as(String alias) {
        return new PCommodity(DSL.name(alias), this);
    }

    @Override
    public PCommodity as(Name alias) {
        return new PCommodity(alias, this);
    }

    @Override
    public PCommodity as(Table<?> alias) {
        return new PCommodity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PCommodity rename(String name) {
        return new PCommodity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PCommodity rename(Name name) {
        return new PCommodity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PCommodity rename(Table<?> name) {
        return new PCommodity(name.getQualifiedName(), null);
    }
}
