/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.psi.domain.tables.daos;


import cn.vertxup.psi.domain.tables.PCommodityHis;
import cn.vertxup.psi.domain.tables.records.PCommodityHisRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PCommodityHisDao extends AbstractVertxDAO<PCommodityHisRecord, cn.vertxup.psi.domain.tables.pojos.PCommodityHis, String, Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>>, Future<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<PCommodityHisRecord,cn.vertxup.psi.domain.tables.pojos.PCommodityHis,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public PCommodityHisDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(PCommodityHis.P_COMMODITY_HIS, cn.vertxup.psi.domain.tables.pojos.PCommodityHis.class, new JDBCClassicQueryExecutor<PCommodityHisRecord,cn.vertxup.psi.domain.tables.pojos.PCommodityHis,String>(configuration,cn.vertxup.psi.domain.tables.pojos.PCommodityHis.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.psi.domain.tables.pojos.PCommodityHis object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByCode(Collection<String> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByType(Collection<String> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>COMMODITY_ID IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByCommodityId(Collection<String> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.COMMODITY_ID.in(values));
        }

        /**
     * Find records that have <code>COMMODITY_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByCommodityId(Collection<String> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.COMMODITY_ID.in(values),limit);
        }

        /**
     * Find records that have <code>NUM_FROM IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByNumFrom(Collection<Integer> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.NUM_FROM.in(values));
        }

        /**
     * Find records that have <code>NUM_FROM IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByNumFrom(Collection<Integer> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.NUM_FROM.in(values),limit);
        }

        /**
     * Find records that have <code>NUM_TO IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByNumTo(Collection<Integer> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.NUM_TO.in(values));
        }

        /**
     * Find records that have <code>NUM_TO IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByNumTo(Collection<Integer> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.NUM_TO.in(values),limit);
        }

        /**
     * Find records that have <code>AMOUNT_FROM IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByAmountFrom(Collection<BigDecimal> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.AMOUNT_FROM.in(values));
        }

        /**
     * Find records that have <code>AMOUNT_FROM IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByAmountFrom(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.AMOUNT_FROM.in(values),limit);
        }

        /**
     * Find records that have <code>AMOUNT_TO IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByAmountTo(Collection<BigDecimal> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.AMOUNT_TO.in(values));
        }

        /**
     * Find records that have <code>AMOUNT_TO IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByAmountTo(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.AMOUNT_TO.in(values),limit);
        }

        /**
     * Find records that have <code>ITEM_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByItemId(Collection<String> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.ITEM_ID.in(values));
        }

        /**
     * Find records that have <code>ITEM_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByItemId(Collection<String> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.ITEM_ID.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PCommodityHis>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(PCommodityHis.P_COMMODITY_HIS.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<PCommodityHisRecord,cn.vertxup.psi.domain.tables.pojos.PCommodityHis,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<PCommodityHisRecord,cn.vertxup.psi.domain.tables.pojos.PCommodityHis,String>) super.queryExecutor();
        }
}
