/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.psi.domain.tables;


import cn.vertxup.psi.domain.Db;
import cn.vertxup.psi.domain.Keys;
import cn.vertxup.psi.domain.tables.records.PBuyItemRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PBuyItem extends TableImpl<PBuyItemRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.P_BUY_ITEM</code>
     */
    public static final PBuyItem P_BUY_ITEM = new PBuyItem();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.KEY</code>. 「key」- 采购明细主键
     */
    public final TableField<PBuyItemRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 采购明细主键");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.SERIAL</code>. 「serial」-
     * 采购单号（系统可用，直接计算）
     */
    public final TableField<PBuyItemRecord, String> SERIAL = createField(DSL.name("SERIAL"), SQLDataType.VARCHAR(255), this, "「serial」- 采购单号（系统可用，直接计算）");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.STATUS</code>. 「status」- 明细状态
     */
    public final TableField<PBuyItemRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(36), this, "「status」- 明细状态");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.COMMODITY_ID</code>.
     * 「commodityId」- 商品ID
     */
    public final TableField<PBuyItemRecord, String> COMMODITY_ID = createField(DSL.name("COMMODITY_ID"), SQLDataType.VARCHAR(36), this, "「commodityId」- 商品ID");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.COMMODITY_CODE</code>.
     * 「commodityCode」- 商品编码
     */
    public final TableField<PBuyItemRecord, String> COMMODITY_CODE = createField(DSL.name("COMMODITY_CODE"), SQLDataType.VARCHAR(255), this, "「commodityCode」- 商品编码");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.COMMODITY_NAME</code>.
     * 「commodityName」- 商品名称
     */
    public final TableField<PBuyItemRecord, String> COMMODITY_NAME = createField(DSL.name("COMMODITY_NAME"), SQLDataType.VARCHAR(255), this, "「commodityName」- 商品名称");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.CUSTOMER_ID</code>. 「customerId」-
     * 建议供应商
     */
    public final TableField<PBuyItemRecord, String> CUSTOMER_ID = createField(DSL.name("CUSTOMER_ID"), SQLDataType.VARCHAR(36), this, "「customerId」- 建议供应商");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.TICKET_ID</code>. 「ticketId」-
     * 采购申请ID
     */
    public final TableField<PBuyItemRecord, String> TICKET_ID = createField(DSL.name("TICKET_ID"), SQLDataType.VARCHAR(36), this, "「ticketId」- 采购申请ID");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.ORDER_ID</code>. 「orderId」- 采购订单ID
     */
    public final TableField<PBuyItemRecord, String> ORDER_ID = createField(DSL.name("ORDER_ID"), SQLDataType.VARCHAR(36), this, "「orderId」- 采购订单ID");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.NUM_REQUEST</code>. 「numRequest」-
     * 申请数量
     */
    public final TableField<PBuyItemRecord, Integer> NUM_REQUEST = createField(DSL.name("NUM_REQUEST"), SQLDataType.INTEGER, this, "「numRequest」- 申请数量");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.NUM_APPROVED</code>.
     * 「numApproved」- 审批数量
     */
    public final TableField<PBuyItemRecord, Integer> NUM_APPROVED = createField(DSL.name("NUM_APPROVED"), SQLDataType.INTEGER, this, "「numApproved」- 审批数量");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.NUM</code>. 「num」- 实际采购数量（订单中）
     */
    public final TableField<PBuyItemRecord, Integer> NUM = createField(DSL.name("NUM"), SQLDataType.INTEGER, this, "「num」- 实际采购数量（订单中）");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.TAX_RATE</code>. 「taxRate」- 税率
     */
    public final TableField<PBuyItemRecord, BigDecimal> TAX_RATE = createField(DSL.name("TAX_RATE"), SQLDataType.DECIMAL(10, 2), this, "「taxRate」- 税率");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.TAX_AMOUNT</code>. 「taxAmount」- 税额
     */
    public final TableField<PBuyItemRecord, BigDecimal> TAX_AMOUNT = createField(DSL.name("TAX_AMOUNT"), SQLDataType.DECIMAL(18, 2), this, "「taxAmount」- 税额");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.TAX_PRICE</code>. 「taxPrice」- 含税单价
     */
    public final TableField<PBuyItemRecord, BigDecimal> TAX_PRICE = createField(DSL.name("TAX_PRICE"), SQLDataType.DECIMAL(18, 2), this, "「taxPrice」- 含税单价");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.AMOUNT_TOTAL</code>.
     * 「amountTotal」- 税价合计
     */
    public final TableField<PBuyItemRecord, BigDecimal> AMOUNT_TOTAL = createField(DSL.name("AMOUNT_TOTAL"), SQLDataType.DECIMAL(18, 2), this, "「amountTotal」- 税价合计");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.AMOUNT_SPLIT</code>.
     * 「amountSplit」- 采购分摊费用
     */
    public final TableField<PBuyItemRecord, BigDecimal> AMOUNT_SPLIT = createField(DSL.name("AMOUNT_SPLIT"), SQLDataType.DECIMAL(18, 2), this, "「amountSplit」- 采购分摊费用");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.AMOUNT</code>. 「amount」-
     * 采购总价（订单总价）
     */
    public final TableField<PBuyItemRecord, BigDecimal> AMOUNT = createField(DSL.name("AMOUNT"), SQLDataType.DECIMAL(18, 2), this, "「amount」- 采购总价（订单总价）");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.PRICE</code>. 「price」- 采购单价（采购价）
     */
    public final TableField<PBuyItemRecord, BigDecimal> PRICE = createField(DSL.name("PRICE"), SQLDataType.DECIMAL(18, 2), this, "「price」- 采购单价（采购价）");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.DISCOUNT_AMOUNT</code>.
     * 「discountAmount」- 折扣金额
     */
    public final TableField<PBuyItemRecord, BigDecimal> DISCOUNT_AMOUNT = createField(DSL.name("DISCOUNT_AMOUNT"), SQLDataType.DECIMAL(18, 2), this, "「discountAmount」- 折扣金额");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.DISCOUNT_RATE</code>.
     * 「discountRate」- 折扣率
     */
    public final TableField<PBuyItemRecord, BigDecimal> DISCOUNT_RATE = createField(DSL.name("DISCOUNT_RATE"), SQLDataType.DECIMAL(10, 2), this, "「discountRate」- 折扣率");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.COMMENT</code>. 「comment」- 商品行备注
     */
    public final TableField<PBuyItemRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB, this, "「comment」- 商品行备注");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.ARRIVE_AT</code>. 「arriveAt」-
     * 预计到货时间
     */
    public final TableField<PBuyItemRecord, LocalDateTime> ARRIVE_AT = createField(DSL.name("ARRIVE_AT"), SQLDataType.LOCALDATETIME(0), this, "「arriveAt」- 预计到货时间");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<PBuyItemRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<PBuyItemRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<PBuyItemRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<PBuyItemRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<PBuyItemRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public final TableField<PBuyItemRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<PBuyItemRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.P_BUY_ITEM.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public final TableField<PBuyItemRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private PBuyItem(Name alias, Table<PBuyItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private PBuyItem(Name alias, Table<PBuyItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.P_BUY_ITEM</code> table reference
     */
    public PBuyItem(String alias) {
        this(DSL.name(alias), P_BUY_ITEM);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.P_BUY_ITEM</code> table reference
     */
    public PBuyItem(Name alias) {
        this(alias, P_BUY_ITEM);
    }

    /**
     * Create a <code>DB_ETERNAL.P_BUY_ITEM</code> table reference
     */
    public PBuyItem() {
        this(DSL.name("P_BUY_ITEM"), null);
    }

    public <O extends Record> PBuyItem(Table<O> child, ForeignKey<O, PBuyItemRecord> key) {
        super(child, key, P_BUY_ITEM);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PBuyItemRecord> getRecordType() {
        return PBuyItemRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<PBuyItemRecord> getPrimaryKey() {
        return Keys.KEY_P_BUY_ITEM_PRIMARY;
    }

    @Override
    public List<UniqueKey<PBuyItemRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_P_BUY_ITEM_SERIAL);
    }

    @Override
    public PBuyItem as(String alias) {
        return new PBuyItem(DSL.name(alias), this);
    }

    @Override
    public PBuyItem as(Name alias) {
        return new PBuyItem(alias, this);
    }

    @Override
    public PBuyItem as(Table<?> alias) {
        return new PBuyItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PBuyItem rename(String name) {
        return new PBuyItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PBuyItem rename(Name name) {
        return new PBuyItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PBuyItem rename(Table<?> name) {
        return new PBuyItem(name.getQualifiedName(), null);
    }
}
