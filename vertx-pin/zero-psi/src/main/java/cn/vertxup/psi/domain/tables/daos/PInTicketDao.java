/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.psi.domain.tables.daos;


import cn.vertxup.psi.domain.tables.PInTicket;
import cn.vertxup.psi.domain.tables.records.PInTicketRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PInTicketDao extends AbstractVertxDAO<PInTicketRecord, cn.vertxup.psi.domain.tables.pojos.PInTicket, String, Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>>, Future<cn.vertxup.psi.domain.tables.pojos.PInTicket>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<PInTicketRecord,cn.vertxup.psi.domain.tables.pojos.PInTicket,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public PInTicketDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(PInTicket.P_IN_TICKET, cn.vertxup.psi.domain.tables.pojos.PInTicket.class, new JDBCClassicQueryExecutor<PInTicketRecord,cn.vertxup.psi.domain.tables.pojos.PInTicket,String>(configuration,cn.vertxup.psi.domain.tables.pojos.PInTicket.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.psi.domain.tables.pojos.PInTicket object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyBySerial(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.SERIAL.in(values));
        }

        /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyBySerial(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.SERIAL.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByType(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE_BUSINESS IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByTypeBusiness(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.TYPE_BUSINESS.in(values));
        }

        /**
     * Find records that have <code>TYPE_BUSINESS IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByTypeBusiness(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.TYPE_BUSINESS.in(values),limit);
        }

        /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByStatus(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.STATUS.in(values));
        }

        /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByStatus(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.STATUS.in(values),limit);
        }

        /**
     * Find records that have <code>WH_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByWhId(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.WH_ID.in(values));
        }

        /**
     * Find records that have <code>WH_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByWhId(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.WH_ID.in(values),limit);
        }

        /**
     * Find records that have <code>CUSTOMER_ID IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByCustomerId(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.CUSTOMER_ID.in(values));
        }

        /**
     * Find records that have <code>CUSTOMER_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByCustomerId(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.CUSTOMER_ID.in(values),limit);
        }

        /**
     * Find records that have <code>CUSTOMER_INFO IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByCustomerInfo(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.CUSTOMER_INFO.in(values));
        }

        /**
     * Find records that have <code>CUSTOMER_INFO IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByCustomerInfo(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.CUSTOMER_INFO.in(values),limit);
        }

        /**
     * Find records that have <code>PAYED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByPayedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.PAYED_AT.in(values));
        }

        /**
     * Find records that have <code>PAYED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByPayedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.PAYED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>PAYED_DAY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByPayedDay(Collection<Integer> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.PAYED_DAY.in(values));
        }

        /**
     * Find records that have <code>PAYED_DAY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByPayedDay(Collection<Integer> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.PAYED_DAY.in(values),limit);
        }

        /**
     * Find records that have <code>OP_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByOpAt(Collection<LocalDateTime> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.OP_AT.in(values));
        }

        /**
     * Find records that have <code>OP_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByOpAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.OP_AT.in(values),limit);
        }

        /**
     * Find records that have <code>OP_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByOpBy(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.OP_BY.in(values));
        }

        /**
     * Find records that have <code>OP_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByOpBy(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.OP_BY.in(values),limit);
        }

        /**
     * Find records that have <code>OP_DEPT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByOpDept(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.OP_DEPT.in(values));
        }

        /**
     * Find records that have <code>OP_DEPT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByOpDept(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.OP_DEPT.in(values),limit);
        }

        /**
     * Find records that have <code>TAGS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByTags(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.TAGS.in(values));
        }

        /**
     * Find records that have <code>TAGS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByTags(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.TAGS.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByComment(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.COMMENT.in(values),limit);
        }

        /**
     * Find records that have <code>SOURCE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyBySource(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.SOURCE.in(values));
        }

        /**
     * Find records that have <code>SOURCE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyBySource(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.SOURCE.in(values),limit);
        }

        /**
     * Find records that have <code>TAX_AMOUNT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByTaxAmount(Collection<BigDecimal> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.TAX_AMOUNT.in(values));
        }

        /**
     * Find records that have <code>TAX_AMOUNT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByTaxAmount(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.TAX_AMOUNT.in(values),limit);
        }

        /**
     * Find records that have <code>AMOUNT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByAmount(Collection<BigDecimal> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.AMOUNT.in(values));
        }

        /**
     * Find records that have <code>AMOUNT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByAmount(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.AMOUNT.in(values),limit);
        }

        /**
     * Find records that have <code>AMOUNT_TOTAL IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByAmountTotal(Collection<BigDecimal> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.AMOUNT_TOTAL.in(values));
        }

        /**
     * Find records that have <code>AMOUNT_TOTAL IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByAmountTotal(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.AMOUNT_TOTAL.in(values),limit);
        }

        /**
     * Find records that have <code>APPROVED_BY IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByApprovedBy(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.APPROVED_BY.in(values));
        }

        /**
     * Find records that have <code>APPROVED_BY IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByApprovedBy(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.APPROVED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>APPROVED_AT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByApprovedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.APPROVED_AT.in(values));
        }

        /**
     * Find records that have <code>APPROVED_AT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByApprovedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.APPROVED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>TO_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByToId(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.TO_ID.in(values));
        }

        /**
     * Find records that have <code>TO_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByToId(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.TO_ID.in(values),limit);
        }

        /**
     * Find records that have <code>TO_ADDRESS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByToAddress(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.TO_ADDRESS.in(values));
        }

        /**
     * Find records that have <code>TO_ADDRESS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByToAddress(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.TO_ADDRESS.in(values),limit);
        }

        /**
     * Find records that have <code>FROM_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByFromId(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.FROM_ID.in(values));
        }

        /**
     * Find records that have <code>FROM_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByFromId(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.FROM_ID.in(values),limit);
        }

        /**
     * Find records that have <code>FROM_ADDRESS IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByFromAddress(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.FROM_ADDRESS.in(values));
        }

        /**
     * Find records that have <code>FROM_ADDRESS IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByFromAddress(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.FROM_ADDRESS.in(values),limit);
        }

        /**
     * Find records that have <code>CURRENCY_ID IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByCurrencyId(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.CURRENCY_ID.in(values));
        }

        /**
     * Find records that have <code>CURRENCY_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByCurrencyId(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.CURRENCY_ID.in(values),limit);
        }

        /**
     * Find records that have <code>COMPANY_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByCompanyId(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.COMPANY_ID.in(values));
        }

        /**
     * Find records that have <code>COMPANY_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByCompanyId(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.COMPANY_ID.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(PInTicket.P_IN_TICKET.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PInTicket>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(PInTicket.P_IN_TICKET.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<PInTicketRecord,cn.vertxup.psi.domain.tables.pojos.PInTicket,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<PInTicketRecord,cn.vertxup.psi.domain.tables.pojos.PInTicket,String>) super.queryExecutor();
        }
}
