/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.psi.domain.tables;


import cn.vertxup.psi.domain.Db;
import cn.vertxup.psi.domain.Keys;
import cn.vertxup.psi.domain.tables.records.PWhRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PWh extends TableImpl<PWhRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.P_WH</code>
     */
    public static final PWh P_WH = new PWh();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.P_WH.KEY</code>. 「key」- 仓库主键
     */
    public final TableField<PWhRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 仓库主键");
    /**
     * The column <code>DB_ETERNAL.P_WH.NAME</code>. 「name」- 仓库名称
     */
    public final TableField<PWhRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 仓库名称");
    /**
     * The column <code>DB_ETERNAL.P_WH.CODE</code>. 「code」- 仓库编号（系统可用）
     */
    public final TableField<PWhRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 仓库编号（系统可用）");
    /**
     * The column <code>DB_ETERNAL.P_WH.TYPE</code>. 「type」- 仓库类型
     */
    public final TableField<PWhRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(36), this, "「type」- 仓库类型");
    /**
     * The column <code>DB_ETERNAL.P_WH.STATUS</code>. 「status」- 仓库状态
     */
    public final TableField<PWhRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(36), this, "「status」- 仓库状态");
    /**
     * The column <code>DB_ETERNAL.P_WH.MANAGER_ID</code>. 「managerId」- 仓库管理员
     */
    public final TableField<PWhRecord, String> MANAGER_ID = createField(DSL.name("MANAGER_ID"), SQLDataType.VARCHAR(36), this, "「managerId」- 仓库管理员");
    /**
     * The column <code>DB_ETERNAL.P_WH.MANAGER_NAME</code>. 「managerName」-
     * 管理员姓名
     */
    public final TableField<PWhRecord, String> MANAGER_NAME = createField(DSL.name("MANAGER_NAME"), SQLDataType.VARCHAR(255), this, "「managerName」- 管理员姓名");
    /**
     * The column <code>DB_ETERNAL.P_WH.MANAGER_PHONE</code>. 「managerPhone」-
     * 管理员电话
     */
    public final TableField<PWhRecord, String> MANAGER_PHONE = createField(DSL.name("MANAGER_PHONE"), SQLDataType.VARCHAR(255), this, "「managerPhone」- 管理员电话");
    /**
     * The column <code>DB_ETERNAL.P_WH.MANAGER_MOBILE</code>. 「managerMobile」-
     * 管理员手机
     */
    public final TableField<PWhRecord, String> MANAGER_MOBILE = createField(DSL.name("MANAGER_MOBILE"), SQLDataType.VARCHAR(255), this, "「managerMobile」- 管理员手机");
    /**
     * The column <code>DB_ETERNAL.P_WH.NEGATIVE</code>. 「negative」- 允许负库存
     */
    public final TableField<PWhRecord, Boolean> NEGATIVE = createField(DSL.name("NEGATIVE"), SQLDataType.BIT, this, "「negative」- 允许负库存");
    /**
     * The column <code>DB_ETERNAL.P_WH.SPACE</code>. 「space」- 仓位管理
     */
    public final TableField<PWhRecord, Boolean> SPACE = createField(DSL.name("SPACE"), SQLDataType.BIT, this, "「space」- 仓位管理");
    /**
     * The column <code>DB_ETERNAL.P_WH.AREA_NAME</code>. 「areaName」- 区域名称（手填）
     */
    public final TableField<PWhRecord, String> AREA_NAME = createField(DSL.name("AREA_NAME"), SQLDataType.CLOB, this, "「areaName」- 区域名称（手填）");
    /**
     * The column <code>DB_ETERNAL.P_WH.COMMENT</code>. 「comment」- 仓库备注
     */
    public final TableField<PWhRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB, this, "「comment」- 仓库备注");
    /**
     * The column <code>DB_ETERNAL.P_WH.DISTINCT_ID</code>. 「distinctId」- 仓库行政区域
     */
    public final TableField<PWhRecord, String> DISTINCT_ID = createField(DSL.name("DISTINCT_ID"), SQLDataType.VARCHAR(36), this, "「distinctId」- 仓库行政区域");
    /**
     * The column <code>DB_ETERNAL.P_WH.LOCATION_ID</code>. 「locationId」-
     * 启用LBS时对应的Location主键
     */
    public final TableField<PWhRecord, String> LOCATION_ID = createField(DSL.name("LOCATION_ID"), SQLDataType.VARCHAR(36), this, "「locationId」- 启用LBS时对应的Location主键");
    /**
     * The column <code>DB_ETERNAL.P_WH.LOCATION_ADDRESS</code>.
     * 「locationAddress」- 仓库地址
     */
    public final TableField<PWhRecord, String> LOCATION_ADDRESS = createField(DSL.name("LOCATION_ADDRESS"), SQLDataType.CLOB, this, "「locationAddress」- 仓库地址");
    /**
     * The column <code>DB_ETERNAL.P_WH.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<PWhRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.P_WH.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<PWhRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.P_WH.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<PWhRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.P_WH.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<PWhRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.P_WH.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<PWhRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.P_WH.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<PWhRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.P_WH.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<PWhRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.P_WH.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<PWhRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private PWh(Name alias, Table<PWhRecord> aliased) {
        this(alias, aliased, null);
    }

    private PWh(Name alias, Table<PWhRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.P_WH</code> table reference
     */
    public PWh(String alias) {
        this(DSL.name(alias), P_WH);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.P_WH</code> table reference
     */
    public PWh(Name alias) {
        this(alias, P_WH);
    }

    /**
     * Create a <code>DB_ETERNAL.P_WH</code> table reference
     */
    public PWh() {
        this(DSL.name("P_WH"), null);
    }

    public <O extends Record> PWh(Table<O> child, ForeignKey<O, PWhRecord> key) {
        super(child, key, P_WH);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PWhRecord> getRecordType() {
        return PWhRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<PWhRecord> getPrimaryKey() {
        return Keys.KEY_P_WH_PRIMARY;
    }

    @Override
    public List<UniqueKey<PWhRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_P_WH_CODE);
    }

    @Override
    public PWh as(String alias) {
        return new PWh(DSL.name(alias), this);
    }

    @Override
    public PWh as(Name alias) {
        return new PWh(alias, this);
    }

    @Override
    public PWh as(Table<?> alias) {
        return new PWh(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PWh rename(String name) {
        return new PWh(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PWh rename(Name name) {
        return new PWh(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PWh rename(Table<?> name) {
        return new PWh(name.getQualifiedName(), null);
    }
}
