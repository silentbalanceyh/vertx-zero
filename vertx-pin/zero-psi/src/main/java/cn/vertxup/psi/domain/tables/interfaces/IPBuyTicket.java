/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.psi.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IPBuyTicket extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.KEY</code>. 「key」- 采购申请主键
     */
    public IPBuyTicket setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.KEY</code>. 「key」- 采购申请主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.SERIAL</code>. 「serial」-
     * 采购单号（系统可用）
     */
    public IPBuyTicket setSerial(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.SERIAL</code>. 「serial」-
     * 采购单号（系统可用）
     */
    public String getSerial();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.TYPE</code>. 「type」- 单据类型
     */
    public IPBuyTicket setType(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.TYPE</code>. 「type」- 单据类型
     */
    public String getType();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.STATUS</code>. 「status」- 单据状态
     */
    public IPBuyTicket setStatus(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.STATUS</code>. 「status」- 单据状态
     */
    public String getStatus();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.OP_AT</code>. 「opAt」- 申请时间（单据日期）
     */
    public IPBuyTicket setOpAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.OP_AT</code>. 「opAt」- 申请时间（单据日期）
     */
    public LocalDateTime getOpAt();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.OP_BY</code>. 「opBy」- 申请人
     */
    public IPBuyTicket setOpBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.OP_BY</code>. 「opBy」- 申请人
     */
    public String getOpBy();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.OP_DEPT</code>. 「opDept」- 申请部门
     */
    public IPBuyTicket setOpDept(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.OP_DEPT</code>. 「opDept」- 申请部门
     */
    public String getOpDept();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.SOURCE</code>. 「source」- 单据来源
     */
    public IPBuyTicket setSource(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.SOURCE</code>. 「source」- 单据来源
     */
    public String getSource();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.CUSTOMER_ID</code>.
     * 「customerId」- 建议供应商
     */
    public IPBuyTicket setCustomerId(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.CUSTOMER_ID</code>.
     * 「customerId」- 建议供应商
     */
    public String getCustomerId();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.CURRENCY_ID</code>.
     * 「currencyId」- 币种
     */
    public IPBuyTicket setCurrencyId(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.CURRENCY_ID</code>.
     * 「currencyId」- 币种
     */
    public String getCurrencyId();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.COMPANY_ID</code>. 「companyId」-
     * 所属公司
     */
    public IPBuyTicket setCompanyId(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.COMPANY_ID</code>. 「companyId」-
     * 所属公司
     */
    public String getCompanyId();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.APPROVED_BY</code>.
     * 「approvedBy」- 审核人
     */
    public IPBuyTicket setApprovedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.APPROVED_BY</code>.
     * 「approvedBy」- 审核人
     */
    public String getApprovedBy();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.APPROVED_AT</code>.
     * 「approvedAt」- 审核时间
     */
    public IPBuyTicket setApprovedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.APPROVED_AT</code>.
     * 「approvedAt」- 审核时间
     */
    public LocalDateTime getApprovedAt();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.TO_ID</code>. 「toId」- 收货地址ID
     */
    public IPBuyTicket setToId(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.TO_ID</code>. 「toId」- 收货地址ID
     */
    public String getToId();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.TO_ADDRESS</code>. 「toAddress」-
     * 收货地址
     */
    public IPBuyTicket setToAddress(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.TO_ADDRESS</code>. 「toAddress」-
     * 收货地址
     */
    public String getToAddress();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.TAGS</code>. 「tags」- 单据标签
     */
    public IPBuyTicket setTags(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.TAGS</code>. 「tags」- 单据标签
     */
    public String getTags();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.COMMENT</code>. 「comment」- 单据备注
     */
    public IPBuyTicket setComment(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.COMMENT</code>. 「comment」- 单据备注
     */
    public String getComment();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.ACTIVE</code>. 「active」- 是否启用
     */
    public IPBuyTicket setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.SIGMA</code>. 「sigma」- 统一标识
     */
    public IPBuyTicket setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.METADATA</code>. 「metadata」-
     * 附加配置
     */
    public IPBuyTicket setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.METADATA</code>. 「metadata」-
     * 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public IPBuyTicket setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public IPBuyTicket setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public IPBuyTicket setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public IPBuyTicket setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.P_BUY_TICKET.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public IPBuyTicket setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.P_BUY_TICKET.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IPBuyTicket
     */
    public void from(IPBuyTicket from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IPBuyTicket
     */
    public <E extends IPBuyTicket> E into(E into);

        @Override
        public default IPBuyTicket fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setSerial,json::getString,"SERIAL","java.lang.String");
                setOrThrow(this::setType,json::getString,"TYPE","java.lang.String");
                setOrThrow(this::setStatus,json::getString,"STATUS","java.lang.String");
                setOrThrow(this::setOpAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"OP_AT","java.time.LocalDateTime");
                setOrThrow(this::setOpBy,json::getString,"OP_BY","java.lang.String");
                setOrThrow(this::setOpDept,json::getString,"OP_DEPT","java.lang.String");
                setOrThrow(this::setSource,json::getString,"SOURCE","java.lang.String");
                setOrThrow(this::setCustomerId,json::getString,"CUSTOMER_ID","java.lang.String");
                setOrThrow(this::setCurrencyId,json::getString,"CURRENCY_ID","java.lang.String");
                setOrThrow(this::setCompanyId,json::getString,"COMPANY_ID","java.lang.String");
                setOrThrow(this::setApprovedBy,json::getString,"APPROVED_BY","java.lang.String");
                setOrThrow(this::setApprovedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"APPROVED_AT","java.time.LocalDateTime");
                setOrThrow(this::setToId,json::getString,"TO_ID","java.lang.String");
                setOrThrow(this::setToAddress,json::getString,"TO_ADDRESS","java.lang.String");
                setOrThrow(this::setTags,json::getString,"TAGS","java.lang.String");
                setOrThrow(this::setComment,json::getString,"COMMENT","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                setOrThrow(this::setUpdatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"UPDATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setUpdatedBy,json::getString,"UPDATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("SERIAL",getSerial());
                json.put("TYPE",getType());
                json.put("STATUS",getStatus());
                json.put("OP_AT",getOpAt()==null?null:getOpAt().toString());
                json.put("OP_BY",getOpBy());
                json.put("OP_DEPT",getOpDept());
                json.put("SOURCE",getSource());
                json.put("CUSTOMER_ID",getCustomerId());
                json.put("CURRENCY_ID",getCurrencyId());
                json.put("COMPANY_ID",getCompanyId());
                json.put("APPROVED_BY",getApprovedBy());
                json.put("APPROVED_AT",getApprovedAt()==null?null:getApprovedAt().toString());
                json.put("TO_ID",getToId());
                json.put("TO_ADDRESS",getToAddress());
                json.put("TAGS",getTags());
                json.put("COMMENT",getComment());
                json.put("ACTIVE",getActive());
                json.put("SIGMA",getSigma());
                json.put("METADATA",getMetadata());
                json.put("LANGUAGE",getLanguage());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                json.put("UPDATED_AT",getUpdatedAt()==null?null:getUpdatedAt().toString());
                json.put("UPDATED_BY",getUpdatedBy());
                return json;
        }

}
