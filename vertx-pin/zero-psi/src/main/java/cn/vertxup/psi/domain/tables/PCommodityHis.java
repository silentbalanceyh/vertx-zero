/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.psi.domain.tables;


import cn.vertxup.psi.domain.Db;
import cn.vertxup.psi.domain.Keys;
import cn.vertxup.psi.domain.tables.records.PCommodityHisRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PCommodityHis extends TableImpl<PCommodityHisRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.P_COMMODITY_HIS</code>
     */
    public static final PCommodityHis P_COMMODITY_HIS = new PCommodityHis();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.KEY</code>. 「key」- 产品变更记录主键
     */
    public final TableField<PCommodityHisRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 产品变更记录主键");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.CODE</code>. 「code」-
     * 产品变更编号（系统可用）
     */
    public final TableField<PCommodityHisRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 产品变更编号（系统可用）");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.TYPE</code>. 「type」-
     * 产品变更类型：IN/OUT，出入
     */
    public final TableField<PCommodityHisRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(36), this, "「type」- 产品变更类型：IN/OUT，出入");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.COMMODITY_ID</code>.
     * 「commodityId」- 产品ID
     */
    public final TableField<PCommodityHisRecord, String> COMMODITY_ID = createField(DSL.name("COMMODITY_ID"), SQLDataType.VARCHAR(36), this, "「commodityId」- 产品ID");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.NUM_FROM</code>. 「numFrom」-
     * 之前数量
     */
    public final TableField<PCommodityHisRecord, Integer> NUM_FROM = createField(DSL.name("NUM_FROM"), SQLDataType.INTEGER, this, "「numFrom」- 之前数量");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.NUM_TO</code>. 「numTo」- 之后数量
     */
    public final TableField<PCommodityHisRecord, Integer> NUM_TO = createField(DSL.name("NUM_TO"), SQLDataType.INTEGER, this, "「numTo」- 之后数量");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.AMOUNT_FROM</code>.
     * 「amountFrom」- 之前平均价格
     */
    public final TableField<PCommodityHisRecord, BigDecimal> AMOUNT_FROM = createField(DSL.name("AMOUNT_FROM"), SQLDataType.DECIMAL(18, 2), this, "「amountFrom」- 之前平均价格");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.AMOUNT_TO</code>. 「amountTo」-
     * 之后平均价格
     */
    public final TableField<PCommodityHisRecord, BigDecimal> AMOUNT_TO = createField(DSL.name("AMOUNT_TO"), SQLDataType.DECIMAL(18, 2), this, "「amountTo」- 之后平均价格");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.ITEM_ID</code>. 「itemId」-
     * 入库/出库明细ID
     */
    public final TableField<PCommodityHisRecord, String> ITEM_ID = createField(DSL.name("ITEM_ID"), SQLDataType.VARCHAR(36), this, "「itemId」- 入库/出库明细ID");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<PCommodityHisRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<PCommodityHisRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.METADATA</code>. 「metadata」-
     * 附加配置
     */
    public final TableField<PCommodityHisRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public final TableField<PCommodityHisRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.CREATED_AT</code>.
     * 「createdAt」- 创建时间
     */
    public final TableField<PCommodityHisRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.CREATED_BY</code>.
     * 「createdBy」- 创建人
     */
    public final TableField<PCommodityHisRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.UPDATED_AT</code>.
     * 「updatedAt」- 更新时间
     */
    public final TableField<PCommodityHisRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.P_COMMODITY_HIS.UPDATED_BY</code>.
     * 「updatedBy」- 更新人
     */
    public final TableField<PCommodityHisRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private PCommodityHis(Name alias, Table<PCommodityHisRecord> aliased) {
        this(alias, aliased, null);
    }

    private PCommodityHis(Name alias, Table<PCommodityHisRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.P_COMMODITY_HIS</code> table reference
     */
    public PCommodityHis(String alias) {
        this(DSL.name(alias), P_COMMODITY_HIS);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.P_COMMODITY_HIS</code> table reference
     */
    public PCommodityHis(Name alias) {
        this(alias, P_COMMODITY_HIS);
    }

    /**
     * Create a <code>DB_ETERNAL.P_COMMODITY_HIS</code> table reference
     */
    public PCommodityHis() {
        this(DSL.name("P_COMMODITY_HIS"), null);
    }

    public <O extends Record> PCommodityHis(Table<O> child, ForeignKey<O, PCommodityHisRecord> key) {
        super(child, key, P_COMMODITY_HIS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PCommodityHisRecord> getRecordType() {
        return PCommodityHisRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<PCommodityHisRecord> getPrimaryKey() {
        return Keys.KEY_P_COMMODITY_HIS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PCommodityHisRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_P_COMMODITY_HIS_CODE);
    }

    @Override
    public PCommodityHis as(String alias) {
        return new PCommodityHis(DSL.name(alias), this);
    }

    @Override
    public PCommodityHis as(Name alias) {
        return new PCommodityHis(alias, this);
    }

    @Override
    public PCommodityHis as(Table<?> alias) {
        return new PCommodityHis(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PCommodityHis rename(String name) {
        return new PCommodityHis(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PCommodityHis rename(Name name) {
        return new PCommodityHis(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PCommodityHis rename(Table<?> name) {
        return new PCommodityHis(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<String, String, String, String, Integer, Integer, BigDecimal, BigDecimal, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function17<? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super BigDecimal, ? super BigDecimal, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function17<? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super BigDecimal, ? super BigDecimal, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
