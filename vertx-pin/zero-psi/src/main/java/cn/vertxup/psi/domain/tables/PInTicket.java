/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.psi.domain.tables;


import cn.vertxup.psi.domain.Db;
import cn.vertxup.psi.domain.Keys;
import cn.vertxup.psi.domain.tables.records.PInTicketRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PInTicket extends TableImpl<PInTicketRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.P_IN_TICKET</code>
     */
    public static final PInTicket P_IN_TICKET = new PInTicket();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.KEY</code>. 「key」- 入库单主键
     */
    public final TableField<PInTicketRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 入库单主键");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.SERIAL</code>. 「serial」-
     * 入库单号（系统可用，直接计算）
     */
    public final TableField<PInTicketRecord, String> SERIAL = createField(DSL.name("SERIAL"), SQLDataType.VARCHAR(255), this, "「serial」- 入库单号（系统可用，直接计算）");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.TYPE</code>. 「type」- 单据类型
     */
    public final TableField<PInTicketRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(36), this, "「type」- 单据类型");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.TYPE_BUSINESS</code>.
     * 「typeBusiness」- 业务类型
     */
    public final TableField<PInTicketRecord, String> TYPE_BUSINESS = createField(DSL.name("TYPE_BUSINESS"), SQLDataType.VARCHAR(36), this, "「typeBusiness」- 业务类型");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.STATUS</code>. 「status」- 订单状态
     */
    public final TableField<PInTicketRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(36), this, "「status」- 订单状态");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.WH_ID</code>. 「whId」- 建议入库仓库
     */
    public final TableField<PInTicketRecord, String> WH_ID = createField(DSL.name("WH_ID"), SQLDataType.VARCHAR(36), this, "「whId」- 建议入库仓库");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.CUSTOMER_ID</code>. 「customerId」-
     * 实际供应商
     */
    public final TableField<PInTicketRecord, String> CUSTOMER_ID = createField(DSL.name("CUSTOMER_ID"), SQLDataType.VARCHAR(36), this, "「customerId」- 实际供应商");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.CUSTOMER_INFO</code>.
     * 「customerInfo」- 实际供应商联系信息
     */
    public final TableField<PInTicketRecord, String> CUSTOMER_INFO = createField(DSL.name("CUSTOMER_INFO"), SQLDataType.CLOB, this, "「customerInfo」- 实际供应商联系信息");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.PAYED_AT</code>. 「payedAt」- 结算日期
     */
    public final TableField<PInTicketRecord, LocalDateTime> PAYED_AT = createField(DSL.name("PAYED_AT"), SQLDataType.LOCALDATETIME(0), this, "「payedAt」- 结算日期");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.PAYED_DAY</code>. 「payedDay」-
     * 采购期限
     */
    public final TableField<PInTicketRecord, Integer> PAYED_DAY = createField(DSL.name("PAYED_DAY"), SQLDataType.INTEGER, this, "「payedDay」- 采购期限");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.OP_AT</code>. 「opAt」- 单据日期
     */
    public final TableField<PInTicketRecord, LocalDateTime> OP_AT = createField(DSL.name("OP_AT"), SQLDataType.LOCALDATETIME(0), this, "「opAt」- 单据日期");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.OP_BY</code>. 「opBy」- 业务员
     */
    public final TableField<PInTicketRecord, String> OP_BY = createField(DSL.name("OP_BY"), SQLDataType.VARCHAR(36), this, "「opBy」- 业务员");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.OP_DEPT</code>. 「opDept」- 业务部门
     */
    public final TableField<PInTicketRecord, String> OP_DEPT = createField(DSL.name("OP_DEPT"), SQLDataType.VARCHAR(255), this, "「opDept」- 业务部门");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.TAGS</code>. 「tags」- 单据标签
     */
    public final TableField<PInTicketRecord, String> TAGS = createField(DSL.name("TAGS"), SQLDataType.CLOB, this, "「tags」- 单据标签");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.COMMENT</code>. 「comment」- 单据备注
     */
    public final TableField<PInTicketRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB, this, "「comment」- 单据备注");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.SOURCE</code>. 「source」- 单据来源
     */
    public final TableField<PInTicketRecord, String> SOURCE = createField(DSL.name("SOURCE"), SQLDataType.VARCHAR(36), this, "「source」- 单据来源");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.TAX_AMOUNT</code>. 「taxAmount」-
     * 税额
     */
    public final TableField<PInTicketRecord, BigDecimal> TAX_AMOUNT = createField(DSL.name("TAX_AMOUNT"), SQLDataType.DECIMAL(18, 2), this, "「taxAmount」- 税额");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.AMOUNT</code>. 「amount」- 入库单总额
     */
    public final TableField<PInTicketRecord, BigDecimal> AMOUNT = createField(DSL.name("AMOUNT"), SQLDataType.DECIMAL(18, 2), this, "「amount」- 入库单总额");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.AMOUNT_TOTAL</code>.
     * 「amountTotal」- 税价合计
     */
    public final TableField<PInTicketRecord, BigDecimal> AMOUNT_TOTAL = createField(DSL.name("AMOUNT_TOTAL"), SQLDataType.DECIMAL(18, 2), this, "「amountTotal」- 税价合计");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.APPROVED_BY</code>. 「approvedBy」-
     * 审核人
     */
    public final TableField<PInTicketRecord, String> APPROVED_BY = createField(DSL.name("APPROVED_BY"), SQLDataType.VARCHAR(36), this, "「approvedBy」- 审核人");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.APPROVED_AT</code>. 「approvedAt」-
     * 审核时间
     */
    public final TableField<PInTicketRecord, LocalDateTime> APPROVED_AT = createField(DSL.name("APPROVED_AT"), SQLDataType.LOCALDATETIME(0), this, "「approvedAt」- 审核时间");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.TO_ID</code>. 「toId」- 收货地址ID
     */
    public final TableField<PInTicketRecord, String> TO_ID = createField(DSL.name("TO_ID"), SQLDataType.VARCHAR(36), this, "「toId」- 收货地址ID");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.TO_ADDRESS</code>. 「toAddress」-
     * 收货地址
     */
    public final TableField<PInTicketRecord, String> TO_ADDRESS = createField(DSL.name("TO_ADDRESS"), SQLDataType.CLOB, this, "「toAddress」- 收货地址");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.FROM_ID</code>. 「fromId」- 发货地址ID
     */
    public final TableField<PInTicketRecord, String> FROM_ID = createField(DSL.name("FROM_ID"), SQLDataType.VARCHAR(36), this, "「fromId」- 发货地址ID");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.FROM_ADDRESS</code>.
     * 「fromAddress」- 发货地址
     */
    public final TableField<PInTicketRecord, String> FROM_ADDRESS = createField(DSL.name("FROM_ADDRESS"), SQLDataType.CLOB, this, "「fromAddress」- 发货地址");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.CURRENCY_ID</code>. 「currencyId」-
     * 币种
     */
    public final TableField<PInTicketRecord, String> CURRENCY_ID = createField(DSL.name("CURRENCY_ID"), SQLDataType.VARCHAR(36), this, "「currencyId」- 币种");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.COMPANY_ID</code>. 「companyId」-
     * 所属公司
     */
    public final TableField<PInTicketRecord, String> COMPANY_ID = createField(DSL.name("COMPANY_ID"), SQLDataType.VARCHAR(36), this, "「companyId」- 所属公司");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<PInTicketRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<PInTicketRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<PInTicketRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public final TableField<PInTicketRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<PInTicketRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public final TableField<PInTicketRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<PInTicketRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.P_IN_TICKET.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public final TableField<PInTicketRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private PInTicket(Name alias, Table<PInTicketRecord> aliased) {
        this(alias, aliased, null);
    }

    private PInTicket(Name alias, Table<PInTicketRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.P_IN_TICKET</code> table reference
     */
    public PInTicket(String alias) {
        this(DSL.name(alias), P_IN_TICKET);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.P_IN_TICKET</code> table reference
     */
    public PInTicket(Name alias) {
        this(alias, P_IN_TICKET);
    }

    /**
     * Create a <code>DB_ETERNAL.P_IN_TICKET</code> table reference
     */
    public PInTicket() {
        this(DSL.name("P_IN_TICKET"), null);
    }

    public <O extends Record> PInTicket(Table<O> child, ForeignKey<O, PInTicketRecord> key) {
        super(child, key, P_IN_TICKET);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PInTicketRecord> getRecordType() {
        return PInTicketRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<PInTicketRecord> getPrimaryKey() {
        return Keys.KEY_P_IN_TICKET_PRIMARY;
    }

    @Override
    public List<UniqueKey<PInTicketRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_P_IN_TICKET_SERIAL);
    }

    @Override
    public PInTicket as(String alias) {
        return new PInTicket(DSL.name(alias), this);
    }

    @Override
    public PInTicket as(Name alias) {
        return new PInTicket(alias, this);
    }

    @Override
    public PInTicket as(Table<?> alias) {
        return new PInTicket(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PInTicket rename(String name) {
        return new PInTicket(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PInTicket rename(Name name) {
        return new PInTicket(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PInTicket rename(Table<?> name) {
        return new PInTicket(name.getQualifiedName(), null);
    }
}
