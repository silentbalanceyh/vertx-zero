/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.psi.domain.tables.daos;


import cn.vertxup.psi.domain.tables.PPos;
import cn.vertxup.psi.domain.tables.records.PPosRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PPosDao extends AbstractVertxDAO<PPosRecord, cn.vertxup.psi.domain.tables.pojos.PPos, String, Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>>, Future<cn.vertxup.psi.domain.tables.pojos.PPos>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<PPosRecord,cn.vertxup.psi.domain.tables.pojos.PPos,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public PPosDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(PPos.P_POS, cn.vertxup.psi.domain.tables.pojos.PPos.class, new JDBCClassicQueryExecutor<PPosRecord,cn.vertxup.psi.domain.tables.pojos.PPos,String>(configuration,cn.vertxup.psi.domain.tables.pojos.PPos.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.psi.domain.tables.pojos.PPos object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByName(Collection<String> values) {
                return findManyByCondition(PPos.P_POS.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(PPos.P_POS.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByCode(Collection<String> values) {
                return findManyByCondition(PPos.P_POS.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(PPos.P_POS.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByType(Collection<String> values) {
                return findManyByCondition(PPos.P_POS.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(PPos.P_POS.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByStatus(Collection<String> values) {
                return findManyByCondition(PPos.P_POS.STATUS.in(values));
        }

        /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByStatus(Collection<String> values, int limit) {
                return findManyByCondition(PPos.P_POS.STATUS.in(values),limit);
        }

        /**
     * Find records that have <code>WH_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByWhId(Collection<String> values) {
                return findManyByCondition(PPos.P_POS.WH_ID.in(values));
        }

        /**
     * Find records that have <code>WH_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByWhId(Collection<String> values, int limit) {
                return findManyByCondition(PPos.P_POS.WH_ID.in(values),limit);
        }

        /**
     * Find records that have <code>DIRECT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByDirect(Collection<Boolean> values) {
                return findManyByCondition(PPos.P_POS.DIRECT.in(values));
        }

        /**
     * Find records that have <code>DIRECT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByDirect(Collection<Boolean> values, int limit) {
                return findManyByCondition(PPos.P_POS.DIRECT.in(values),limit);
        }

        /**
     * Find records that have <code>CAPACITY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByCapacity(Collection<Long> values) {
                return findManyByCondition(PPos.P_POS.CAPACITY.in(values));
        }

        /**
     * Find records that have <code>CAPACITY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByCapacity(Collection<Long> values, int limit) {
                return findManyByCondition(PPos.P_POS.CAPACITY.in(values),limit);
        }

        /**
     * Find records that have <code>CAPACITY_EXCEED IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByCapacityExceed(Collection<Long> values) {
                return findManyByCondition(PPos.P_POS.CAPACITY_EXCEED.in(values));
        }

        /**
     * Find records that have <code>CAPACITY_EXCEED IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByCapacityExceed(Collection<Long> values, int limit) {
                return findManyByCondition(PPos.P_POS.CAPACITY_EXCEED.in(values),limit);
        }

        /**
     * Find records that have <code>LIMIT_TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByLimitType(Collection<String> values) {
                return findManyByCondition(PPos.P_POS.LIMIT_TYPE.in(values));
        }

        /**
     * Find records that have <code>LIMIT_TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByLimitType(Collection<String> values, int limit) {
                return findManyByCondition(PPos.P_POS.LIMIT_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>LIMIT_RULE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByLimitRule(Collection<String> values) {
                return findManyByCondition(PPos.P_POS.LIMIT_RULE.in(values));
        }

        /**
     * Find records that have <code>LIMIT_RULE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByLimitRule(Collection<String> values, int limit) {
                return findManyByCondition(PPos.P_POS.LIMIT_RULE.in(values),limit);
        }

        /**
     * Find records that have <code>POS_ROW IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByPosRow(Collection<Integer> values) {
                return findManyByCondition(PPos.P_POS.POS_ROW.in(values));
        }

        /**
     * Find records that have <code>POS_ROW IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByPosRow(Collection<Integer> values, int limit) {
                return findManyByCondition(PPos.P_POS.POS_ROW.in(values),limit);
        }

        /**
     * Find records that have <code>POS_COLUMN IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByPosColumn(Collection<Integer> values) {
                return findManyByCondition(PPos.P_POS.POS_COLUMN.in(values));
        }

        /**
     * Find records that have <code>POS_COLUMN IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByPosColumn(Collection<Integer> values, int limit) {
                return findManyByCondition(PPos.P_POS.POS_COLUMN.in(values),limit);
        }

        /**
     * Find records that have <code>POS_HEIGHT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByPosHeight(Collection<Integer> values) {
                return findManyByCondition(PPos.P_POS.POS_HEIGHT.in(values));
        }

        /**
     * Find records that have <code>POS_HEIGHT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByPosHeight(Collection<Integer> values, int limit) {
                return findManyByCondition(PPos.P_POS.POS_HEIGHT.in(values),limit);
        }

        /**
     * Find records that have <code>POS_TAGS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByPosTags(Collection<String> values) {
                return findManyByCondition(PPos.P_POS.POS_TAGS.in(values));
        }

        /**
     * Find records that have <code>POS_TAGS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByPosTags(Collection<String> values, int limit) {
                return findManyByCondition(PPos.P_POS.POS_TAGS.in(values),limit);
        }

        /**
     * Find records that have <code>POS_TRACE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByPosTrace(Collection<String> values) {
                return findManyByCondition(PPos.P_POS.POS_TRACE.in(values));
        }

        /**
     * Find records that have <code>POS_TRACE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByPosTrace(Collection<String> values, int limit) {
                return findManyByCondition(PPos.P_POS.POS_TRACE.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByComment(Collection<String> values) {
                return findManyByCondition(PPos.P_POS.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(PPos.P_POS.COMMENT.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(PPos.P_POS.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(PPos.P_POS.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(PPos.P_POS.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(PPos.P_POS.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(PPos.P_POS.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(PPos.P_POS.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(PPos.P_POS.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(PPos.P_POS.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(PPos.P_POS.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(PPos.P_POS.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(PPos.P_POS.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(PPos.P_POS.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(PPos.P_POS.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(PPos.P_POS.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(PPos.P_POS.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.psi.domain.tables.pojos.PPos>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(PPos.P_POS.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<PPosRecord,cn.vertxup.psi.domain.tables.pojos.PPos,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<PPosRecord,cn.vertxup.psi.domain.tables.pojos.PPos,String>) super.queryExecutor();
        }
}
