/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.psi.domain.tables;


import cn.vertxup.psi.domain.Db;
import cn.vertxup.psi.domain.Keys;
import cn.vertxup.psi.domain.tables.records.PInItemRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PInItem extends TableImpl<PInItemRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.P_IN_ITEM</code>
     */
    public static final PInItem P_IN_ITEM = new PInItem();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.KEY</code>. 「key」- 入库明细主键
     */
    public final TableField<PInItemRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 入库明细主键");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.SERIAL</code>. 「serial」-
     * 入库明细号（系统可用，直接计算）
     */
    public final TableField<PInItemRecord, String> SERIAL = createField(DSL.name("SERIAL"), SQLDataType.VARCHAR(255), this, "「serial」- 入库明细号（系统可用，直接计算）");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.STATUS</code>. 「status」- 明细状态
     */
    public final TableField<PInItemRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(36), this, "「status」- 明细状态");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.COMMODITY_ID</code>. 「commodityId」-
     * 商品ID
     */
    public final TableField<PInItemRecord, String> COMMODITY_ID = createField(DSL.name("COMMODITY_ID"), SQLDataType.VARCHAR(36), this, "「commodityId」- 商品ID");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.COMMODITY_CODE</code>.
     * 「commodityCode」- 商品编码
     */
    public final TableField<PInItemRecord, String> COMMODITY_CODE = createField(DSL.name("COMMODITY_CODE"), SQLDataType.VARCHAR(255), this, "「commodityCode」- 商品编码");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.COMMODITY_NAME</code>.
     * 「commodityName」- 商品名称
     */
    public final TableField<PInItemRecord, String> COMMODITY_NAME = createField(DSL.name("COMMODITY_NAME"), SQLDataType.VARCHAR(255), this, "「commodityName」- 商品名称");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.COMMODITY_LOGO</code>.
     * 「commodityLogo」- 商品Logo
     */
    public final TableField<PInItemRecord, String> COMMODITY_LOGO = createField(DSL.name("COMMODITY_LOGO"), SQLDataType.VARCHAR(255), this, "「commodityLogo」- 商品Logo");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.CUSTOMER_ID</code>. 「customerId」-
     * 供应商
     */
    public final TableField<PInItemRecord, String> CUSTOMER_ID = createField(DSL.name("CUSTOMER_ID"), SQLDataType.VARCHAR(36), this, "「customerId」- 供应商");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.FROM_NAME</code>. 「fromName」-
     * 供应商商品名称
     */
    public final TableField<PInItemRecord, String> FROM_NAME = createField(DSL.name("FROM_NAME"), SQLDataType.VARCHAR(255), this, "「fromName」- 供应商商品名称");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.FROM_CODE</code>. 「fromCode」-
     * 供应商商品编码
     */
    public final TableField<PInItemRecord, String> FROM_CODE = createField(DSL.name("FROM_CODE"), SQLDataType.VARCHAR(255), this, "「fromCode」- 供应商商品编码");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.TICKET_ID</code>. 「ticketId」- 入库单ID
     */
    public final TableField<PInItemRecord, String> TICKET_ID = createField(DSL.name("TICKET_ID"), SQLDataType.VARCHAR(36), this, "「ticketId」- 入库单ID");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.ORDER_NUMBER</code>. 「orderNumber」-
     * 订单编号
     */
    public final TableField<PInItemRecord, String> ORDER_NUMBER = createField(DSL.name("ORDER_NUMBER"), SQLDataType.VARCHAR(36), this, "「orderNumber」- 订单编号");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.ORDER_SOURCE</code>. 「orderSource」-
     * 源单单号
     */
    public final TableField<PInItemRecord, String> ORDER_SOURCE = createField(DSL.name("ORDER_SOURCE"), SQLDataType.VARCHAR(36), this, "「orderSource」- 源单单号");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.WH_ID</code>. 「whId」- 实际入库仓库
     */
    public final TableField<PInItemRecord, String> WH_ID = createField(DSL.name("WH_ID"), SQLDataType.VARCHAR(36), this, "「whId」- 实际入库仓库");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.NUM_WAIT</code>. 「numWait」- 预计入库
     */
    public final TableField<PInItemRecord, Integer> NUM_WAIT = createField(DSL.name("NUM_WAIT"), SQLDataType.INTEGER, this, "「numWait」- 预计入库");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.NUM</code>. 「num」- 实际入库数量
     */
    public final TableField<PInItemRecord, Integer> NUM = createField(DSL.name("NUM"), SQLDataType.INTEGER, this, "「num」- 实际入库数量");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.TAX_RATE</code>. 「taxRate」- 税率
     */
    public final TableField<PInItemRecord, BigDecimal> TAX_RATE = createField(DSL.name("TAX_RATE"), SQLDataType.DECIMAL(10, 2), this, "「taxRate」- 税率");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.TAX_AMOUNT</code>. 「taxAmount」- 税额
     */
    public final TableField<PInItemRecord, BigDecimal> TAX_AMOUNT = createField(DSL.name("TAX_AMOUNT"), SQLDataType.DECIMAL(18, 2), this, "「taxAmount」- 税额");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.TAX_PRICE</code>. 「taxPrice」- 含税单价
     */
    public final TableField<PInItemRecord, BigDecimal> TAX_PRICE = createField(DSL.name("TAX_PRICE"), SQLDataType.DECIMAL(18, 2), this, "「taxPrice」- 含税单价");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.AMOUNT_TOTAL</code>. 「amountTotal」-
     * 税价合计
     */
    public final TableField<PInItemRecord, BigDecimal> AMOUNT_TOTAL = createField(DSL.name("AMOUNT_TOTAL"), SQLDataType.DECIMAL(18, 2), this, "「amountTotal」- 税价合计");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.AMOUNT_SPLIT</code>. 「amountSplit」-
     * 采购分摊费用
     */
    public final TableField<PInItemRecord, BigDecimal> AMOUNT_SPLIT = createField(DSL.name("AMOUNT_SPLIT"), SQLDataType.DECIMAL(18, 2), this, "「amountSplit」- 采购分摊费用");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.AMOUNT</code>. 「amount」- 采购总价（订单总价）
     */
    public final TableField<PInItemRecord, BigDecimal> AMOUNT = createField(DSL.name("AMOUNT"), SQLDataType.DECIMAL(18, 2), this, "「amount」- 采购总价（订单总价）");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.PRICE</code>. 「price」- 采购单价（采购价）
     */
    public final TableField<PInItemRecord, BigDecimal> PRICE = createField(DSL.name("PRICE"), SQLDataType.DECIMAL(18, 2), this, "「price」- 采购单价（采购价）");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.COMMENT</code>. 「comment」- 商品行备注
     */
    public final TableField<PInItemRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB, this, "「comment」- 商品行备注");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.COST_PER_BASIS</code>.
     * 「costPerBasis」- 基本单位成本
     */
    public final TableField<PInItemRecord, BigDecimal> COST_PER_BASIS = createField(DSL.name("COST_PER_BASIS"), SQLDataType.DECIMAL(18, 2), this, "「costPerBasis」- 基本单位成本");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.COST_PER</code>. 「costPer」- 单位成本
     */
    public final TableField<PInItemRecord, BigDecimal> COST_PER = createField(DSL.name("COST_PER"), SQLDataType.DECIMAL(18, 2), this, "「costPer」- 单位成本");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.COST_AMOUNT</code>. 「costAmount」-
     * 入库成本
     */
    public final TableField<PInItemRecord, BigDecimal> COST_AMOUNT = createField(DSL.name("COST_AMOUNT"), SQLDataType.DECIMAL(18, 2), this, "「costAmount」- 入库成本");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.DISCOUNT_AMOUNT</code>.
     * 「discountAmount」- 折扣金额
     */
    public final TableField<PInItemRecord, BigDecimal> DISCOUNT_AMOUNT = createField(DSL.name("DISCOUNT_AMOUNT"), SQLDataType.DECIMAL(18, 2), this, "「discountAmount」- 折扣金额");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.DISCOUNT_RATE</code>.
     * 「discountRate」- 折扣率
     */
    public final TableField<PInItemRecord, BigDecimal> DISCOUNT_RATE = createField(DSL.name("DISCOUNT_RATE"), SQLDataType.DECIMAL(10, 2), this, "「discountRate」- 折扣率");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<PInItemRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<PInItemRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<PInItemRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<PInItemRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<PInItemRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<PInItemRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<PInItemRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.P_IN_ITEM.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<PInItemRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private PInItem(Name alias, Table<PInItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private PInItem(Name alias, Table<PInItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.P_IN_ITEM</code> table reference
     */
    public PInItem(String alias) {
        this(DSL.name(alias), P_IN_ITEM);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.P_IN_ITEM</code> table reference
     */
    public PInItem(Name alias) {
        this(alias, P_IN_ITEM);
    }

    /**
     * Create a <code>DB_ETERNAL.P_IN_ITEM</code> table reference
     */
    public PInItem() {
        this(DSL.name("P_IN_ITEM"), null);
    }

    public <O extends Record> PInItem(Table<O> child, ForeignKey<O, PInItemRecord> key) {
        super(child, key, P_IN_ITEM);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PInItemRecord> getRecordType() {
        return PInItemRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<PInItemRecord> getPrimaryKey() {
        return Keys.KEY_P_IN_ITEM_PRIMARY;
    }

    @Override
    public List<UniqueKey<PInItemRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_P_IN_ITEM_SERIAL);
    }

    @Override
    public PInItem as(String alias) {
        return new PInItem(DSL.name(alias), this);
    }

    @Override
    public PInItem as(Name alias) {
        return new PInItem(alias, this);
    }

    @Override
    public PInItem as(Table<?> alias) {
        return new PInItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PInItem rename(String name) {
        return new PInItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PInItem rename(Name name) {
        return new PInItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PInItem rename(Table<?> name) {
        return new PInItem(name.getQualifiedName(), null);
    }
}
