/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables;


import cn.vertxup.ambient.domain.Db;
import cn.vertxup.ambient.domain.Indexes;
import cn.vertxup.ambient.domain.Keys;
import cn.vertxup.ambient.domain.tables.records.XActivityChangeRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class XActivityChange extends TableImpl<XActivityChangeRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.X_ACTIVITY_CHANGE</code>
     */
    public static final XActivityChange X_ACTIVITY_CHANGE = new XActivityChange();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.KEY</code>. 「key」- 操作行为主键
     */
    public final TableField<XActivityChangeRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 操作行为主键");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.ACTIVITY_ID</code>.
     * 「activityId」- 关联的操作ID
     */
    public final TableField<XActivityChangeRecord, String> ACTIVITY_ID = createField(DSL.name("ACTIVITY_ID"), SQLDataType.VARCHAR(36), this, "「activityId」- 关联的操作ID");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.TYPE</code>. 「type」-
     * 字段变更类型：ADD | DELETE | UPDATE 三种
     */
    public final TableField<XActivityChangeRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(64), this, "「type」- 字段变更类型：ADD | DELETE | UPDATE 三种");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.STATUS</code>. 「status」-
     * 待确认变更状态：CONFIRMED | PENDING
     */
    public final TableField<XActivityChangeRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(64), this, "「status」- 待确认变更状态：CONFIRMED | PENDING");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.FIELD_NAME</code>.
     * 「fieldName」- 如果是变更记录则需要生成变更日志
     */
    public final TableField<XActivityChangeRecord, String> FIELD_NAME = createField(DSL.name("FIELD_NAME"), SQLDataType.VARCHAR(255), this, "「fieldName」- 如果是变更记录则需要生成变更日志");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.FIELD_ALIAS</code>.
     * 「fieldAlias」- 字段对应的别名
     */
    public final TableField<XActivityChangeRecord, String> FIELD_ALIAS = createField(DSL.name("FIELD_ALIAS"), SQLDataType.VARCHAR(255), this, "「fieldAlias」- 字段对应的别名");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.FIELD_TYPE</code>.
     * 「fieldType」- 变更字段的数据类型，直接从模型定义中读取
     */
    public final TableField<XActivityChangeRecord, String> FIELD_TYPE = createField(DSL.name("FIELD_TYPE"), SQLDataType.VARCHAR(255), this, "「fieldType」- 变更字段的数据类型，直接从模型定义中读取");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.VALUE_OLD</code>.
     * 「valueOld」- 旧值
     */
    public final TableField<XActivityChangeRecord, String> VALUE_OLD = createField(DSL.name("VALUE_OLD"), SQLDataType.CLOB, this, "「valueOld」- 旧值");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.VALUE_NEW</code>.
     * 「valueNew」- 新值
     */
    public final TableField<XActivityChangeRecord, String> VALUE_NEW = createField(DSL.name("VALUE_NEW"), SQLDataType.CLOB, this, "「valueNew」- 新值");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.SIGMA</code>. 「sigma」-
     * 用户组绑定的统一标识
     */
    public final TableField<XActivityChangeRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(128), this, "「sigma」- 用户组绑定的统一标识");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.LANGUAGE</code>.
     * 「language」- 使用的语言
     */
    public final TableField<XActivityChangeRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.ACTIVE</code>. 「active」-
     * 是否启用
     */
    public final TableField<XActivityChangeRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.METADATA</code>.
     * 「metadata」- 附加配置数据
     */
    public final TableField<XActivityChangeRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.CREATED_AT</code>.
     * 「createdAt」- 创建时间
     */
    public final TableField<XActivityChangeRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.CREATED_BY</code>.
     * 「createdBy」- 创建人
     */
    public final TableField<XActivityChangeRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.UPDATED_AT</code>.
     * 「updatedAt」- 更新时间
     */
    public final TableField<XActivityChangeRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.X_ACTIVITY_CHANGE.UPDATED_BY</code>.
     * 「updatedBy」- 更新人
     */
    public final TableField<XActivityChangeRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private XActivityChange(Name alias, Table<XActivityChangeRecord> aliased) {
        this(alias, aliased, null);
    }

    private XActivityChange(Name alias, Table<XActivityChangeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.X_ACTIVITY_CHANGE</code> table
     * reference
     */
    public XActivityChange(String alias) {
        this(DSL.name(alias), X_ACTIVITY_CHANGE);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.X_ACTIVITY_CHANGE</code> table
     * reference
     */
    public XActivityChange(Name alias) {
        this(alias, X_ACTIVITY_CHANGE);
    }

    /**
     * Create a <code>DB_ETERNAL.X_ACTIVITY_CHANGE</code> table reference
     */
    public XActivityChange() {
        this(DSL.name("X_ACTIVITY_CHANGE"), null);
    }

    public <O extends Record> XActivityChange(Table<O> child, ForeignKey<O, XActivityChangeRecord> key) {
        super(child, key, X_ACTIVITY_CHANGE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<XActivityChangeRecord> getRecordType() {
        return XActivityChangeRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.X_ACTIVITY_CHANGE_IDX_X_ACTIVITY_CHANGE_ACTIVITY_ID, Indexes.X_ACTIVITY_CHANGE_IDX_X_ACTIVITY_CHANGE_CREATED_AT);
    }

    @Override
    public UniqueKey<XActivityChangeRecord> getPrimaryKey() {
        return Keys.KEY_X_ACTIVITY_CHANGE_PRIMARY;
    }

    @Override
    public XActivityChange as(String alias) {
        return new XActivityChange(DSL.name(alias), this);
    }

    @Override
    public XActivityChange as(Name alias) {
        return new XActivityChange(alias, this);
    }

    @Override
    public XActivityChange as(Table<?> alias) {
        return new XActivityChange(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public XActivityChange rename(String name) {
        return new XActivityChange(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public XActivityChange rename(Name name) {
        return new XActivityChange(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public XActivityChange rename(Table<?> name) {
        return new XActivityChange(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function17<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function17<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
