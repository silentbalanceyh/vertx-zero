/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables;


import cn.vertxup.ambient.domain.Db;
import cn.vertxup.ambient.domain.Keys;
import cn.vertxup.ambient.domain.tables.records.XNumberRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class XNumber extends TableImpl<XNumberRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.X_NUMBER</code>
     */
    public static final XNumber X_NUMBER = new XNumber();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.KEY</code>. 「key」- 主键
     */
    public final TableField<XNumberRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 主键");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.CODE</code>. 「code」- 编码
     */
    public final TableField<XNumberRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(36), this, "「code」- 编码");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.COMMENT</code>. 「comment」-
     * 编号备注信息，用于描述编号数据,comment,S_COMMENT
     */
    public final TableField<XNumberRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.VARCHAR(255), this, "「comment」- 编号备注信息，用于描述编号数据,comment,S_COMMENT");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.CURRENT</code>.
     * 「current」编号当前值，对应${seed}，每次变化时current提取后更新为：current + step或current -
     * step,current,L_CURRENT
     */
    public final TableField<XNumberRecord, Long> CURRENT = createField(DSL.name("CURRENT"), SQLDataType.BIGINT.nullable(false), this, "「current」编号当前值，对应${seed}，每次变化时current提取后更新为：current + step或current - step,current,L_CURRENT");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.FORMAT</code>.
     * 「format」格式信息，用于处理最终格式：,format,S_FORMAT
     */
    public final TableField<XNumberRecord, String> FORMAT = createField(DSL.name("FORMAT"), SQLDataType.VARCHAR(255), this, "「format」格式信息，用于处理最终格式：,format,S_FORMAT");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.IDENTIFIER</code>.
     * 「identifier」编号对应的identifier，用于查询当前identifier使用的序号信息,identifier,S_IDENTIFIER
     */
    public final TableField<XNumberRecord, String> IDENTIFIER = createField(DSL.name("IDENTIFIER"), SQLDataType.VARCHAR(64).nullable(false), this, "「identifier」编号对应的identifier，用于查询当前identifier使用的序号信息,identifier,S_IDENTIFIER");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.PREFIX</code>.
     * 「prefix」编号前缀,prefix,S_PREFIX
     */
    public final TableField<XNumberRecord, String> PREFIX = createField(DSL.name("PREFIX"), SQLDataType.VARCHAR(64), this, "「prefix」编号前缀,prefix,S_PREFIX");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.SUFFIX</code>.
     * 「suffix」编号后缀,suffix,S_SUFFIX
     */
    public final TableField<XNumberRecord, String> SUFFIX = createField(DSL.name("SUFFIX"), SQLDataType.VARCHAR(64), this, "「suffix」编号后缀,suffix,S_SUFFIX");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.TIME</code>.
     * 「time」时间对应Pattern，对应${time}：YYYY-MM-DD
     * HH:mm:ss用于描述时间格式生成序号时间部分,time,S_TIME
     */
    public final TableField<XNumberRecord, String> TIME = createField(DSL.name("TIME"), SQLDataType.VARCHAR(20), this, "「time」时间对应Pattern，对应${time}：YYYY-MM-DD HH:mm:ss用于描述时间格式生成序号时间部分,time,S_TIME");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.LENGTH</code>.
     * 「length」编号长度，编号长度不包含prefix和suffix部分,length,I_LENGTH
     */
    public final TableField<XNumberRecord, Integer> LENGTH = createField(DSL.name("LENGTH"), SQLDataType.INTEGER.nullable(false), this, "「length」编号长度，编号长度不包含prefix和suffix部分,length,I_LENGTH");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.STEP</code>.
     * 「step」编号的步进系数，每次按照step进行变化,step,I_STEP
     */
    public final TableField<XNumberRecord, Integer> STEP = createField(DSL.name("STEP"), SQLDataType.INTEGER.nullable(false), this, "「step」编号的步进系数，每次按照step进行变化,step,I_STEP");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.DECREMENT</code>.
     * 「decrement」递增/递减？如果为true则递减，为false则是递增,decrement,IS_DECREMENT
     */
    public final TableField<XNumberRecord, Boolean> DECREMENT = createField(DSL.name("DECREMENT"), SQLDataType.BIT.nullable(false), this, "「decrement」递增/递减？如果为true则递减，为false则是递增,decrement,IS_DECREMENT");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.APP_ID</code>. 「appId」- 关联的应用程序ID
     */
    public final TableField<XNumberRecord, String> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.VARCHAR(255), this, "「appId」- 关联的应用程序ID");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<XNumberRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<XNumberRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<XNumberRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<XNumberRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<XNumberRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<XNumberRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<XNumberRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.X_NUMBER.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<XNumberRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private XNumber(Name alias, Table<XNumberRecord> aliased) {
        this(alias, aliased, null);
    }

    private XNumber(Name alias, Table<XNumberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.X_NUMBER</code> table reference
     */
    public XNumber(String alias) {
        this(DSL.name(alias), X_NUMBER);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.X_NUMBER</code> table reference
     */
    public XNumber(Name alias) {
        this(alias, X_NUMBER);
    }

    /**
     * Create a <code>DB_ETERNAL.X_NUMBER</code> table reference
     */
    public XNumber() {
        this(DSL.name("X_NUMBER"), null);
    }

    public <O extends Record> XNumber(Table<O> child, ForeignKey<O, XNumberRecord> key) {
        super(child, key, X_NUMBER);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<XNumberRecord> getRecordType() {
        return XNumberRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<XNumberRecord> getPrimaryKey() {
        return Keys.KEY_X_NUMBER_PRIMARY;
    }

    @Override
    public List<UniqueKey<XNumberRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_X_NUMBER_APP_ID);
    }

    @Override
    public XNumber as(String alias) {
        return new XNumber(DSL.name(alias), this);
    }

    @Override
    public XNumber as(Name alias) {
        return new XNumber(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public XNumber rename(String name) {
        return new XNumber(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public XNumber rename(Name name) {
        return new XNumber(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<String, String, String, Long, String, String, String, String, String, Integer, Integer, Boolean, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
