/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.daos;


import cn.vertxup.ambient.domain.tables.XActivityChange;
import cn.vertxup.ambient.domain.tables.records.XActivityChangeRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XActivityChangeDao extends AbstractVertxDAO<XActivityChangeRecord, cn.vertxup.ambient.domain.tables.pojos.XActivityChange, String, Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>>, Future<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<XActivityChangeRecord,cn.vertxup.ambient.domain.tables.pojos.XActivityChange,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public XActivityChangeDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(XActivityChange.X_ACTIVITY_CHANGE, cn.vertxup.ambient.domain.tables.pojos.XActivityChange.class, new JDBCClassicQueryExecutor<XActivityChangeRecord,cn.vertxup.ambient.domain.tables.pojos.XActivityChange,String>(configuration,cn.vertxup.ambient.domain.tables.pojos.XActivityChange.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.ambient.domain.tables.pojos.XActivityChange object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>ACTIVITY_ID IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByActivityId(Collection<String> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.ACTIVITY_ID.in(values));
        }

        /**
     * Find records that have <code>ACTIVITY_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByActivityId(Collection<String> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.ACTIVITY_ID.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByType(Collection<String> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByStatus(Collection<String> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.STATUS.in(values));
        }

        /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByStatus(Collection<String> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.STATUS.in(values),limit);
        }

        /**
     * Find records that have <code>FIELD_NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByFieldName(Collection<String> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.FIELD_NAME.in(values));
        }

        /**
     * Find records that have <code>FIELD_NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByFieldName(Collection<String> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.FIELD_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>FIELD_ALIAS IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByFieldAlias(Collection<String> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.FIELD_ALIAS.in(values));
        }

        /**
     * Find records that have <code>FIELD_ALIAS IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByFieldAlias(Collection<String> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.FIELD_ALIAS.in(values),limit);
        }

        /**
     * Find records that have <code>FIELD_TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByFieldType(Collection<String> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.FIELD_TYPE.in(values));
        }

        /**
     * Find records that have <code>FIELD_TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByFieldType(Collection<String> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.FIELD_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>VALUE_OLD IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByValueOld(Collection<String> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.VALUE_OLD.in(values));
        }

        /**
     * Find records that have <code>VALUE_OLD IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByValueOld(Collection<String> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.VALUE_OLD.in(values),limit);
        }

        /**
     * Find records that have <code>VALUE_NEW IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByValueNew(Collection<String> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.VALUE_NEW.in(values));
        }

        /**
     * Find records that have <code>VALUE_NEW IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByValueNew(Collection<String> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.VALUE_NEW.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XActivityChange>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<XActivityChangeRecord,cn.vertxup.ambient.domain.tables.pojos.XActivityChange,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<XActivityChangeRecord,cn.vertxup.ambient.domain.tables.pojos.XActivityChange,String>) super.queryExecutor();
        }
}
