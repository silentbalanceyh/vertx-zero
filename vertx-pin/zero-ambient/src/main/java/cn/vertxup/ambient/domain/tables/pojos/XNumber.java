/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.pojos;


import cn.vertxup.ambient.domain.tables.interfaces.IXNumber;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XNumber implements VertxPojo, IXNumber {

    private static final long serialVersionUID = 1L;

    private String        key;
    private String        code;
    private String        comment;
    private Long          current;
    private String        format;
    private String        identifier;
    private String        prefix;
    private String        suffix;
    private String        time;
    private Integer       length;
    private Integer       step;
    private Boolean       decrement;
    private String        appId;
    private Boolean       active;
    private String        sigma;
    private String        metadata;
    private String        language;
    private LocalDateTime createdAt;
    private String        createdBy;
    private LocalDateTime updatedAt;
    private String        updatedBy;

    public XNumber() {}

    public XNumber(IXNumber value) {
        this.key = value.getKey();
        this.code = value.getCode();
        this.comment = value.getComment();
        this.current = value.getCurrent();
        this.format = value.getFormat();
        this.identifier = value.getIdentifier();
        this.prefix = value.getPrefix();
        this.suffix = value.getSuffix();
        this.time = value.getTime();
        this.length = value.getLength();
        this.step = value.getStep();
        this.decrement = value.getDecrement();
        this.appId = value.getAppId();
        this.active = value.getActive();
        this.sigma = value.getSigma();
        this.metadata = value.getMetadata();
        this.language = value.getLanguage();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public XNumber(
        String        key,
        String        code,
        String        comment,
        Long          current,
        String        format,
        String        identifier,
        String        prefix,
        String        suffix,
        String        time,
        Integer       length,
        Integer       step,
        Boolean       decrement,
        String        appId,
        Boolean       active,
        String        sigma,
        String        metadata,
        String        language,
        LocalDateTime createdAt,
        String        createdBy,
        LocalDateTime updatedAt,
        String        updatedBy
    ) {
        this.key = key;
        this.code = code;
        this.comment = comment;
        this.current = current;
        this.format = format;
        this.identifier = identifier;
        this.prefix = prefix;
        this.suffix = suffix;
        this.time = time;
        this.length = length;
        this.step = step;
        this.decrement = decrement;
        this.appId = appId;
        this.active = active;
        this.sigma = sigma;
        this.metadata = metadata;
        this.language = language;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public XNumber(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.KEY</code>. 「key」- 主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.KEY</code>. 「key」- 主键
     */
    @Override
    public XNumber setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.CODE</code>. 「code」- 编码
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.CODE</code>. 「code」- 编码
     */
    @Override
    public XNumber setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.COMMENT</code>. 「comment」-
     * 编号备注信息，用于描述编号数据,comment,S_COMMENT
     */
    @Override
    public String getComment() {
        return this.comment;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.COMMENT</code>. 「comment」-
     * 编号备注信息，用于描述编号数据,comment,S_COMMENT
     */
    @Override
    public XNumber setComment(String comment) {
        this.comment = comment;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.CURRENT</code>.
     * 「current」编号当前值，对应${seed}，每次变化时current提取后更新为：current + step或current -
     * step,current,L_CURRENT
     */
    @Override
    public Long getCurrent() {
        return this.current;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.CURRENT</code>.
     * 「current」编号当前值，对应${seed}，每次变化时current提取后更新为：current + step或current -
     * step,current,L_CURRENT
     */
    @Override
    public XNumber setCurrent(Long current) {
        this.current = current;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.FORMAT</code>.
     * 「format」格式信息，用于处理最终格式：,format,S_FORMAT
     */
    @Override
    public String getFormat() {
        return this.format;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.FORMAT</code>.
     * 「format」格式信息，用于处理最终格式：,format,S_FORMAT
     */
    @Override
    public XNumber setFormat(String format) {
        this.format = format;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.IDENTIFIER</code>.
     * 「identifier」编号对应的identifier，用于查询当前identifier使用的序号信息,identifier,S_IDENTIFIER
     */
    @Override
    public String getIdentifier() {
        return this.identifier;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.IDENTIFIER</code>.
     * 「identifier」编号对应的identifier，用于查询当前identifier使用的序号信息,identifier,S_IDENTIFIER
     */
    @Override
    public XNumber setIdentifier(String identifier) {
        this.identifier = identifier;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.PREFIX</code>.
     * 「prefix」编号前缀,prefix,S_PREFIX
     */
    @Override
    public String getPrefix() {
        return this.prefix;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.PREFIX</code>.
     * 「prefix」编号前缀,prefix,S_PREFIX
     */
    @Override
    public XNumber setPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.SUFFIX</code>.
     * 「suffix」编号后缀,suffix,S_SUFFIX
     */
    @Override
    public String getSuffix() {
        return this.suffix;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.SUFFIX</code>.
     * 「suffix」编号后缀,suffix,S_SUFFIX
     */
    @Override
    public XNumber setSuffix(String suffix) {
        this.suffix = suffix;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.TIME</code>.
     * 「time」时间对应Pattern，对应${time}：YYYY-MM-DD
     * HH:mm:ss用于描述时间格式生成序号时间部分,time,S_TIME
     */
    @Override
    public String getTime() {
        return this.time;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.TIME</code>.
     * 「time」时间对应Pattern，对应${time}：YYYY-MM-DD
     * HH:mm:ss用于描述时间格式生成序号时间部分,time,S_TIME
     */
    @Override
    public XNumber setTime(String time) {
        this.time = time;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.LENGTH</code>.
     * 「length」编号长度，编号长度不包含prefix和suffix部分,length,I_LENGTH
     */
    @Override
    public Integer getLength() {
        return this.length;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.LENGTH</code>.
     * 「length」编号长度，编号长度不包含prefix和suffix部分,length,I_LENGTH
     */
    @Override
    public XNumber setLength(Integer length) {
        this.length = length;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.STEP</code>.
     * 「step」编号的步进系数，每次按照step进行变化,step,I_STEP
     */
    @Override
    public Integer getStep() {
        return this.step;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.STEP</code>.
     * 「step」编号的步进系数，每次按照step进行变化,step,I_STEP
     */
    @Override
    public XNumber setStep(Integer step) {
        this.step = step;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.DECREMENT</code>.
     * 「decrement」递增/递减？如果为true则递减，为false则是递增,decrement,IS_DECREMENT
     */
    @Override
    public Boolean getDecrement() {
        return this.decrement;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.DECREMENT</code>.
     * 「decrement」递增/递减？如果为true则递减，为false则是递增,decrement,IS_DECREMENT
     */
    @Override
    public XNumber setDecrement(Boolean decrement) {
        this.decrement = decrement;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.APP_ID</code>. 「appId」- 关联的应用程序ID
     */
    @Override
    public String getAppId() {
        return this.appId;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.APP_ID</code>. 「appId」- 关联的应用程序ID
     */
    @Override
    public XNumber setAppId(String appId) {
        this.appId = appId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public XNumber setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public XNumber setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public XNumber setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public XNumber setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public XNumber setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public XNumber setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public XNumber setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_NUMBER.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_NUMBER.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public XNumber setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("XNumber (");

        sb.append(key);
        sb.append(", ").append(code);
        sb.append(", ").append(comment);
        sb.append(", ").append(current);
        sb.append(", ").append(format);
        sb.append(", ").append(identifier);
        sb.append(", ").append(prefix);
        sb.append(", ").append(suffix);
        sb.append(", ").append(time);
        sb.append(", ").append(length);
        sb.append(", ").append(step);
        sb.append(", ").append(decrement);
        sb.append(", ").append(appId);
        sb.append(", ").append(active);
        sb.append(", ").append(sigma);
        sb.append(", ").append(metadata);
        sb.append(", ").append(language);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IXNumber from) {
        setKey(from.getKey());
        setCode(from.getCode());
        setComment(from.getComment());
        setCurrent(from.getCurrent());
        setFormat(from.getFormat());
        setIdentifier(from.getIdentifier());
        setPrefix(from.getPrefix());
        setSuffix(from.getSuffix());
        setTime(from.getTime());
        setLength(from.getLength());
        setStep(from.getStep());
        setDecrement(from.getDecrement());
        setAppId(from.getAppId());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IXNumber> E into(E into) {
        into.from(this);
        return into;
    }
}
