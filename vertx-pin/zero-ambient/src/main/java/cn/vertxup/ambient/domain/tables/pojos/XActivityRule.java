/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.pojos;


import cn.vertxup.ambient.domain.tables.interfaces.IXActivityRule;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XActivityRule implements VertxPojo, IXActivityRule {

    private static final long serialVersionUID = 1L;

    private String key;
    private String definitionKey;
    private String taskKey;
    private String type;
    private String ruleName;
    private Long ruleOrder;
    private String ruleNs;
    private String ruleIdentifier;
    private String ruleField;
    private String ruleExpression;
    private String ruleTpl;
    private String ruleConfig;
    private String ruleMessage;
    private String hookComponent;
    private String hookConfig;
    private Boolean logging;
    private Boolean active;
    private String sigma;
    private String metadata;
    private String language;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public XActivityRule() {}

    public XActivityRule(IXActivityRule value) {
        this.key = value.getKey();
        this.definitionKey = value.getDefinitionKey();
        this.taskKey = value.getTaskKey();
        this.type = value.getType();
        this.ruleName = value.getRuleName();
        this.ruleOrder = value.getRuleOrder();
        this.ruleNs = value.getRuleNs();
        this.ruleIdentifier = value.getRuleIdentifier();
        this.ruleField = value.getRuleField();
        this.ruleExpression = value.getRuleExpression();
        this.ruleTpl = value.getRuleTpl();
        this.ruleConfig = value.getRuleConfig();
        this.ruleMessage = value.getRuleMessage();
        this.hookComponent = value.getHookComponent();
        this.hookConfig = value.getHookConfig();
        this.logging = value.getLogging();
        this.active = value.getActive();
        this.sigma = value.getSigma();
        this.metadata = value.getMetadata();
        this.language = value.getLanguage();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public XActivityRule(
        String key,
        String definitionKey,
        String taskKey,
        String type,
        String ruleName,
        Long ruleOrder,
        String ruleNs,
        String ruleIdentifier,
        String ruleField,
        String ruleExpression,
        String ruleTpl,
        String ruleConfig,
        String ruleMessage,
        String hookComponent,
        String hookConfig,
        Boolean logging,
        Boolean active,
        String sigma,
        String metadata,
        String language,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.definitionKey = definitionKey;
        this.taskKey = taskKey;
        this.type = type;
        this.ruleName = ruleName;
        this.ruleOrder = ruleOrder;
        this.ruleNs = ruleNs;
        this.ruleIdentifier = ruleIdentifier;
        this.ruleField = ruleField;
        this.ruleExpression = ruleExpression;
        this.ruleTpl = ruleTpl;
        this.ruleConfig = ruleConfig;
        this.ruleMessage = ruleMessage;
        this.hookComponent = hookComponent;
        this.hookConfig = hookConfig;
        this.logging = logging;
        this.active = active;
        this.sigma = sigma;
        this.metadata = metadata;
        this.language = language;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public XActivityRule(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.KEY</code>. 「key」- 规则主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.KEY</code>. 「key」- 规则主键
     */
    @Override
    public XActivityRule setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.DEFINITION_KEY</code>.
     * 「definitionKey」- 流程对应的 definitionKey，用于查询所有规则用
     */
    @Override
    public String getDefinitionKey() {
        return this.definitionKey;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.DEFINITION_KEY</code>.
     * 「definitionKey」- 流程对应的 definitionKey，用于查询所有规则用
     */
    @Override
    public XActivityRule setDefinitionKey(String definitionKey) {
        this.definitionKey = definitionKey;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.TASK_KEY</code>. 「taskKey」-
     * 和待办绑定的taskKey
     */
    @Override
    public String getTaskKey() {
        return this.taskKey;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.TASK_KEY</code>. 「taskKey」-
     * 和待办绑定的taskKey
     */
    @Override
    public XActivityRule setTaskKey(String taskKey) {
        this.taskKey = taskKey;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.TYPE</code>. 「type」- 规则类型
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.TYPE</code>. 「type」- 规则类型
     */
    @Override
    public XActivityRule setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_NAME</code>. 「ruleName」-
     * 规则名称，如果 type = ATOM 时读取，并设置到 typeName 中
     */
    @Override
    public String getRuleName() {
        return this.ruleName;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_NAME</code>. 「ruleName」-
     * 规则名称，如果 type = ATOM 时读取，并设置到 typeName 中
     */
    @Override
    public XActivityRule setRuleName(String ruleName) {
        this.ruleName = ruleName;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_ORDER</code>.
     * 「ruleOrder」- 规则触发顺序，修正两个时间戳，生成时序号统一，先生成的规则排序在上边
     */
    @Override
    public Long getRuleOrder() {
        return this.ruleOrder;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_ORDER</code>.
     * 「ruleOrder」- 规则触发顺序，修正两个时间戳，生成时序号统一，先生成的规则排序在上边
     */
    @Override
    public XActivityRule setRuleOrder(Long ruleOrder) {
        this.ruleOrder = ruleOrder;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_NS</code>. 「ruleNs」-
     * 规则所属主模型名空间
     */
    @Override
    public String getRuleNs() {
        return this.ruleNs;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_NS</code>. 「ruleNs」-
     * 规则所属主模型名空间
     */
    @Override
    public XActivityRule setRuleNs(String ruleNs) {
        this.ruleNs = ruleNs;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_IDENTIFIER</code>.
     * 「ruleIdentifier」- 主模型ID
     */
    @Override
    public String getRuleIdentifier() {
        return this.ruleIdentifier;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_IDENTIFIER</code>.
     * 「ruleIdentifier」- 主模型ID
     */
    @Override
    public XActivityRule setRuleIdentifier(String ruleIdentifier) {
        this.ruleIdentifier = ruleIdentifier;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_FIELD</code>.
     * 「ruleField」- 主字段名
     */
    @Override
    public String getRuleField() {
        return this.ruleField;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_FIELD</code>.
     * 「ruleField」- 主字段名
     */
    @Override
    public XActivityRule setRuleField(String ruleField) {
        this.ruleField = ruleField;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_EXPRESSION</code>.
     * 「ruleExpression」- 规则触发表达式 ( 可以是多个，JsonArray格式 )
     */
    @Override
    public String getRuleExpression() {
        return this.ruleExpression;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_EXPRESSION</code>.
     * 「ruleExpression」- 规则触发表达式 ( 可以是多个，JsonArray格式 )
     */
    @Override
    public XActivityRule setRuleExpression(String ruleExpression) {
        this.ruleExpression = ruleExpression;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_TPL</code>. 「ruleTpl」-
     * 参数模板专用，JsonObject结构
     */
    @Override
    public String getRuleTpl() {
        return this.ruleTpl;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_TPL</code>. 「ruleTpl」-
     * 参数模板专用，JsonObject结构
     */
    @Override
    public XActivityRule setRuleTpl(String ruleTpl) {
        this.ruleTpl = ruleTpl;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_CONFIG</code>.
     * 「ruleConfig」- 规则对应的额外配置
     */
    @Override
    public String getRuleConfig() {
        return this.ruleConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_CONFIG</code>.
     * 「ruleConfig」- 规则对应的额外配置
     */
    @Override
    public XActivityRule setRuleConfig(String ruleConfig) {
        this.ruleConfig = ruleConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_MESSAGE</code>.
     * 「ruleMessage」- 输出消息专用, Ut.fromExpression解析（特殊解析）
     */
    @Override
    public String getRuleMessage() {
        return this.ruleMessage;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.RULE_MESSAGE</code>.
     * 「ruleMessage」- 输出消息专用, Ut.fromExpression解析（特殊解析）
     */
    @Override
    public XActivityRule setRuleMessage(String ruleMessage) {
        this.ruleMessage = ruleMessage;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.HOOK_COMPONENT</code>.
     * 「hookComponent」-- 回调钩子组件
     */
    @Override
    public String getHookComponent() {
        return this.hookComponent;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.HOOK_COMPONENT</code>.
     * 「hookComponent」-- 回调钩子组件
     */
    @Override
    public XActivityRule setHookComponent(String hookComponent) {
        this.hookComponent = hookComponent;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.HOOK_CONFIG</code>.
     * 「hookConfig」-- 回调钩子组件配置
     */
    @Override
    public String getHookConfig() {
        return this.hookConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.HOOK_CONFIG</code>.
     * 「hookConfig」-- 回调钩子组件配置
     */
    @Override
    public XActivityRule setHookConfig(String hookConfig) {
        this.hookConfig = hookConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.LOGGING</code>. 「logging」-
     * 是否记录日志
     */
    @Override
    public Boolean getLogging() {
        return this.logging;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.LOGGING</code>. 「logging」-
     * 是否记录日志
     */
    @Override
    public XActivityRule setLogging(Boolean logging) {
        this.logging = logging;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public XActivityRule setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public XActivityRule setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.METADATA</code>. 「metadata」-
     * 附加配置
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.METADATA</code>. 「metadata」-
     * 附加配置
     */
    @Override
    public XActivityRule setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    @Override
    public XActivityRule setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.CREATED_AT</code>.
     * 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.CREATED_AT</code>.
     * 「createdAt」- 创建时间
     */
    @Override
    public XActivityRule setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.CREATED_BY</code>.
     * 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.CREATED_BY</code>.
     * 「createdBy」- 创建人
     */
    @Override
    public XActivityRule setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.UPDATED_AT</code>.
     * 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.UPDATED_AT</code>.
     * 「updatedAt」- 更新时间
     */
    @Override
    public XActivityRule setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_ACTIVITY_RULE.UPDATED_BY</code>.
     * 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_ACTIVITY_RULE.UPDATED_BY</code>.
     * 「updatedBy」- 更新人
     */
    @Override
    public XActivityRule setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final XActivityRule other = (XActivityRule) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        }
        else if (!this.key.equals(other.key))
            return false;
        if (this.definitionKey == null) {
            if (other.definitionKey != null)
                return false;
        }
        else if (!this.definitionKey.equals(other.definitionKey))
            return false;
        if (this.taskKey == null) {
            if (other.taskKey != null)
                return false;
        }
        else if (!this.taskKey.equals(other.taskKey))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        if (this.ruleName == null) {
            if (other.ruleName != null)
                return false;
        }
        else if (!this.ruleName.equals(other.ruleName))
            return false;
        if (this.ruleOrder == null) {
            if (other.ruleOrder != null)
                return false;
        }
        else if (!this.ruleOrder.equals(other.ruleOrder))
            return false;
        if (this.ruleNs == null) {
            if (other.ruleNs != null)
                return false;
        }
        else if (!this.ruleNs.equals(other.ruleNs))
            return false;
        if (this.ruleIdentifier == null) {
            if (other.ruleIdentifier != null)
                return false;
        }
        else if (!this.ruleIdentifier.equals(other.ruleIdentifier))
            return false;
        if (this.ruleField == null) {
            if (other.ruleField != null)
                return false;
        }
        else if (!this.ruleField.equals(other.ruleField))
            return false;
        if (this.ruleExpression == null) {
            if (other.ruleExpression != null)
                return false;
        }
        else if (!this.ruleExpression.equals(other.ruleExpression))
            return false;
        if (this.ruleTpl == null) {
            if (other.ruleTpl != null)
                return false;
        }
        else if (!this.ruleTpl.equals(other.ruleTpl))
            return false;
        if (this.ruleConfig == null) {
            if (other.ruleConfig != null)
                return false;
        }
        else if (!this.ruleConfig.equals(other.ruleConfig))
            return false;
        if (this.ruleMessage == null) {
            if (other.ruleMessage != null)
                return false;
        }
        else if (!this.ruleMessage.equals(other.ruleMessage))
            return false;
        if (this.hookComponent == null) {
            if (other.hookComponent != null)
                return false;
        }
        else if (!this.hookComponent.equals(other.hookComponent))
            return false;
        if (this.hookConfig == null) {
            if (other.hookConfig != null)
                return false;
        }
        else if (!this.hookConfig.equals(other.hookConfig))
            return false;
        if (this.logging == null) {
            if (other.logging != null)
                return false;
        }
        else if (!this.logging.equals(other.logging))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        }
        else if (!this.active.equals(other.active))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        }
        else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        }
        else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        }
        else if (!this.language.equals(other.language))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.definitionKey == null) ? 0 : this.definitionKey.hashCode());
        result = prime * result + ((this.taskKey == null) ? 0 : this.taskKey.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.ruleName == null) ? 0 : this.ruleName.hashCode());
        result = prime * result + ((this.ruleOrder == null) ? 0 : this.ruleOrder.hashCode());
        result = prime * result + ((this.ruleNs == null) ? 0 : this.ruleNs.hashCode());
        result = prime * result + ((this.ruleIdentifier == null) ? 0 : this.ruleIdentifier.hashCode());
        result = prime * result + ((this.ruleField == null) ? 0 : this.ruleField.hashCode());
        result = prime * result + ((this.ruleExpression == null) ? 0 : this.ruleExpression.hashCode());
        result = prime * result + ((this.ruleTpl == null) ? 0 : this.ruleTpl.hashCode());
        result = prime * result + ((this.ruleConfig == null) ? 0 : this.ruleConfig.hashCode());
        result = prime * result + ((this.ruleMessage == null) ? 0 : this.ruleMessage.hashCode());
        result = prime * result + ((this.hookComponent == null) ? 0 : this.hookComponent.hashCode());
        result = prime * result + ((this.hookConfig == null) ? 0 : this.hookConfig.hashCode());
        result = prime * result + ((this.logging == null) ? 0 : this.logging.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("XActivityRule (");

        sb.append(key);
        sb.append(", ").append(definitionKey);
        sb.append(", ").append(taskKey);
        sb.append(", ").append(type);
        sb.append(", ").append(ruleName);
        sb.append(", ").append(ruleOrder);
        sb.append(", ").append(ruleNs);
        sb.append(", ").append(ruleIdentifier);
        sb.append(", ").append(ruleField);
        sb.append(", ").append(ruleExpression);
        sb.append(", ").append(ruleTpl);
        sb.append(", ").append(ruleConfig);
        sb.append(", ").append(ruleMessage);
        sb.append(", ").append(hookComponent);
        sb.append(", ").append(hookConfig);
        sb.append(", ").append(logging);
        sb.append(", ").append(active);
        sb.append(", ").append(sigma);
        sb.append(", ").append(metadata);
        sb.append(", ").append(language);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IXActivityRule from) {
        setKey(from.getKey());
        setDefinitionKey(from.getDefinitionKey());
        setTaskKey(from.getTaskKey());
        setType(from.getType());
        setRuleName(from.getRuleName());
        setRuleOrder(from.getRuleOrder());
        setRuleNs(from.getRuleNs());
        setRuleIdentifier(from.getRuleIdentifier());
        setRuleField(from.getRuleField());
        setRuleExpression(from.getRuleExpression());
        setRuleTpl(from.getRuleTpl());
        setRuleConfig(from.getRuleConfig());
        setRuleMessage(from.getRuleMessage());
        setHookComponent(from.getHookComponent());
        setHookConfig(from.getHookConfig());
        setLogging(from.getLogging());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IXActivityRule> E into(E into) {
        into.from(this);
        return into;
    }
}
