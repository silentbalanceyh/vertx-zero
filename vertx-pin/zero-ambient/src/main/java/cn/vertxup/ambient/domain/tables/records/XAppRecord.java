/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.records;


import cn.vertxup.ambient.domain.tables.XApp;
import cn.vertxup.ambient.domain.tables.interfaces.IXApp;
import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDateTime;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XAppRecord extends UpdatableRecordImpl<XAppRecord> implements VertxPojo, IXApp {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.X_APP.KEY</code>. 「key」- 应用程序主键
     */
    @Override
    public XAppRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.KEY</code>. 「key」- 应用程序主键
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.NAME</code>. 「name」- 应用程序名称
     */
    @Override
    public XAppRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.NAME</code>. 「name」- 应用程序名称
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.CODE</code>. 「code」- 应用程序编码
     */
    @Override
    public XAppRecord setCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.CODE</code>. 「code」- 应用程序编码
     */
    @Override
    public String getCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.TITLE</code>. 「title」- 应用程序标题
     */
    @Override
    public XAppRecord setTitle(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.TITLE</code>. 「title」- 应用程序标题
     */
    @Override
    public String getTitle() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.LOGO</code>. 「logo」- 应用程序图标
     */
    @Override
    public XAppRecord setLogo(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.LOGO</code>. 「logo」- 应用程序图标
     */
    @Override
    public String getLogo() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.ICP</code>. 「icp」- ICP备案号
     */
    @Override
    public XAppRecord setIcp(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.ICP</code>. 「icp」- ICP备案号
     */
    @Override
    public String getIcp() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.COPY_RIGHT</code>. 「copyRight」-
     * CopyRight版权信息
     */
    @Override
    public XAppRecord setCopyRight(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.COPY_RIGHT</code>. 「copyRight」-
     * CopyRight版权信息
     */
    @Override
    public String getCopyRight() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.EMAIL</code>. 「email」- 应用Email信息
     */
    @Override
    public XAppRecord setEmail(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.EMAIL</code>. 「email」- 应用Email信息
     */
    @Override
    public String getEmail() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.DOMAIN</code>. 「domain」- 应用程序所在域
     */
    @Override
    public XAppRecord setDomain(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.DOMAIN</code>. 「domain」- 应用程序所在域
     */
    @Override
    public String getDomain() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.APP_PORT</code>. 「appPort」-
     * 应用程序端口号，和SOURCE的端口号区别开
     */
    @Override
    public XAppRecord setAppPort(Integer value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.APP_PORT</code>. 「appPort」-
     * 应用程序端口号，和SOURCE的端口号区别开
     */
    @Override
    public Integer getAppPort() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.URL_ENTRY</code>. 「urlEntry」—
     * 应用程序入口页面（登录页）
     */
    @Override
    public XAppRecord setUrlEntry(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.URL_ENTRY</code>. 「urlEntry」—
     * 应用程序入口页面（登录页）
     */
    @Override
    public String getUrlEntry() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.URL_MAIN</code>. 「urlMain」-
     * 应用程序内置主页（带安全）
     */
    @Override
    public XAppRecord setUrlMain(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.URL_MAIN</code>. 「urlMain」-
     * 应用程序内置主页（带安全）
     */
    @Override
    public String getUrlMain() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.PATH</code>. 「path」- 应用程序路径
     */
    @Override
    public XAppRecord setPath(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.PATH</code>. 「path」- 应用程序路径
     */
    @Override
    public String getPath() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.ROUTE</code>. 「route」- 后端API的根路径，启动时需要
     */
    @Override
    public XAppRecord setRoute(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.ROUTE</code>. 「route」- 后端API的根路径，启动时需要
     */
    @Override
    public String getRoute() {
        return (String) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.APP_KEY</code>. 「appKey」-
     * 应用程序专用唯一hashKey
     */
    @Override
    public XAppRecord setAppKey(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.APP_KEY</code>. 「appKey」-
     * 应用程序专用唯一hashKey
     */
    @Override
    public String getAppKey() {
        return (String) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public XAppRecord setActive(Boolean value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public XAppRecord setSigma(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(16);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public XAppRecord setMetadata(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return (String) get(17);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public XAppRecord setLanguage(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(18);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public XAppRecord setCreatedAt(LocalDateTime value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(19);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public XAppRecord setCreatedBy(String value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(20);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public XAppRecord setUpdatedAt(LocalDateTime value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(21);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_APP.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public XAppRecord setUpdatedBy(String value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_APP.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(22);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IXApp from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setTitle(from.getTitle());
        setLogo(from.getLogo());
        setIcp(from.getIcp());
        setCopyRight(from.getCopyRight());
        setEmail(from.getEmail());
        setDomain(from.getDomain());
        setAppPort(from.getAppPort());
        setUrlEntry(from.getUrlEntry());
        setUrlMain(from.getUrlMain());
        setPath(from.getPath());
        setRoute(from.getRoute());
        setAppKey(from.getAppKey());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IXApp> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached XAppRecord
     */
    public XAppRecord() {
        super(XApp.X_APP);
    }

    /**
     * Create a detached, initialised XAppRecord
     */
    public XAppRecord(String key, String name, String code, String title, String logo, String icp, String copyRight, String email, String domain, Integer appPort, String urlEntry, String urlMain, String path, String route, String appKey, Boolean active, String sigma, String metadata, String language, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(XApp.X_APP);

        setKey(key);
        setName(name);
        setCode(code);
        setTitle(title);
        setLogo(logo);
        setIcp(icp);
        setCopyRight(copyRight);
        setEmail(email);
        setDomain(domain);
        setAppPort(appPort);
        setUrlEntry(urlEntry);
        setUrlMain(urlMain);
        setPath(path);
        setRoute(route);
        setAppKey(appKey);
        setActive(active);
        setSigma(sigma);
        setMetadata(metadata);
        setLanguage(language);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
    }

    /**
     * Create a detached, initialised XAppRecord
     */
    public XAppRecord(cn.vertxup.ambient.domain.tables.pojos.XApp value) {
        super(XApp.X_APP);

        if (value != null) {
            setKey(value.getKey());
            setName(value.getName());
            setCode(value.getCode());
            setTitle(value.getTitle());
            setLogo(value.getLogo());
            setIcp(value.getIcp());
            setCopyRight(value.getCopyRight());
            setEmail(value.getEmail());
            setDomain(value.getDomain());
            setAppPort(value.getAppPort());
            setUrlEntry(value.getUrlEntry());
            setUrlMain(value.getUrlMain());
            setPath(value.getPath());
            setRoute(value.getRoute());
            setAppKey(value.getAppKey());
            setActive(value.getActive());
            setSigma(value.getSigma());
            setMetadata(value.getMetadata());
            setLanguage(value.getLanguage());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
        }
    }

        public XAppRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
