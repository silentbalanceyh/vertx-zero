/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.daos;


import cn.vertxup.ambient.domain.tables.XSource;
import cn.vertxup.ambient.domain.tables.records.XSourceRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XSourceDao extends AbstractVertxDAO<XSourceRecord, cn.vertxup.ambient.domain.tables.pojos.XSource, String, Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>>, Future<cn.vertxup.ambient.domain.tables.pojos.XSource>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<XSourceRecord,cn.vertxup.ambient.domain.tables.pojos.XSource,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public XSourceDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(XSource.X_SOURCE, cn.vertxup.ambient.domain.tables.pojos.XSource.class, new JDBCClassicQueryExecutor<XSourceRecord,cn.vertxup.ambient.domain.tables.pojos.XSource,String>(configuration,cn.vertxup.ambient.domain.tables.pojos.XSource.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.ambient.domain.tables.pojos.XSource object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>IP_V4 IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByIpV4(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.IP_V4.in(values));
        }

        /**
     * Find records that have <code>IP_V4 IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByIpV4(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.IP_V4.in(values),limit);
        }

        /**
     * Find records that have <code>IP_V6 IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByIpV6(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.IP_V6.in(values));
        }

        /**
     * Find records that have <code>IP_V6 IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByIpV6(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.IP_V6.in(values),limit);
        }

        /**
     * Find records that have <code>HOSTNAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByHostname(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.HOSTNAME.in(values));
        }

        /**
     * Find records that have <code>HOSTNAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByHostname(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.HOSTNAME.in(values),limit);
        }

        /**
     * Find records that have <code>PORT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByPort(Collection<Integer> values) {
                return findManyByCondition(XSource.X_SOURCE.PORT.in(values));
        }

        /**
     * Find records that have <code>PORT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByPort(Collection<Integer> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.PORT.in(values),limit);
        }

        /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByCategory(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.CATEGORY.in(values));
        }

        /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByCategory(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.CATEGORY.in(values),limit);
        }

        /**
     * Find records that have <code>DRIVER_CLASS_NAME IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByDriverClassName(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.DRIVER_CLASS_NAME.in(values));
        }

        /**
     * Find records that have <code>DRIVER_CLASS_NAME IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByDriverClassName(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.DRIVER_CLASS_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>JDBC_URL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByJdbcUrl(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.JDBC_URL.in(values));
        }

        /**
     * Find records that have <code>JDBC_URL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByJdbcUrl(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.JDBC_URL.in(values),limit);
        }

        /**
     * Find records that have <code>JDBC_CONFIG IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByJdbcConfig(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.JDBC_CONFIG.in(values));
        }

        /**
     * Find records that have <code>JDBC_CONFIG IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByJdbcConfig(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.JDBC_CONFIG.in(values),limit);
        }

        /**
     * Find records that have <code>INSTANCE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByInstance(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.INSTANCE.in(values));
        }

        /**
     * Find records that have <code>INSTANCE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByInstance(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.INSTANCE.in(values),limit);
        }

        /**
     * Find records that have <code>USERNAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByUsername(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.USERNAME.in(values));
        }

        /**
     * Find records that have <code>USERNAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByUsername(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.USERNAME.in(values),limit);
        }

        /**
     * Find records that have <code>PASSWORD IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByPassword(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.PASSWORD.in(values));
        }

        /**
     * Find records that have <code>PASSWORD IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByPassword(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.PASSWORD.in(values),limit);
        }

        /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByAppId(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.APP_ID.in(values));
        }

        /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByAppId(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.APP_ID.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(XSource.X_SOURCE.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XSource.X_SOURCE.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XSource.X_SOURCE.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(XSource.X_SOURCE.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XSource>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XSource.X_SOURCE.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<XSourceRecord,cn.vertxup.ambient.domain.tables.pojos.XSource,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<XSourceRecord,cn.vertxup.ambient.domain.tables.pojos.XSource,String>) super.queryExecutor();
        }
}
