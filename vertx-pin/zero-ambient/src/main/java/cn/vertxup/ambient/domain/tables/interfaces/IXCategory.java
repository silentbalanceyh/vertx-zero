/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;

import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.setOrThrow;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IXCategory extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.KEY</code>. 「key」- 类型主键
     */
    public IXCategory setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.KEY</code>. 「key」- 类型主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.NAME</code>. 「name」- 类型名称
     */
    public IXCategory setName(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.NAME</code>. 「name」- 类型名称
     */
    public String getName();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.CODE</code>. 「code」- 类型编号
     */
    public IXCategory setCode(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.CODE</code>. 「code」- 类型编号
     */
    public String getCode();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.ICON</code>. 「icon」- 类型图标
     */
    public IXCategory setIcon(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.ICON</code>. 「icon」- 类型图标
     */
    public String getIcon();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.TYPE</code>. 「type」- 类型的分类
     */
    public IXCategory setType(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.TYPE</code>. 「type」- 类型的分类
     */
    public String getType();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.SORT</code>. 「sort」- 排序信息
     */
    public IXCategory setSort(Integer value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.SORT</code>. 「sort」- 排序信息
     */
    public Integer getSort();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.LEAF</code>. 「leaf」- 是否叶节点
     */
    public IXCategory setLeaf(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.LEAF</code>. 「leaf」- 是否叶节点
     */
    public Boolean getLeaf();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.PARENT_ID</code>. 「parentId」- 父类ID
     */
    public IXCategory setParentId(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.PARENT_ID</code>. 「parentId」- 父类ID
     */
    public String getParentId();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.IDENTIFIER</code>. 「identifier」-
     * 当前类型描述的Model的标识
     */
    public IXCategory setIdentifier(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.IDENTIFIER</code>. 「identifier」-
     * 当前类型描述的Model的标识
     */
    public String getIdentifier();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.COMMENT</code>. 「comment」- 备注信息
     */
    public IXCategory setComment(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.COMMENT</code>. 「comment」- 备注信息
     */
    public String getComment();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.APP_ID</code>. 「appId」- 关联的应用程序ID
     */
    public IXCategory setAppId(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.APP_ID</code>. 「appId」- 关联的应用程序ID
     */
    public String getAppId();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.TREE_COMPONENT</code>.
     * 「treeComponent」- 目录组件，构造树专用
     */
    public IXCategory setTreeComponent(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.TREE_COMPONENT</code>.
     * 「treeComponent」- 目录组件，构造树专用
     */
    public String getTreeComponent();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.TREE_CONFIG</code>. 「treeConfig」-
     * 目录组件运行配置，特殊场景专用
     */
    public IXCategory setTreeConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.TREE_CONFIG</code>. 「treeConfig」-
     * 目录组件运行配置，特殊场景专用
     */
    public String getTreeConfig();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.RUN_COMPONENT</code>.
     * 「runComponent」- 执行组件
     */
    public IXCategory setRunComponent(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.RUN_COMPONENT</code>.
     * 「runComponent」- 执行组件
     */
    public String getRunComponent();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.RUN_CONFIG</code>. 「runConfig」-
     * 执行组件相关配置
     */
    public IXCategory setRunConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.RUN_CONFIG</code>. 「runConfig」-
     * 执行组件相关配置
     */
    public String getRunConfig();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.ACTIVE</code>. 「active」- 是否启用
     */
    public IXCategory setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.SIGMA</code>. 「sigma」- 统一标识
     */
    public IXCategory setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.METADATA</code>. 「metadata」- 附加配置
     */
    public IXCategory setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IXCategory setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public IXCategory setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public IXCategory setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public IXCategory setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public IXCategory setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IXCategory
     */
    public void from(IXCategory from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IXCategory
     */
    public <E extends IXCategory> E into(E into);

        @Override
        public default IXCategory fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setName,json::getString,"NAME","java.lang.String");
                setOrThrow(this::setCode,json::getString,"CODE","java.lang.String");
                setOrThrow(this::setIcon,json::getString,"ICON","java.lang.String");
                setOrThrow(this::setType,json::getString,"TYPE","java.lang.String");
                setOrThrow(this::setSort,json::getInteger,"SORT","java.lang.Integer");
                setOrThrow(this::setLeaf,json::getBoolean,"LEAF","java.lang.Boolean");
                setOrThrow(this::setParentId,json::getString,"PARENT_ID","java.lang.String");
                setOrThrow(this::setIdentifier,json::getString,"IDENTIFIER","java.lang.String");
                setOrThrow(this::setComment,json::getString,"COMMENT","java.lang.String");
                setOrThrow(this::setAppId,json::getString,"APP_ID","java.lang.String");
                setOrThrow(this::setTreeComponent,json::getString,"TREE_COMPONENT","java.lang.String");
                setOrThrow(this::setTreeConfig,json::getString,"TREE_CONFIG","java.lang.String");
                setOrThrow(this::setRunComponent,json::getString,"RUN_COMPONENT","java.lang.String");
                setOrThrow(this::setRunConfig,json::getString,"RUN_CONFIG","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                setOrThrow(this::setUpdatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"UPDATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setUpdatedBy,json::getString,"UPDATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("NAME",getName());
                json.put("CODE",getCode());
                json.put("ICON",getIcon());
                json.put("TYPE",getType());
                json.put("SORT",getSort());
                json.put("LEAF",getLeaf());
                json.put("PARENT_ID",getParentId());
                json.put("IDENTIFIER",getIdentifier());
                json.put("COMMENT",getComment());
                json.put("APP_ID",getAppId());
                json.put("TREE_COMPONENT",getTreeComponent());
                json.put("TREE_CONFIG",getTreeConfig());
                json.put("RUN_COMPONENT",getRunComponent());
                json.put("RUN_CONFIG",getRunConfig());
                json.put("ACTIVE",getActive());
                json.put("SIGMA",getSigma());
                json.put("METADATA",getMetadata());
                json.put("LANGUAGE",getLanguage());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                json.put("UPDATED_AT",getUpdatedAt()==null?null:getUpdatedAt().toString());
                json.put("UPDATED_BY",getUpdatedBy());
                return json;
        }

}
