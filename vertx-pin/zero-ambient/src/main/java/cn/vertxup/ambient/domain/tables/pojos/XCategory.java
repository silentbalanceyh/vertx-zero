/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.pojos;


import cn.vertxup.ambient.domain.tables.interfaces.IXCategory;
import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XCategory implements VertxPojo, IXCategory {

    private static final long serialVersionUID = 1L;

    private String key;
    private String name;
    private String code;
    private String icon;
    private String type;
    private Integer sort;
    private Boolean leaf;
    private String parentId;
    private String identifier;
    private String comment;
    private String appId;
    private String treeComponent;
    private String treeConfig;
    private String runComponent;
    private String runConfig;
    private Boolean active;
    private String sigma;
    private String metadata;
    private String language;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public XCategory() {}

    public XCategory(IXCategory value) {
        this.key = value.getKey();
        this.name = value.getName();
        this.code = value.getCode();
        this.icon = value.getIcon();
        this.type = value.getType();
        this.sort = value.getSort();
        this.leaf = value.getLeaf();
        this.parentId = value.getParentId();
        this.identifier = value.getIdentifier();
        this.comment = value.getComment();
        this.appId = value.getAppId();
        this.treeComponent = value.getTreeComponent();
        this.treeConfig = value.getTreeConfig();
        this.runComponent = value.getRunComponent();
        this.runConfig = value.getRunConfig();
        this.active = value.getActive();
        this.sigma = value.getSigma();
        this.metadata = value.getMetadata();
        this.language = value.getLanguage();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public XCategory(
        String key,
        String name,
        String code,
        String icon,
        String type,
        Integer sort,
        Boolean leaf,
        String parentId,
        String identifier,
        String comment,
        String appId,
        String treeComponent,
        String treeConfig,
        String runComponent,
        String runConfig,
        Boolean active,
        String sigma,
        String metadata,
        String language,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.name = name;
        this.code = code;
        this.icon = icon;
        this.type = type;
        this.sort = sort;
        this.leaf = leaf;
        this.parentId = parentId;
        this.identifier = identifier;
        this.comment = comment;
        this.appId = appId;
        this.treeComponent = treeComponent;
        this.treeConfig = treeConfig;
        this.runComponent = runComponent;
        this.runConfig = runConfig;
        this.active = active;
        this.sigma = sigma;
        this.metadata = metadata;
        this.language = language;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public XCategory(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.KEY</code>. 「key」- 类型主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.KEY</code>. 「key」- 类型主键
     */
    @Override
    public XCategory setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.NAME</code>. 「name」- 类型名称
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.NAME</code>. 「name」- 类型名称
     */
    @Override
    public XCategory setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.CODE</code>. 「code」- 类型编号
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.CODE</code>. 「code」- 类型编号
     */
    @Override
    public XCategory setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.ICON</code>. 「icon」- 类型图标
     */
    @Override
    public String getIcon() {
        return this.icon;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.ICON</code>. 「icon」- 类型图标
     */
    @Override
    public XCategory setIcon(String icon) {
        this.icon = icon;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.TYPE</code>. 「type」- 类型的分类
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.TYPE</code>. 「type」- 类型的分类
     */
    @Override
    public XCategory setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.SORT</code>. 「sort」- 排序信息
     */
    @Override
    public Integer getSort() {
        return this.sort;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.SORT</code>. 「sort」- 排序信息
     */
    @Override
    public XCategory setSort(Integer sort) {
        this.sort = sort;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.LEAF</code>. 「leaf」- 是否叶节点
     */
    @Override
    public Boolean getLeaf() {
        return this.leaf;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.LEAF</code>. 「leaf」- 是否叶节点
     */
    @Override
    public XCategory setLeaf(Boolean leaf) {
        this.leaf = leaf;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.PARENT_ID</code>. 「parentId」- 父类ID
     */
    @Override
    public String getParentId() {
        return this.parentId;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.PARENT_ID</code>. 「parentId」- 父类ID
     */
    @Override
    public XCategory setParentId(String parentId) {
        this.parentId = parentId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.IDENTIFIER</code>. 「identifier」-
     * 当前类型描述的Model的标识
     */
    @Override
    public String getIdentifier() {
        return this.identifier;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.IDENTIFIER</code>. 「identifier」-
     * 当前类型描述的Model的标识
     */
    @Override
    public XCategory setIdentifier(String identifier) {
        this.identifier = identifier;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.COMMENT</code>. 「comment」- 备注信息
     */
    @Override
    public String getComment() {
        return this.comment;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.COMMENT</code>. 「comment」- 备注信息
     */
    @Override
    public XCategory setComment(String comment) {
        this.comment = comment;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.APP_ID</code>. 「appId」- 关联的应用程序ID
     */
    @Override
    public String getAppId() {
        return this.appId;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.APP_ID</code>. 「appId」- 关联的应用程序ID
     */
    @Override
    public XCategory setAppId(String appId) {
        this.appId = appId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.TREE_COMPONENT</code>.
     * 「treeComponent」- 目录组件，构造树专用
     */
    @Override
    public String getTreeComponent() {
        return this.treeComponent;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.TREE_COMPONENT</code>.
     * 「treeComponent」- 目录组件，构造树专用
     */
    @Override
    public XCategory setTreeComponent(String treeComponent) {
        this.treeComponent = treeComponent;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.TREE_CONFIG</code>. 「treeConfig」-
     * 目录组件运行配置，特殊场景专用
     */
    @Override
    public String getTreeConfig() {
        return this.treeConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.TREE_CONFIG</code>. 「treeConfig」-
     * 目录组件运行配置，特殊场景专用
     */
    @Override
    public XCategory setTreeConfig(String treeConfig) {
        this.treeConfig = treeConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.RUN_COMPONENT</code>.
     * 「runComponent」- 执行组件
     */
    @Override
    public String getRunComponent() {
        return this.runComponent;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.RUN_COMPONENT</code>.
     * 「runComponent」- 执行组件
     */
    @Override
    public XCategory setRunComponent(String runComponent) {
        this.runComponent = runComponent;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.RUN_CONFIG</code>. 「runConfig」-
     * 执行组件相关配置
     */
    @Override
    public String getRunConfig() {
        return this.runConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.RUN_CONFIG</code>. 「runConfig」-
     * 执行组件相关配置
     */
    @Override
    public XCategory setRunConfig(String runConfig) {
        this.runConfig = runConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public XCategory setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public XCategory setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public XCategory setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public XCategory setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public XCategory setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public XCategory setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public XCategory setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_CATEGORY.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_CATEGORY.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public XCategory setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final XCategory other = (XCategory) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        }
        else if (!this.key.equals(other.key))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.code == null) {
            if (other.code != null)
                return false;
        }
        else if (!this.code.equals(other.code))
            return false;
        if (this.icon == null) {
            if (other.icon != null)
                return false;
        }
        else if (!this.icon.equals(other.icon))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        if (this.sort == null) {
            if (other.sort != null)
                return false;
        }
        else if (!this.sort.equals(other.sort))
            return false;
        if (this.leaf == null) {
            if (other.leaf != null)
                return false;
        }
        else if (!this.leaf.equals(other.leaf))
            return false;
        if (this.parentId == null) {
            if (other.parentId != null)
                return false;
        }
        else if (!this.parentId.equals(other.parentId))
            return false;
        if (this.identifier == null) {
            if (other.identifier != null)
                return false;
        }
        else if (!this.identifier.equals(other.identifier))
            return false;
        if (this.comment == null) {
            if (other.comment != null)
                return false;
        }
        else if (!this.comment.equals(other.comment))
            return false;
        if (this.appId == null) {
            if (other.appId != null)
                return false;
        }
        else if (!this.appId.equals(other.appId))
            return false;
        if (this.treeComponent == null) {
            if (other.treeComponent != null)
                return false;
        }
        else if (!this.treeComponent.equals(other.treeComponent))
            return false;
        if (this.treeConfig == null) {
            if (other.treeConfig != null)
                return false;
        }
        else if (!this.treeConfig.equals(other.treeConfig))
            return false;
        if (this.runComponent == null) {
            if (other.runComponent != null)
                return false;
        }
        else if (!this.runComponent.equals(other.runComponent))
            return false;
        if (this.runConfig == null) {
            if (other.runConfig != null)
                return false;
        }
        else if (!this.runConfig.equals(other.runConfig))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        }
        else if (!this.active.equals(other.active))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        }
        else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        }
        else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        }
        else if (!this.language.equals(other.language))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.icon == null) ? 0 : this.icon.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.sort == null) ? 0 : this.sort.hashCode());
        result = prime * result + ((this.leaf == null) ? 0 : this.leaf.hashCode());
        result = prime * result + ((this.parentId == null) ? 0 : this.parentId.hashCode());
        result = prime * result + ((this.identifier == null) ? 0 : this.identifier.hashCode());
        result = prime * result + ((this.comment == null) ? 0 : this.comment.hashCode());
        result = prime * result + ((this.appId == null) ? 0 : this.appId.hashCode());
        result = prime * result + ((this.treeComponent == null) ? 0 : this.treeComponent.hashCode());
        result = prime * result + ((this.treeConfig == null) ? 0 : this.treeConfig.hashCode());
        result = prime * result + ((this.runComponent == null) ? 0 : this.runComponent.hashCode());
        result = prime * result + ((this.runConfig == null) ? 0 : this.runConfig.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("XCategory (");

        sb.append(key);
        sb.append(", ").append(name);
        sb.append(", ").append(code);
        sb.append(", ").append(icon);
        sb.append(", ").append(type);
        sb.append(", ").append(sort);
        sb.append(", ").append(leaf);
        sb.append(", ").append(parentId);
        sb.append(", ").append(identifier);
        sb.append(", ").append(comment);
        sb.append(", ").append(appId);
        sb.append(", ").append(treeComponent);
        sb.append(", ").append(treeConfig);
        sb.append(", ").append(runComponent);
        sb.append(", ").append(runConfig);
        sb.append(", ").append(active);
        sb.append(", ").append(sigma);
        sb.append(", ").append(metadata);
        sb.append(", ").append(language);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IXCategory from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setIcon(from.getIcon());
        setType(from.getType());
        setSort(from.getSort());
        setLeaf(from.getLeaf());
        setParentId(from.getParentId());
        setIdentifier(from.getIdentifier());
        setComment(from.getComment());
        setAppId(from.getAppId());
        setTreeComponent(from.getTreeComponent());
        setTreeConfig(from.getTreeConfig());
        setRunComponent(from.getRunComponent());
        setRunConfig(from.getRunConfig());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IXCategory> E into(E into) {
        into.from(this);
        return into;
    }
}
