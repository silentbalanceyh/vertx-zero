/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;

import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.setOrThrow;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IXAttachment extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.KEY</code>. 「key」- 附件的ID值
     */
    public IXAttachment setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.KEY</code>. 「key」- 附件的ID值
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.NAME</code>. 「name」- 文件名（带扩展名）
     */
    public IXAttachment setName(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.NAME</code>. 「name」- 文件名（带扩展名）
     */
    public String getName();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.EXTENSION</code>. 「extension」-
     * 文件扩展名
     */
    public IXAttachment setExtension(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.EXTENSION</code>. 「extension」-
     * 文件扩展名
     */
    public String getExtension();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.TYPE</code>. 「type」-
     * 文件类型，直接关联zero.file.tree类型
     */
    public IXAttachment setType(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.TYPE</code>. 「type」-
     * 文件类型，直接关联zero.file.tree类型
     */
    public String getType();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.MIME</code>. 「mime」- 该文件的MIME类型
     */
    public IXAttachment setMime(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.MIME</code>. 「mime」- 该文件的MIME类型
     */
    public String getMime();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.SIZE</code>. 「size」- 该文件的尺寸
     */
    public IXAttachment setSize(Integer value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.SIZE</code>. 「size」- 该文件的尺寸
     */
    public Integer getSize();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.STATUS</code>. 「status」-
     * 状态，PROGRESS / SUCCESS
     */
    public IXAttachment setStatus(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.STATUS</code>. 「status」-
     * 状态，PROGRESS / SUCCESS
     */
    public String getStatus();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.DIRECTORY_ID</code>.
     * 「directoryId」- 文件存储所属目录
     */
    public IXAttachment setDirectoryId(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.DIRECTORY_ID</code>.
     * 「directoryId」- 文件存储所属目录
     */
    public String getDirectoryId();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.STORE_WAY</code>. 「storeWay」-
     * 存储方式，BLOB / FILE / REMOTE
     */
    public IXAttachment setStoreWay(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.STORE_WAY</code>. 「storeWay」-
     * 存储方式，BLOB / FILE / REMOTE
     */
    public String getStoreWay();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.STORE_PATH</code>. 「storePath」-
     * 远程存储的目录信息（显示专用，去服务器和协议部分）
     */
    public IXAttachment setStorePath(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.STORE_PATH</code>. 「storePath」-
     * 远程存储的目录信息（显示专用，去服务器和协议部分）
     */
    public String getStorePath();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.STORE_URI</code>. 「storeUri」-
     * 远程存储的目录URI部分
     */
    public IXAttachment setStoreUri(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.STORE_URI</code>. 「storeUri」-
     * 远程存储的目录URI部分
     */
    public String getStoreUri();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    public IXAttachment setModelId(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    public String getModelId();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    public IXAttachment setModelKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    public String getModelKey();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.MODEL_CATEGORY</code>.
     * 「modelCategory」- 如果一个模型记录包含多种附件，则需要设置模型相关字段，等价于 field
     */
    public IXAttachment setModelCategory(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.MODEL_CATEGORY</code>.
     * 「modelCategory」- 如果一个模型记录包含多种附件，则需要设置模型相关字段，等价于 field
     */
    public String getModelCategory();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.FILE_NAME</code>. 「fileName」-
     * 原始文件名（不带扩展名）
     */
    public IXAttachment setFileName(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.FILE_NAME</code>. 「fileName」-
     * 原始文件名（不带扩展名）
     */
    public String getFileName();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.FILE_KEY</code>. 「fileKey」-
     * TPL模式中的文件唯一的key（全局唯一）
     */
    public IXAttachment setFileKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.FILE_KEY</code>. 「fileKey」-
     * TPL模式中的文件唯一的key（全局唯一）
     */
    public String getFileKey();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.FILE_URL</code>. 「fileUrl」-
     * 该文件的下载链接（全局唯一）
     */
    public IXAttachment setFileUrl(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.FILE_URL</code>. 「fileUrl」-
     * 该文件的下载链接（全局唯一）
     */
    public String getFileUrl();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.FILE_PATH</code>. 「filePath」-
     * 该文件的存储地址，FILE时使用
     */
    public IXAttachment setFilePath(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.FILE_PATH</code>. 「filePath」-
     * 该文件的存储地址，FILE时使用
     */
    public String getFilePath();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.ACTIVE</code>. 「active」- 是否启用
     */
    public IXAttachment setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.SIGMA</code>. 「sigma」- 统一标识
     */
    public IXAttachment setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.METADATA</code>. 「metadata」-
     * 附加配置
     */
    public IXAttachment setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.METADATA</code>. 「metadata」-
     * 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public IXAttachment setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public IXAttachment setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public IXAttachment setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public IXAttachment setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.X_ATTACHMENT.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public IXAttachment setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.X_ATTACHMENT.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IXAttachment
     */
    public void from(IXAttachment from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IXAttachment
     */
    public <E extends IXAttachment> E into(E into);

        @Override
        public default IXAttachment fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setName,json::getString,"NAME","java.lang.String");
                setOrThrow(this::setExtension,json::getString,"EXTENSION","java.lang.String");
                setOrThrow(this::setType,json::getString,"TYPE","java.lang.String");
                setOrThrow(this::setMime,json::getString,"MIME","java.lang.String");
                setOrThrow(this::setSize,json::getInteger,"SIZE","java.lang.Integer");
                setOrThrow(this::setStatus,json::getString,"STATUS","java.lang.String");
                setOrThrow(this::setDirectoryId,json::getString,"DIRECTORY_ID","java.lang.String");
                setOrThrow(this::setStoreWay,json::getString,"STORE_WAY","java.lang.String");
                setOrThrow(this::setStorePath,json::getString,"STORE_PATH","java.lang.String");
                setOrThrow(this::setStoreUri,json::getString,"STORE_URI","java.lang.String");
                setOrThrow(this::setModelId,json::getString,"MODEL_ID","java.lang.String");
                setOrThrow(this::setModelKey,json::getString,"MODEL_KEY","java.lang.String");
                setOrThrow(this::setModelCategory,json::getString,"MODEL_CATEGORY","java.lang.String");
                setOrThrow(this::setFileName,json::getString,"FILE_NAME","java.lang.String");
                setOrThrow(this::setFileKey,json::getString,"FILE_KEY","java.lang.String");
                setOrThrow(this::setFileUrl,json::getString,"FILE_URL","java.lang.String");
                setOrThrow(this::setFilePath,json::getString,"FILE_PATH","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                setOrThrow(this::setUpdatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"UPDATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setUpdatedBy,json::getString,"UPDATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("NAME",getName());
                json.put("EXTENSION",getExtension());
                json.put("TYPE",getType());
                json.put("MIME",getMime());
                json.put("SIZE",getSize());
                json.put("STATUS",getStatus());
                json.put("DIRECTORY_ID",getDirectoryId());
                json.put("STORE_WAY",getStoreWay());
                json.put("STORE_PATH",getStorePath());
                json.put("STORE_URI",getStoreUri());
                json.put("MODEL_ID",getModelId());
                json.put("MODEL_KEY",getModelKey());
                json.put("MODEL_CATEGORY",getModelCategory());
                json.put("FILE_NAME",getFileName());
                json.put("FILE_KEY",getFileKey());
                json.put("FILE_URL",getFileUrl());
                json.put("FILE_PATH",getFilePath());
                json.put("ACTIVE",getActive());
                json.put("SIGMA",getSigma());
                json.put("METADATA",getMetadata());
                json.put("LANGUAGE",getLanguage());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                json.put("UPDATED_AT",getUpdatedAt()==null?null:getUpdatedAt().toString());
                json.put("UPDATED_BY",getUpdatedBy());
                return json;
        }

}
