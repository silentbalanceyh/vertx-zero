/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.daos;


import cn.vertxup.ambient.domain.tables.XNumber;
import cn.vertxup.ambient.domain.tables.records.XNumberRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XNumberDao extends AbstractVertxDAO<XNumberRecord, cn.vertxup.ambient.domain.tables.pojos.XNumber, String, Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>>, Future<cn.vertxup.ambient.domain.tables.pojos.XNumber>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<XNumberRecord,cn.vertxup.ambient.domain.tables.pojos.XNumber,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public XNumberDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(XNumber.X_NUMBER, cn.vertxup.ambient.domain.tables.pojos.XNumber.class, new JDBCClassicQueryExecutor<XNumberRecord,cn.vertxup.ambient.domain.tables.pojos.XNumber,String>(configuration,cn.vertxup.ambient.domain.tables.pojos.XNumber.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.ambient.domain.tables.pojos.XNumber object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByCode(Collection<String> values) {
                return findManyByCondition(XNumber.X_NUMBER.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByComment(Collection<String> values) {
                return findManyByCondition(XNumber.X_NUMBER.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.COMMENT.in(values),limit);
        }

        /**
     * Find records that have <code>CURRENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByCurrent(Collection<Long> values) {
                return findManyByCondition(XNumber.X_NUMBER.CURRENT.in(values));
        }

        /**
     * Find records that have <code>CURRENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByCurrent(Collection<Long> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.CURRENT.in(values),limit);
        }

        /**
     * Find records that have <code>FORMAT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByFormat(Collection<String> values) {
                return findManyByCondition(XNumber.X_NUMBER.FORMAT.in(values));
        }

        /**
     * Find records that have <code>FORMAT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByFormat(Collection<String> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.FORMAT.in(values),limit);
        }

        /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByIdentifier(Collection<String> values) {
                return findManyByCondition(XNumber.X_NUMBER.IDENTIFIER.in(values));
        }

        /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByIdentifier(Collection<String> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.IDENTIFIER.in(values),limit);
        }

        /**
     * Find records that have <code>PREFIX IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByPrefix(Collection<String> values) {
                return findManyByCondition(XNumber.X_NUMBER.PREFIX.in(values));
        }

        /**
     * Find records that have <code>PREFIX IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByPrefix(Collection<String> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.PREFIX.in(values),limit);
        }

        /**
     * Find records that have <code>SUFFIX IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyBySuffix(Collection<String> values) {
                return findManyByCondition(XNumber.X_NUMBER.SUFFIX.in(values));
        }

        /**
     * Find records that have <code>SUFFIX IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyBySuffix(Collection<String> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.SUFFIX.in(values),limit);
        }

        /**
     * Find records that have <code>TIME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByTime(Collection<String> values) {
                return findManyByCondition(XNumber.X_NUMBER.TIME.in(values));
        }

        /**
     * Find records that have <code>TIME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByTime(Collection<String> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.TIME.in(values),limit);
        }

        /**
     * Find records that have <code>LENGTH IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByLength(Collection<Integer> values) {
                return findManyByCondition(XNumber.X_NUMBER.LENGTH.in(values));
        }

        /**
     * Find records that have <code>LENGTH IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByLength(Collection<Integer> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.LENGTH.in(values),limit);
        }

        /**
     * Find records that have <code>STEP IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByStep(Collection<Integer> values) {
                return findManyByCondition(XNumber.X_NUMBER.STEP.in(values));
        }

        /**
     * Find records that have <code>STEP IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByStep(Collection<Integer> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.STEP.in(values),limit);
        }

        /**
     * Find records that have <code>DECREMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByDecrement(Collection<Boolean> values) {
                return findManyByCondition(XNumber.X_NUMBER.DECREMENT.in(values));
        }

        /**
     * Find records that have <code>DECREMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByDecrement(Collection<Boolean> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.DECREMENT.in(values),limit);
        }

        /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByAppId(Collection<String> values) {
                return findManyByCondition(XNumber.X_NUMBER.APP_ID.in(values));
        }

        /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByAppId(Collection<String> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.APP_ID.in(values),limit);
        }

        /**
     * Find records that have <code>RENEWAL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByRenewal(Collection<Boolean> values) {
                return findManyByCondition(XNumber.X_NUMBER.RENEWAL.in(values));
        }

        /**
     * Find records that have <code>RENEWAL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByRenewal(Collection<Boolean> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.RENEWAL.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(XNumber.X_NUMBER.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(XNumber.X_NUMBER.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(XNumber.X_NUMBER.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(XNumber.X_NUMBER.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XNumber.X_NUMBER.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(XNumber.X_NUMBER.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XNumber.X_NUMBER.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(XNumber.X_NUMBER.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XNumber>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XNumber.X_NUMBER.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<XNumberRecord,cn.vertxup.ambient.domain.tables.pojos.XNumber,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<XNumberRecord,cn.vertxup.ambient.domain.tables.pojos.XNumber,String>) super.queryExecutor();
        }
}
