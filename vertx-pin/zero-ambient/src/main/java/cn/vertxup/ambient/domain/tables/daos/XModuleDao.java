/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.daos;


import cn.vertxup.ambient.domain.tables.XModule;
import cn.vertxup.ambient.domain.tables.records.XModuleRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XModuleDao extends AbstractVertxDAO<XModuleRecord, cn.vertxup.ambient.domain.tables.pojos.XModule, String, Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>>, Future<cn.vertxup.ambient.domain.tables.pojos.XModule>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<XModuleRecord,cn.vertxup.ambient.domain.tables.pojos.XModule,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public XModuleDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(XModule.X_MODULE, cn.vertxup.ambient.domain.tables.pojos.XModule.class, new JDBCClassicQueryExecutor<XModuleRecord,cn.vertxup.ambient.domain.tables.pojos.XModule,String>(configuration,cn.vertxup.ambient.domain.tables.pojos.XModule.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.ambient.domain.tables.pojos.XModule object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByName(Collection<String> values) {
                return findManyByCondition(XModule.X_MODULE.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(XModule.X_MODULE.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByCode(Collection<String> values) {
                return findManyByCondition(XModule.X_MODULE.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(XModule.X_MODULE.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>ENTRY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByEntry(Collection<String> values) {
                return findManyByCondition(XModule.X_MODULE.ENTRY.in(values));
        }

        /**
     * Find records that have <code>ENTRY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByEntry(Collection<String> values, int limit) {
                return findManyByCondition(XModule.X_MODULE.ENTRY.in(values),limit);
        }

        /**
     * Find records that have <code>BLOCK_CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByBlockCode(Collection<String> values) {
                return findManyByCondition(XModule.X_MODULE.BLOCK_CODE.in(values));
        }

        /**
     * Find records that have <code>BLOCK_CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByBlockCode(Collection<String> values, int limit) {
                return findManyByCondition(XModule.X_MODULE.BLOCK_CODE.in(values),limit);
        }

        /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByAppId(Collection<String> values) {
                return findManyByCondition(XModule.X_MODULE.APP_ID.in(values));
        }

        /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByAppId(Collection<String> values, int limit) {
                return findManyByCondition(XModule.X_MODULE.APP_ID.in(values),limit);
        }

        /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByModelId(Collection<String> values) {
                return findManyByCondition(XModule.X_MODULE.MODEL_ID.in(values));
        }

        /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByModelId(Collection<String> values, int limit) {
                return findManyByCondition(XModule.X_MODULE.MODEL_ID.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(XModule.X_MODULE.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(XModule.X_MODULE.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(XModule.X_MODULE.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(XModule.X_MODULE.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(XModule.X_MODULE.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(XModule.X_MODULE.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(XModule.X_MODULE.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(XModule.X_MODULE.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XModule.X_MODULE.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XModule.X_MODULE.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(XModule.X_MODULE.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XModule.X_MODULE.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XModule.X_MODULE.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XModule.X_MODULE.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(XModule.X_MODULE.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XModule>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XModule.X_MODULE.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<XModuleRecord,cn.vertxup.ambient.domain.tables.pojos.XModule,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<XModuleRecord,cn.vertxup.ambient.domain.tables.pojos.XModule,String>) super.queryExecutor();
        }
}
