/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.daos;


import cn.vertxup.ambient.domain.tables.XLog;
import cn.vertxup.ambient.domain.tables.records.XLogRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XLogDao extends AbstractVertxDAO<XLogRecord, cn.vertxup.ambient.domain.tables.pojos.XLog, String, Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>>, Future<cn.vertxup.ambient.domain.tables.pojos.XLog>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<XLogRecord,cn.vertxup.ambient.domain.tables.pojos.XLog,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     *      * @param vertx the vertx instance
     */
        public XLogDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(XLog.X_LOG, cn.vertxup.ambient.domain.tables.pojos.XLog.class, new JDBCClassicQueryExecutor<XLogRecord,cn.vertxup.ambient.domain.tables.pojos.XLog,String>(configuration,cn.vertxup.ambient.domain.tables.pojos.XLog.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.ambient.domain.tables.pojos.XLog object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByType(Collection<String> values) {
                return findManyByCondition(XLog.X_LOG.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(XLog.X_LOG.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>LEVEL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByLevel(Collection<String> values) {
                return findManyByCondition(XLog.X_LOG.LEVEL.in(values));
        }

        /**
     * Find records that have <code>LEVEL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByLevel(Collection<String> values, int limit) {
                return findManyByCondition(XLog.X_LOG.LEVEL.in(values),limit);
        }

        /**
     * Find records that have <code>INFO_STACK IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByInfoStack(Collection<String> values) {
                return findManyByCondition(XLog.X_LOG.INFO_STACK.in(values));
        }

        /**
     * Find records that have <code>INFO_STACK IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByInfoStack(Collection<String> values, int limit) {
                return findManyByCondition(XLog.X_LOG.INFO_STACK.in(values),limit);
        }

        /**
     * Find records that have <code>INFO_SYSTEM IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByInfoSystem(Collection<String> values) {
                return findManyByCondition(XLog.X_LOG.INFO_SYSTEM.in(values));
        }

        /**
     * Find records that have <code>INFO_SYSTEM IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByInfoSystem(Collection<String> values, int limit) {
                return findManyByCondition(XLog.X_LOG.INFO_SYSTEM.in(values),limit);
        }

        /**
     * Find records that have <code>INFO_READABLE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByInfoReadable(Collection<String> values) {
                return findManyByCondition(XLog.X_LOG.INFO_READABLE.in(values));
        }

        /**
     * Find records that have <code>INFO_READABLE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByInfoReadable(Collection<String> values, int limit) {
                return findManyByCondition(XLog.X_LOG.INFO_READABLE.in(values),limit);
        }

        /**
     * Find records that have <code>INFO_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByInfoAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XLog.X_LOG.INFO_AT.in(values));
        }

        /**
     * Find records that have <code>INFO_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByInfoAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XLog.X_LOG.INFO_AT.in(values),limit);
        }

        /**
     * Find records that have <code>LOG_AGENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByLogAgent(Collection<String> values) {
                return findManyByCondition(XLog.X_LOG.LOG_AGENT.in(values));
        }

        /**
     * Find records that have <code>LOG_AGENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByLogAgent(Collection<String> values, int limit) {
                return findManyByCondition(XLog.X_LOG.LOG_AGENT.in(values),limit);
        }

        /**
     * Find records that have <code>LOG_IP IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByLogIp(Collection<String> values) {
                return findManyByCondition(XLog.X_LOG.LOG_IP.in(values));
        }

        /**
     * Find records that have <code>LOG_IP IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByLogIp(Collection<String> values, int limit) {
                return findManyByCondition(XLog.X_LOG.LOG_IP.in(values),limit);
        }

        /**
     * Find records that have <code>LOG_USER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByLogUser(Collection<String> values) {
                return findManyByCondition(XLog.X_LOG.LOG_USER.in(values));
        }

        /**
     * Find records that have <code>LOG_USER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByLogUser(Collection<String> values, int limit) {
                return findManyByCondition(XLog.X_LOG.LOG_USER.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(XLog.X_LOG.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(XLog.X_LOG.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(XLog.X_LOG.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(XLog.X_LOG.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(XLog.X_LOG.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(XLog.X_LOG.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(XLog.X_LOG.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(XLog.X_LOG.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XLog.X_LOG.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XLog.X_LOG.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(XLog.X_LOG.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XLog.X_LOG.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XLog.X_LOG.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XLog.X_LOG.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(XLog.X_LOG.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XLog>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XLog.X_LOG.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<XLogRecord,cn.vertxup.ambient.domain.tables.pojos.XLog,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<XLogRecord,cn.vertxup.ambient.domain.tables.pojos.XLog,String>) super.queryExecutor();
        }
}
