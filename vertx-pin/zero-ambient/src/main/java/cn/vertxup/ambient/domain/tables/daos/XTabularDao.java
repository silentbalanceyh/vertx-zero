/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.daos;


import cn.vertxup.ambient.domain.tables.XTabular;
import cn.vertxup.ambient.domain.tables.records.XTabularRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XTabularDao extends AbstractVertxDAO<XTabularRecord, cn.vertxup.ambient.domain.tables.pojos.XTabular, String, Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>>, Future<cn.vertxup.ambient.domain.tables.pojos.XTabular>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<XTabularRecord,cn.vertxup.ambient.domain.tables.pojos.XTabular,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public XTabularDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(XTabular.X_TABULAR, cn.vertxup.ambient.domain.tables.pojos.XTabular.class, new JDBCClassicQueryExecutor<XTabularRecord,cn.vertxup.ambient.domain.tables.pojos.XTabular,String>(configuration,cn.vertxup.ambient.domain.tables.pojos.XTabular.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.ambient.domain.tables.pojos.XTabular object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByName(Collection<String> values) {
                return findManyByCondition(XTabular.X_TABULAR.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByCode(Collection<String> values) {
                return findManyByCondition(XTabular.X_TABULAR.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByType(Collection<String> values) {
                return findManyByCondition(XTabular.X_TABULAR.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>ICON IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByIcon(Collection<String> values) {
                return findManyByCondition(XTabular.X_TABULAR.ICON.in(values));
        }

        /**
     * Find records that have <code>ICON IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByIcon(Collection<String> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.ICON.in(values),limit);
        }

        /**
     * Find records that have <code>SORT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyBySort(Collection<Integer> values) {
                return findManyByCondition(XTabular.X_TABULAR.SORT.in(values));
        }

        /**
     * Find records that have <code>SORT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyBySort(Collection<Integer> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.SORT.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByComment(Collection<String> values) {
                return findManyByCondition(XTabular.X_TABULAR.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.COMMENT.in(values),limit);
        }

        /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByAppId(Collection<String> values) {
                return findManyByCondition(XTabular.X_TABULAR.APP_ID.in(values));
        }

        /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByAppId(Collection<String> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.APP_ID.in(values),limit);
        }

        /**
     * Find records that have <code>RUN_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByRunComponent(Collection<String> values) {
                return findManyByCondition(XTabular.X_TABULAR.RUN_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>RUN_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByRunComponent(Collection<String> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.RUN_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(XTabular.X_TABULAR.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(XTabular.X_TABULAR.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(XTabular.X_TABULAR.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(XTabular.X_TABULAR.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XTabular.X_TABULAR.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(XTabular.X_TABULAR.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XTabular.X_TABULAR.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(XTabular.X_TABULAR.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ambient.domain.tables.pojos.XTabular>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XTabular.X_TABULAR.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<XTabularRecord,cn.vertxup.ambient.domain.tables.pojos.XTabular,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<XTabularRecord,cn.vertxup.ambient.domain.tables.pojos.XTabular,String>) super.queryExecutor();
        }
}
