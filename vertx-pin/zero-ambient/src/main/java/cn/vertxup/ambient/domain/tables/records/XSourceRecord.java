/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.records;


import cn.vertxup.ambient.domain.tables.XSource;
import cn.vertxup.ambient.domain.tables.interfaces.IXSource;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record21;
import org.jooq.Row21;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XSourceRecord extends UpdatableRecordImpl<XSourceRecord> implements VertxPojo, Record21<String, String, String, String, Integer, String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String>, IXSource {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.KEY</code>. 「key」- 数据源主键
     */
    @Override
    public XSourceRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.KEY</code>. 「key」- 数据源主键
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.IP_V4</code>. 「ipV4」- IP v4地址
     */
    @Override
    public XSourceRecord setIpV4(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.IP_V4</code>. 「ipV4」- IP v4地址
     */
    @Override
    public String getIpV4() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.IP_V6</code>. 「ipV6」- IP v6地址
     */
    @Override
    public XSourceRecord setIpV6(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.IP_V6</code>. 「ipV6」- IP v6地址
     */
    @Override
    public String getIpV6() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.HOSTNAME</code>. 「hostname」- 主机地址
     */
    @Override
    public XSourceRecord setHostname(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.HOSTNAME</code>. 「hostname」- 主机地址
     */
    @Override
    public String getHostname() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.PORT</code>. 「port」- 端口号
     */
    @Override
    public XSourceRecord setPort(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.PORT</code>. 「port」- 端口号
     */
    @Override
    public Integer getPort() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.CATEGORY</code>. 「category」- 数据库类型
     */
    @Override
    public XSourceRecord setCategory(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.CATEGORY</code>. 「category」- 数据库类型
     */
    @Override
    public String getCategory() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.DRIVER_CLASS_NAME</code>.
     * 「driverClassName」- 数据库驱动指定，JDBC4之前
     */
    @Override
    public XSourceRecord setDriverClassName(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.DRIVER_CLASS_NAME</code>.
     * 「driverClassName」- 数据库驱动指定，JDBC4之前
     */
    @Override
    public String getDriverClassName() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.JDBC_URL</code>. 「jdbcUrl」-
     * JDBC连接字符串
     */
    @Override
    public XSourceRecord setJdbcUrl(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.JDBC_URL</code>. 「jdbcUrl」-
     * JDBC连接字符串
     */
    @Override
    public String getJdbcUrl() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.JDBC_CONFIG</code>. 「jdbcConfig」-
     * 连接字符串中的配置key=value
     */
    @Override
    public XSourceRecord setJdbcConfig(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.JDBC_CONFIG</code>. 「jdbcConfig」-
     * 连接字符串中的配置key=value
     */
    @Override
    public String getJdbcConfig() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.INSTANCE</code>. 「instance」- 实例名称
     */
    @Override
    public XSourceRecord setInstance(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.INSTANCE</code>. 「instance」- 实例名称
     */
    @Override
    public String getInstance() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.USERNAME</code>. 「username」- 账号
     */
    @Override
    public XSourceRecord setUsername(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.USERNAME</code>. 「username」- 账号
     */
    @Override
    public String getUsername() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.PASSWORD</code>. 「password」- 密码
     */
    @Override
    public XSourceRecord setPassword(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.PASSWORD</code>. 「password」- 密码
     */
    @Override
    public String getPassword() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.APP_ID</code>. 「appId」- 关联的应用程序ID
     */
    @Override
    public XSourceRecord setAppId(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.APP_ID</code>. 「appId」- 关联的应用程序ID
     */
    @Override
    public String getAppId() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public XSourceRecord setActive(Boolean value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public XSourceRecord setSigma(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public XSourceRecord setMetadata(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return (String) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public XSourceRecord setLanguage(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(16);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public XSourceRecord setCreatedAt(LocalDateTime value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(17);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public XSourceRecord setCreatedBy(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(18);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public XSourceRecord setUpdatedAt(LocalDateTime value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(19);
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public XSourceRecord setUpdatedBy(String value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(20);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record21 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row21<String, String, String, String, Integer, String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row21) super.fieldsRow();
    }

    @Override
    public Row21<String, String, String, String, Integer, String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row21) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return XSource.X_SOURCE.KEY;
    }

    @Override
    public Field<String> field2() {
        return XSource.X_SOURCE.IP_V4;
    }

    @Override
    public Field<String> field3() {
        return XSource.X_SOURCE.IP_V6;
    }

    @Override
    public Field<String> field4() {
        return XSource.X_SOURCE.HOSTNAME;
    }

    @Override
    public Field<Integer> field5() {
        return XSource.X_SOURCE.PORT;
    }

    @Override
    public Field<String> field6() {
        return XSource.X_SOURCE.CATEGORY;
    }

    @Override
    public Field<String> field7() {
        return XSource.X_SOURCE.DRIVER_CLASS_NAME;
    }

    @Override
    public Field<String> field8() {
        return XSource.X_SOURCE.JDBC_URL;
    }

    @Override
    public Field<String> field9() {
        return XSource.X_SOURCE.JDBC_CONFIG;
    }

    @Override
    public Field<String> field10() {
        return XSource.X_SOURCE.INSTANCE;
    }

    @Override
    public Field<String> field11() {
        return XSource.X_SOURCE.USERNAME;
    }

    @Override
    public Field<String> field12() {
        return XSource.X_SOURCE.PASSWORD;
    }

    @Override
    public Field<String> field13() {
        return XSource.X_SOURCE.APP_ID;
    }

    @Override
    public Field<Boolean> field14() {
        return XSource.X_SOURCE.ACTIVE;
    }

    @Override
    public Field<String> field15() {
        return XSource.X_SOURCE.SIGMA;
    }

    @Override
    public Field<String> field16() {
        return XSource.X_SOURCE.METADATA;
    }

    @Override
    public Field<String> field17() {
        return XSource.X_SOURCE.LANGUAGE;
    }

    @Override
    public Field<LocalDateTime> field18() {
        return XSource.X_SOURCE.CREATED_AT;
    }

    @Override
    public Field<String> field19() {
        return XSource.X_SOURCE.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field20() {
        return XSource.X_SOURCE.UPDATED_AT;
    }

    @Override
    public Field<String> field21() {
        return XSource.X_SOURCE.UPDATED_BY;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getIpV4();
    }

    @Override
    public String component3() {
        return getIpV6();
    }

    @Override
    public String component4() {
        return getHostname();
    }

    @Override
    public Integer component5() {
        return getPort();
    }

    @Override
    public String component6() {
        return getCategory();
    }

    @Override
    public String component7() {
        return getDriverClassName();
    }

    @Override
    public String component8() {
        return getJdbcUrl();
    }

    @Override
    public String component9() {
        return getJdbcConfig();
    }

    @Override
    public String component10() {
        return getInstance();
    }

    @Override
    public String component11() {
        return getUsername();
    }

    @Override
    public String component12() {
        return getPassword();
    }

    @Override
    public String component13() {
        return getAppId();
    }

    @Override
    public Boolean component14() {
        return getActive();
    }

    @Override
    public String component15() {
        return getSigma();
    }

    @Override
    public String component16() {
        return getMetadata();
    }

    @Override
    public String component17() {
        return getLanguage();
    }

    @Override
    public LocalDateTime component18() {
        return getCreatedAt();
    }

    @Override
    public String component19() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component20() {
        return getUpdatedAt();
    }

    @Override
    public String component21() {
        return getUpdatedBy();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getIpV4();
    }

    @Override
    public String value3() {
        return getIpV6();
    }

    @Override
    public String value4() {
        return getHostname();
    }

    @Override
    public Integer value5() {
        return getPort();
    }

    @Override
    public String value6() {
        return getCategory();
    }

    @Override
    public String value7() {
        return getDriverClassName();
    }

    @Override
    public String value8() {
        return getJdbcUrl();
    }

    @Override
    public String value9() {
        return getJdbcConfig();
    }

    @Override
    public String value10() {
        return getInstance();
    }

    @Override
    public String value11() {
        return getUsername();
    }

    @Override
    public String value12() {
        return getPassword();
    }

    @Override
    public String value13() {
        return getAppId();
    }

    @Override
    public Boolean value14() {
        return getActive();
    }

    @Override
    public String value15() {
        return getSigma();
    }

    @Override
    public String value16() {
        return getMetadata();
    }

    @Override
    public String value17() {
        return getLanguage();
    }

    @Override
    public LocalDateTime value18() {
        return getCreatedAt();
    }

    @Override
    public String value19() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value20() {
        return getUpdatedAt();
    }

    @Override
    public String value21() {
        return getUpdatedBy();
    }

    @Override
    public XSourceRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public XSourceRecord value2(String value) {
        setIpV4(value);
        return this;
    }

    @Override
    public XSourceRecord value3(String value) {
        setIpV6(value);
        return this;
    }

    @Override
    public XSourceRecord value4(String value) {
        setHostname(value);
        return this;
    }

    @Override
    public XSourceRecord value5(Integer value) {
        setPort(value);
        return this;
    }

    @Override
    public XSourceRecord value6(String value) {
        setCategory(value);
        return this;
    }

    @Override
    public XSourceRecord value7(String value) {
        setDriverClassName(value);
        return this;
    }

    @Override
    public XSourceRecord value8(String value) {
        setJdbcUrl(value);
        return this;
    }

    @Override
    public XSourceRecord value9(String value) {
        setJdbcConfig(value);
        return this;
    }

    @Override
    public XSourceRecord value10(String value) {
        setInstance(value);
        return this;
    }

    @Override
    public XSourceRecord value11(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public XSourceRecord value12(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public XSourceRecord value13(String value) {
        setAppId(value);
        return this;
    }

    @Override
    public XSourceRecord value14(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public XSourceRecord value15(String value) {
        setSigma(value);
        return this;
    }

    @Override
    public XSourceRecord value16(String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public XSourceRecord value17(String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public XSourceRecord value18(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public XSourceRecord value19(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public XSourceRecord value20(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public XSourceRecord value21(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public XSourceRecord values(String value1, String value2, String value3, String value4, Integer value5, String value6, String value7, String value8, String value9, String value10, String value11, String value12, String value13, Boolean value14, String value15, String value16, String value17, LocalDateTime value18, String value19, LocalDateTime value20, String value21) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        value20(value20);
        value21(value21);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IXSource from) {
        setKey(from.getKey());
        setIpV4(from.getIpV4());
        setIpV6(from.getIpV6());
        setHostname(from.getHostname());
        setPort(from.getPort());
        setCategory(from.getCategory());
        setDriverClassName(from.getDriverClassName());
        setJdbcUrl(from.getJdbcUrl());
        setJdbcConfig(from.getJdbcConfig());
        setInstance(from.getInstance());
        setUsername(from.getUsername());
        setPassword(from.getPassword());
        setAppId(from.getAppId());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IXSource> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached XSourceRecord
     */
    public XSourceRecord() {
        super(XSource.X_SOURCE);
    }

    /**
     * Create a detached, initialised XSourceRecord
     */
    public XSourceRecord(String key, String ipV4, String ipV6, String hostname, Integer port, String category, String driverClassName, String jdbcUrl, String jdbcConfig, String instance, String username, String password, String appId, Boolean active, String sigma, String metadata, String language, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(XSource.X_SOURCE);

        setKey(key);
        setIpV4(ipV4);
        setIpV6(ipV6);
        setHostname(hostname);
        setPort(port);
        setCategory(category);
        setDriverClassName(driverClassName);
        setJdbcUrl(jdbcUrl);
        setJdbcConfig(jdbcConfig);
        setInstance(instance);
        setUsername(username);
        setPassword(password);
        setAppId(appId);
        setActive(active);
        setSigma(sigma);
        setMetadata(metadata);
        setLanguage(language);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
    }

    /**
     * Create a detached, initialised XSourceRecord
     */
    public XSourceRecord(cn.vertxup.ambient.domain.tables.pojos.XSource value) {
        super(XSource.X_SOURCE);

        if (value != null) {
            setKey(value.getKey());
            setIpV4(value.getIpV4());
            setIpV6(value.getIpV6());
            setHostname(value.getHostname());
            setPort(value.getPort());
            setCategory(value.getCategory());
            setDriverClassName(value.getDriverClassName());
            setJdbcUrl(value.getJdbcUrl());
            setJdbcConfig(value.getJdbcConfig());
            setInstance(value.getInstance());
            setUsername(value.getUsername());
            setPassword(value.getPassword());
            setAppId(value.getAppId());
            setActive(value.getActive());
            setSigma(value.getSigma());
            setMetadata(value.getMetadata());
            setLanguage(value.getLanguage());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
        }
    }

        public XSourceRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
