/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ambient.domain.tables.pojos;


import cn.vertxup.ambient.domain.tables.interfaces.IXSource;
import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XSource implements VertxPojo, IXSource {

    private static final long serialVersionUID = 1L;

    private String key;
    private String ipV4;
    private String ipV6;
    private String hostname;
    private Integer port;
    private String category;
    private String driverClassName;
    private String jdbcUrl;
    private String jdbcConfig;
    private String instance;
    private String username;
    private String password;
    private String appId;
    private Boolean active;
    private String sigma;
    private String metadata;
    private String language;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public XSource() {}

    public XSource(IXSource value) {
        this.key = value.getKey();
        this.ipV4 = value.getIpV4();
        this.ipV6 = value.getIpV6();
        this.hostname = value.getHostname();
        this.port = value.getPort();
        this.category = value.getCategory();
        this.driverClassName = value.getDriverClassName();
        this.jdbcUrl = value.getJdbcUrl();
        this.jdbcConfig = value.getJdbcConfig();
        this.instance = value.getInstance();
        this.username = value.getUsername();
        this.password = value.getPassword();
        this.appId = value.getAppId();
        this.active = value.getActive();
        this.sigma = value.getSigma();
        this.metadata = value.getMetadata();
        this.language = value.getLanguage();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public XSource(
        String key,
        String ipV4,
        String ipV6,
        String hostname,
        Integer port,
        String category,
        String driverClassName,
        String jdbcUrl,
        String jdbcConfig,
        String instance,
        String username,
        String password,
        String appId,
        Boolean active,
        String sigma,
        String metadata,
        String language,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.ipV4 = ipV4;
        this.ipV6 = ipV6;
        this.hostname = hostname;
        this.port = port;
        this.category = category;
        this.driverClassName = driverClassName;
        this.jdbcUrl = jdbcUrl;
        this.jdbcConfig = jdbcConfig;
        this.instance = instance;
        this.username = username;
        this.password = password;
        this.appId = appId;
        this.active = active;
        this.sigma = sigma;
        this.metadata = metadata;
        this.language = language;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public XSource(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.KEY</code>. 「key」- 数据源主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.KEY</code>. 「key」- 数据源主键
     */
    @Override
    public XSource setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.IP_V4</code>. 「ipV4」- IP v4地址
     */
    @Override
    public String getIpV4() {
        return this.ipV4;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.IP_V4</code>. 「ipV4」- IP v4地址
     */
    @Override
    public XSource setIpV4(String ipV4) {
        this.ipV4 = ipV4;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.IP_V6</code>. 「ipV6」- IP v6地址
     */
    @Override
    public String getIpV6() {
        return this.ipV6;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.IP_V6</code>. 「ipV6」- IP v6地址
     */
    @Override
    public XSource setIpV6(String ipV6) {
        this.ipV6 = ipV6;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.HOSTNAME</code>. 「hostname」- 主机地址
     */
    @Override
    public String getHostname() {
        return this.hostname;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.HOSTNAME</code>. 「hostname」- 主机地址
     */
    @Override
    public XSource setHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.PORT</code>. 「port」- 端口号
     */
    @Override
    public Integer getPort() {
        return this.port;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.PORT</code>. 「port」- 端口号
     */
    @Override
    public XSource setPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.CATEGORY</code>. 「category」- 数据库类型
     */
    @Override
    public String getCategory() {
        return this.category;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.CATEGORY</code>. 「category」- 数据库类型
     */
    @Override
    public XSource setCategory(String category) {
        this.category = category;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.DRIVER_CLASS_NAME</code>.
     * 「driverClassName」- 数据库驱动指定，JDBC4之前
     */
    @Override
    public String getDriverClassName() {
        return this.driverClassName;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.DRIVER_CLASS_NAME</code>.
     * 「driverClassName」- 数据库驱动指定，JDBC4之前
     */
    @Override
    public XSource setDriverClassName(String driverClassName) {
        this.driverClassName = driverClassName;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.JDBC_URL</code>. 「jdbcUrl」-
     * JDBC连接字符串
     */
    @Override
    public String getJdbcUrl() {
        return this.jdbcUrl;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.JDBC_URL</code>. 「jdbcUrl」-
     * JDBC连接字符串
     */
    @Override
    public XSource setJdbcUrl(String jdbcUrl) {
        this.jdbcUrl = jdbcUrl;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.JDBC_CONFIG</code>. 「jdbcConfig」-
     * 连接字符串中的配置key=value
     */
    @Override
    public String getJdbcConfig() {
        return this.jdbcConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.JDBC_CONFIG</code>. 「jdbcConfig」-
     * 连接字符串中的配置key=value
     */
    @Override
    public XSource setJdbcConfig(String jdbcConfig) {
        this.jdbcConfig = jdbcConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.INSTANCE</code>. 「instance」- 实例名称
     */
    @Override
    public String getInstance() {
        return this.instance;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.INSTANCE</code>. 「instance」- 实例名称
     */
    @Override
    public XSource setInstance(String instance) {
        this.instance = instance;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.USERNAME</code>. 「username」- 账号
     */
    @Override
    public String getUsername() {
        return this.username;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.USERNAME</code>. 「username」- 账号
     */
    @Override
    public XSource setUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.PASSWORD</code>. 「password」- 密码
     */
    @Override
    public String getPassword() {
        return this.password;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.PASSWORD</code>. 「password」- 密码
     */
    @Override
    public XSource setPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.APP_ID</code>. 「appId」- 关联的应用程序ID
     */
    @Override
    public String getAppId() {
        return this.appId;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.APP_ID</code>. 「appId」- 关联的应用程序ID
     */
    @Override
    public XSource setAppId(String appId) {
        this.appId = appId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public XSource setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public XSource setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public XSource setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public XSource setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public XSource setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public XSource setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public XSource setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.X_SOURCE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.X_SOURCE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public XSource setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final XSource other = (XSource) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        }
        else if (!this.key.equals(other.key))
            return false;
        if (this.ipV4 == null) {
            if (other.ipV4 != null)
                return false;
        }
        else if (!this.ipV4.equals(other.ipV4))
            return false;
        if (this.ipV6 == null) {
            if (other.ipV6 != null)
                return false;
        }
        else if (!this.ipV6.equals(other.ipV6))
            return false;
        if (this.hostname == null) {
            if (other.hostname != null)
                return false;
        }
        else if (!this.hostname.equals(other.hostname))
            return false;
        if (this.port == null) {
            if (other.port != null)
                return false;
        }
        else if (!this.port.equals(other.port))
            return false;
        if (this.category == null) {
            if (other.category != null)
                return false;
        }
        else if (!this.category.equals(other.category))
            return false;
        if (this.driverClassName == null) {
            if (other.driverClassName != null)
                return false;
        }
        else if (!this.driverClassName.equals(other.driverClassName))
            return false;
        if (this.jdbcUrl == null) {
            if (other.jdbcUrl != null)
                return false;
        }
        else if (!this.jdbcUrl.equals(other.jdbcUrl))
            return false;
        if (this.jdbcConfig == null) {
            if (other.jdbcConfig != null)
                return false;
        }
        else if (!this.jdbcConfig.equals(other.jdbcConfig))
            return false;
        if (this.instance == null) {
            if (other.instance != null)
                return false;
        }
        else if (!this.instance.equals(other.instance))
            return false;
        if (this.username == null) {
            if (other.username != null)
                return false;
        }
        else if (!this.username.equals(other.username))
            return false;
        if (this.password == null) {
            if (other.password != null)
                return false;
        }
        else if (!this.password.equals(other.password))
            return false;
        if (this.appId == null) {
            if (other.appId != null)
                return false;
        }
        else if (!this.appId.equals(other.appId))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        }
        else if (!this.active.equals(other.active))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        }
        else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        }
        else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        }
        else if (!this.language.equals(other.language))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.ipV4 == null) ? 0 : this.ipV4.hashCode());
        result = prime * result + ((this.ipV6 == null) ? 0 : this.ipV6.hashCode());
        result = prime * result + ((this.hostname == null) ? 0 : this.hostname.hashCode());
        result = prime * result + ((this.port == null) ? 0 : this.port.hashCode());
        result = prime * result + ((this.category == null) ? 0 : this.category.hashCode());
        result = prime * result + ((this.driverClassName == null) ? 0 : this.driverClassName.hashCode());
        result = prime * result + ((this.jdbcUrl == null) ? 0 : this.jdbcUrl.hashCode());
        result = prime * result + ((this.jdbcConfig == null) ? 0 : this.jdbcConfig.hashCode());
        result = prime * result + ((this.instance == null) ? 0 : this.instance.hashCode());
        result = prime * result + ((this.username == null) ? 0 : this.username.hashCode());
        result = prime * result + ((this.password == null) ? 0 : this.password.hashCode());
        result = prime * result + ((this.appId == null) ? 0 : this.appId.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("XSource (");

        sb.append(key);
        sb.append(", ").append(ipV4);
        sb.append(", ").append(ipV6);
        sb.append(", ").append(hostname);
        sb.append(", ").append(port);
        sb.append(", ").append(category);
        sb.append(", ").append(driverClassName);
        sb.append(", ").append(jdbcUrl);
        sb.append(", ").append(jdbcConfig);
        sb.append(", ").append(instance);
        sb.append(", ").append(username);
        sb.append(", ").append(password);
        sb.append(", ").append(appId);
        sb.append(", ").append(active);
        sb.append(", ").append(sigma);
        sb.append(", ").append(metadata);
        sb.append(", ").append(language);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IXSource from) {
        setKey(from.getKey());
        setIpV4(from.getIpV4());
        setIpV6(from.getIpV6());
        setHostname(from.getHostname());
        setPort(from.getPort());
        setCategory(from.getCategory());
        setDriverClassName(from.getDriverClassName());
        setJdbcUrl(from.getJdbcUrl());
        setJdbcConfig(from.getJdbcConfig());
        setInstance(from.getInstance());
        setUsername(from.getUsername());
        setPassword(from.getPassword());
        setAppId(from.getAppId());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IXSource> E into(E into) {
        into.from(this);
        return into;
    }
}
