/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.template.domain.tables;


import cn.vertxup.template.domain.Db;
import cn.vertxup.template.domain.Keys;
import cn.vertxup.template.domain.tables.records.TplMessageRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TplMessage extends TableImpl<TplMessageRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.TPL_MESSAGE</code>
     */
    public static final TplMessage TPL_MESSAGE = new TplMessage();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.KEY</code>. 「key」- 模板唯一主键
     */
    public final TableField<TplMessageRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 模板唯一主键");
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.NAME</code>. 「name」- 模板名称
     */
    public final TableField<TplMessageRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 模板名称");
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.CODE</code>. 「code」- 模板编码
     */
    public final TableField<TplMessageRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(36), this, "「code」- 模板编码");
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.TYPE</code>. 「type」- 模板类型
     */
    public final TableField<TplMessageRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(255), this, "「type」- 模板类型");
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.EXPR_SUBJECT</code>.
     * 「exprSubject」- 模板标题，支持表达式
     */
    public final TableField<TplMessageRecord, String> EXPR_SUBJECT = createField(DSL.name("EXPR_SUBJECT"), SQLDataType.CLOB, this, "「exprSubject」- 模板标题，支持表达式");
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.EXPR_CONTENT</code>.
     * 「exprContent」- 模板内容，支持表达式
     */
    public final TableField<TplMessageRecord, String> EXPR_CONTENT = createField(DSL.name("EXPR_CONTENT"), SQLDataType.CLOB, this, "「exprContent」- 模板内容，支持表达式");
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.EXPR_COMPONENT</code>.
     * 「exprComponent」- 模板扩展处理程序，Java类名
     */
    public final TableField<TplMessageRecord, String> EXPR_COMPONENT = createField(DSL.name("EXPR_COMPONENT"), SQLDataType.VARCHAR(255), this, "「exprComponent」- 模板扩展处理程序，Java类名");
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.APP_ID</code>. 「appId」- 所属应用ID
     */
    public final TableField<TplMessageRecord, String> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.VARCHAR(36), this, "「appId」- 所属应用ID");
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<TplMessageRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<TplMessageRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<TplMessageRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public final TableField<TplMessageRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<TplMessageRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public final TableField<TplMessageRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<TplMessageRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.TPL_MESSAGE.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public final TableField<TplMessageRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private TplMessage(Name alias, Table<TplMessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private TplMessage(Name alias, Table<TplMessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.TPL_MESSAGE</code> table reference
     */
    public TplMessage(String alias) {
        this(DSL.name(alias), TPL_MESSAGE);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.TPL_MESSAGE</code> table reference
     */
    public TplMessage(Name alias) {
        this(alias, TPL_MESSAGE);
    }

    /**
     * Create a <code>DB_ETERNAL.TPL_MESSAGE</code> table reference
     */
    public TplMessage() {
        this(DSL.name("TPL_MESSAGE"), null);
    }

    public <O extends Record> TplMessage(Table<O> child, ForeignKey<O, TplMessageRecord> key) {
        super(child, key, TPL_MESSAGE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TplMessageRecord> getRecordType() {
        return TplMessageRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<TplMessageRecord> getPrimaryKey() {
        return Keys.KEY_TPL_MESSAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<TplMessageRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TPL_MESSAGE_APP_ID_2, Keys.KEY_TPL_MESSAGE_APP_ID);
    }

    @Override
    public TplMessage as(String alias) {
        return new TplMessage(DSL.name(alias), this);
    }

    @Override
    public TplMessage as(Name alias) {
        return new TplMessage(alias, this);
    }

    @Override
    public TplMessage as(Table<?> alias) {
        return new TplMessage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TplMessage rename(String name) {
        return new TplMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TplMessage rename(Name name) {
        return new TplMessage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TplMessage rename(Table<?> name) {
        return new TplMessage(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
