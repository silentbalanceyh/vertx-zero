/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.tpl.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;

import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.setOrThrow;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IMyFavor extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.KEY</code>. 「key」- 个人应用主键
     */
    public IMyFavor setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.KEY</code>. 「key」- 个人应用主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.OWNER</code>. 「owner」- 拥有者ID，我的 /
     * 角色级
     */
    public IMyFavor setOwner(String value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.OWNER</code>. 「owner」- 拥有者ID，我的 /
     * 角色级
     */
    public String getOwner();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.OWNER_TYPE</code>. 「ownerType」- ROLE
     * 角色，USER 用户
     */
    public IMyFavor setOwnerType(String value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.OWNER_TYPE</code>. 「ownerType」- ROLE
     * 角色，USER 用户
     */
    public String getOwnerType();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.UI_SORT</code>. 「uiSort」- 模块排序
     */
    public IMyFavor setUiSort(Long value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.UI_SORT</code>. 「uiSort」- 模块排序
     */
    public Long getUiSort();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.TYPE</code>. 「type」- 类型（默认全站）
     */
    public IMyFavor setType(String value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.TYPE</code>. 「type」- 类型（默认全站）
     */
    public String getType();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.POSITION</code>. 「position」-
     * 位置（默认左侧）
     */
    public IMyFavor setPosition(String value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.POSITION</code>. 「position」-
     * 位置（默认左侧）
     */
    public String getPosition();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.URI_KEY</code>. 「uriKey」- URI
     * KEY（加密长度）
     */
    public IMyFavor setUriKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.URI_KEY</code>. 「uriKey」- URI
     * KEY（加密长度）
     */
    public String getUriKey();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.URI_FULL</code>. 「uriFull」-
     * 收藏完整链接地址（带参数部分）
     */
    public IMyFavor setUriFull(String value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.URI_FULL</code>. 「uriFull」-
     * 收藏完整链接地址（带参数部分）
     */
    public String getUriFull();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.URI</code>. 「uri」- 收藏地址
     */
    public IMyFavor setUri(String value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.URI</code>. 「uri」- 收藏地址
     */
    public String getUri();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.URI_PARAM</code>. 「uriParam」-
     * 该收藏参数（收藏夹专用）
     */
    public IMyFavor setUriParam(String value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.URI_PARAM</code>. 「uriParam」-
     * 该收藏参数（收藏夹专用）
     */
    public String getUriParam();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.ACTIVE</code>. 「active」- 是否启用
     */
    public IMyFavor setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.SIGMA</code>. 「sigma」- 统一标识
     */
    public IMyFavor setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.METADATA</code>. 「metadata」- 附加配置
     */
    public IMyFavor setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IMyFavor setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IMyFavor setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IMyFavor setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public IMyFavor setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.MY_FAVOR.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IMyFavor setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.MY_FAVOR.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IMyFavor
     */
    public void from(IMyFavor from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IMyFavor
     */
    public <E extends IMyFavor> E into(E into);

        @Override
        public default IMyFavor fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setOwner,json::getString,"OWNER","java.lang.String");
                setOrThrow(this::setOwnerType,json::getString,"OWNER_TYPE","java.lang.String");
                setOrThrow(this::setUiSort,json::getLong,"UI_SORT","java.lang.Long");
                setOrThrow(this::setType,json::getString,"TYPE","java.lang.String");
                setOrThrow(this::setPosition,json::getString,"POSITION","java.lang.String");
                setOrThrow(this::setUriKey,json::getString,"URI_KEY","java.lang.String");
                setOrThrow(this::setUriFull,json::getString,"URI_FULL","java.lang.String");
                setOrThrow(this::setUri,json::getString,"URI","java.lang.String");
                setOrThrow(this::setUriParam,json::getString,"URI_PARAM","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                setOrThrow(this::setUpdatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"UPDATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setUpdatedBy,json::getString,"UPDATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("OWNER",getOwner());
                json.put("OWNER_TYPE",getOwnerType());
                json.put("UI_SORT",getUiSort());
                json.put("TYPE",getType());
                json.put("POSITION",getPosition());
                json.put("URI_KEY",getUriKey());
                json.put("URI_FULL",getUriFull());
                json.put("URI",getUri());
                json.put("URI_PARAM",getUriParam());
                json.put("ACTIVE",getActive());
                json.put("SIGMA",getSigma());
                json.put("METADATA",getMetadata());
                json.put("LANGUAGE",getLanguage());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                json.put("UPDATED_AT",getUpdatedAt()==null?null:getUpdatedAt().toString());
                json.put("UPDATED_BY",getUpdatedBy());
                return json;
        }

}
