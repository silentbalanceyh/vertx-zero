/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.tpl.domain.tables;


import cn.vertxup.tpl.domain.Db;
import cn.vertxup.tpl.domain.Keys;
import cn.vertxup.tpl.domain.tables.records.MySettingRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MySetting extends TableImpl<MySettingRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.MY_SETTING</code>
     */
    public static final MySetting MY_SETTING = new MySetting();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.KEY</code>. 「key」- 个人设置主键
     */
    public final TableField<MySettingRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 个人设置主键");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.P_NAV_THEME</code>. 「pNavTheme」-
     * navTheme, 风格处理，对应 light / realdark
     */
    public final TableField<MySettingRecord, String> P_NAV_THEME = createField(DSL.name("P_NAV_THEME"), SQLDataType.VARCHAR(32), this, "「pNavTheme」- navTheme, 风格处理，对应 light / realdark");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.P_COLOR_PRIMARY</code>.
     * 「pColorPrimary」- colorPrimary，主色调
     */
    public final TableField<MySettingRecord, String> P_COLOR_PRIMARY = createField(DSL.name("P_COLOR_PRIMARY"), SQLDataType.VARCHAR(20), this, "「pColorPrimary」- colorPrimary，主色调");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.P_LAYOUT</code>. 「pLayout」-
     * 布局类型：top, menu, mix
     */
    public final TableField<MySettingRecord, String> P_LAYOUT = createField(DSL.name("P_LAYOUT"), SQLDataType.VARCHAR(12), this, "「pLayout」- 布局类型：top, menu, mix");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.P_CONTENT_WIDTH</code>.
     * 「pContentWidth」- 两种
     */
    public final TableField<MySettingRecord, String> P_CONTENT_WIDTH = createField(DSL.name("P_CONTENT_WIDTH"), SQLDataType.VARCHAR(12), this, "「pContentWidth」- 两种");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.P_FIXED_HEADER</code>.
     * 「pFixedHeader」- 标题控制
     */
    public final TableField<MySettingRecord, Boolean> P_FIXED_HEADER = createField(DSL.name("P_FIXED_HEADER"), SQLDataType.BIT, this, "「pFixedHeader」- 标题控制");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.P_FIX_SIDER_BAR</code>.
     * 「pFixSiderBar」- 侧边栏控制
     */
    public final TableField<MySettingRecord, Boolean> P_FIX_SIDER_BAR = createField(DSL.name("P_FIX_SIDER_BAR"), SQLDataType.BIT, this, "「pFixSiderBar」- 侧边栏控制");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.P_COLOR_WEAK</code>. 「pColorWeak」-
     * 色彩控制
     */
    public final TableField<MySettingRecord, Boolean> P_COLOR_WEAK = createField(DSL.name("P_COLOR_WEAK"), SQLDataType.BIT, this, "「pColorWeak」- 色彩控制");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.P_PWA</code>. 「pPwa」- pwa属性，暂时未知
     */
    public final TableField<MySettingRecord, Boolean> P_PWA = createField(DSL.name("P_PWA"), SQLDataType.BIT, this, "「pPwa」- pwa属性，暂时未知");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.P_TOKEN</code>. 「pToken」-
     * 保留（后续可能会使用）
     */
    public final TableField<MySettingRecord, String> P_TOKEN = createField(DSL.name("P_TOKEN"), SQLDataType.CLOB, this, "「pToken」- 保留（后续可能会使用）");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.MY_BAG</code>. 「myBag」- 对应 MY_BAG
     * 设置，每个BAG有对应设置信息
     */
    public final TableField<MySettingRecord, String> MY_BAG = createField(DSL.name("MY_BAG"), SQLDataType.VARCHAR(36), this, "「myBag」- 对应 MY_BAG 设置，每个BAG有对应设置信息");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.OWNER</code>. 「owner」- 拥有者ID，我的 /
     * 角色级
     */
    public final TableField<MySettingRecord, String> OWNER = createField(DSL.name("OWNER"), SQLDataType.VARCHAR(36), this, "「owner」- 拥有者ID，我的 / 角色级");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.OWNER_TYPE</code>. 「ownerType」-
     * ROLE 角色，USER 用户
     */
    public final TableField<MySettingRecord, String> OWNER_TYPE = createField(DSL.name("OWNER_TYPE"), SQLDataType.VARCHAR(5), this, "「ownerType」- ROLE 角色，USER 用户");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.TYPE</code>. 「type」- 类型（默认全站）
     */
    public final TableField<MySettingRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(32), this, "「type」- 类型（默认全站）");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<MySettingRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<MySettingRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<MySettingRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<MySettingRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<MySettingRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public final TableField<MySettingRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<MySettingRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.MY_SETTING.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public final TableField<MySettingRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private MySetting(Name alias, Table<MySettingRecord> aliased) {
        this(alias, aliased, null);
    }

    private MySetting(Name alias, Table<MySettingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.MY_SETTING</code> table reference
     */
    public MySetting(String alias) {
        this(DSL.name(alias), MY_SETTING);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.MY_SETTING</code> table reference
     */
    public MySetting(Name alias) {
        this(alias, MY_SETTING);
    }

    /**
     * Create a <code>DB_ETERNAL.MY_SETTING</code> table reference
     */
    public MySetting() {
        this(DSL.name("MY_SETTING"), null);
    }

    public <O extends Record> MySetting(Table<O> child, ForeignKey<O, MySettingRecord> key) {
        super(child, key, MY_SETTING);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MySettingRecord> getRecordType() {
        return MySettingRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<MySettingRecord> getPrimaryKey() {
        return Keys.KEY_MY_SETTING_PRIMARY;
    }

    @Override
    public List<UniqueKey<MySettingRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MY_SETTING_TYPE);
    }

    @Override
    public MySetting as(String alias) {
        return new MySetting(DSL.name(alias), this);
    }

    @Override
    public MySetting as(Name alias) {
        return new MySetting(alias, this);
    }

    @Override
    public MySetting as(Table<?> alias) {
        return new MySetting(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MySetting rename(String name) {
        return new MySetting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MySetting rename(Name name) {
        return new MySetting(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MySetting rename(Table<?> name) {
        return new MySetting(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<String, String, String, String, String, Boolean, Boolean, Boolean, Boolean, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row22) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function22<? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? super Boolean, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function22<? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? super Boolean, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
