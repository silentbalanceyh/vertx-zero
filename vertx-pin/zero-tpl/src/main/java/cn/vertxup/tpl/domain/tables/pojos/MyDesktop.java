/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.tpl.domain.tables.pojos;


import cn.vertxup.tpl.domain.tables.interfaces.IMyDesktop;
import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MyDesktop implements VertxPojo, IMyDesktop {

    private static final long serialVersionUID = 1L;

    private String key;
    private String bagId;
    private String uiConfig;
    private String uiGrid;
    private String owner;
    private String ownerType;
    private Boolean active;
    private String sigma;
    private String metadata;
    private String language;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public MyDesktop() {}

    public MyDesktop(IMyDesktop value) {
        this.key = value.getKey();
        this.bagId = value.getBagId();
        this.uiConfig = value.getUiConfig();
        this.uiGrid = value.getUiGrid();
        this.owner = value.getOwner();
        this.ownerType = value.getOwnerType();
        this.active = value.getActive();
        this.sigma = value.getSigma();
        this.metadata = value.getMetadata();
        this.language = value.getLanguage();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public MyDesktop(
        String key,
        String bagId,
        String uiConfig,
        String uiGrid,
        String owner,
        String ownerType,
        Boolean active,
        String sigma,
        String metadata,
        String language,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.bagId = bagId;
        this.uiConfig = uiConfig;
        this.uiGrid = uiGrid;
        this.owner = owner;
        this.ownerType = ownerType;
        this.active = active;
        this.sigma = sigma;
        this.metadata = metadata;
        this.language = language;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public MyDesktop(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.MY_DESKTOP.KEY</code>. 「key」- 个人工作台
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.MY_DESKTOP.KEY</code>. 「key」- 个人工作台
     */
    @Override
    public MyDesktop setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.MY_DESKTOP.BAG_ID</code>. 「bagId」- 所属个人应用
     */
    @Override
    public String getBagId() {
        return this.bagId;
    }

    /**
     * Setter for <code>DB_ETERNAL.MY_DESKTOP.BAG_ID</code>. 「bagId」- 所属个人应用
     */
    @Override
    public MyDesktop setBagId(String bagId) {
        this.bagId = bagId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.MY_DESKTOP.UI_CONFIG</code>. 「uiConfig」-
     * 看板专用配置
     */
    @Override
    public String getUiConfig() {
        return this.uiConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.MY_DESKTOP.UI_CONFIG</code>. 「uiConfig」-
     * 看板专用配置
     */
    @Override
    public MyDesktop setUiConfig(String uiConfig) {
        this.uiConfig = uiConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.MY_DESKTOP.UI_GRID</code>. 「uiGrid」- 看板布局配置
     */
    @Override
    public String getUiGrid() {
        return this.uiGrid;
    }

    /**
     * Setter for <code>DB_ETERNAL.MY_DESKTOP.UI_GRID</code>. 「uiGrid」- 看板布局配置
     */
    @Override
    public MyDesktop setUiGrid(String uiGrid) {
        this.uiGrid = uiGrid;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.MY_DESKTOP.OWNER</code>. 「owner」- 拥有者ID，我的 /
     * 角色级
     */
    @Override
    public String getOwner() {
        return this.owner;
    }

    /**
     * Setter for <code>DB_ETERNAL.MY_DESKTOP.OWNER</code>. 「owner」- 拥有者ID，我的 /
     * 角色级
     */
    @Override
    public MyDesktop setOwner(String owner) {
        this.owner = owner;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.MY_DESKTOP.OWNER_TYPE</code>. 「ownerType」-
     * ROLE 角色，USER 用户
     */
    @Override
    public String getOwnerType() {
        return this.ownerType;
    }

    /**
     * Setter for <code>DB_ETERNAL.MY_DESKTOP.OWNER_TYPE</code>. 「ownerType」-
     * ROLE 角色，USER 用户
     */
    @Override
    public MyDesktop setOwnerType(String ownerType) {
        this.ownerType = ownerType;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.MY_DESKTOP.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.MY_DESKTOP.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public MyDesktop setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.MY_DESKTOP.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.MY_DESKTOP.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public MyDesktop setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.MY_DESKTOP.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.MY_DESKTOP.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public MyDesktop setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.MY_DESKTOP.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.MY_DESKTOP.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public MyDesktop setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.MY_DESKTOP.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.MY_DESKTOP.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public MyDesktop setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.MY_DESKTOP.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.MY_DESKTOP.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public MyDesktop setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.MY_DESKTOP.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.MY_DESKTOP.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public MyDesktop setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.MY_DESKTOP.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.MY_DESKTOP.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public MyDesktop setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final MyDesktop other = (MyDesktop) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        }
        else if (!this.key.equals(other.key))
            return false;
        if (this.bagId == null) {
            if (other.bagId != null)
                return false;
        }
        else if (!this.bagId.equals(other.bagId))
            return false;
        if (this.uiConfig == null) {
            if (other.uiConfig != null)
                return false;
        }
        else if (!this.uiConfig.equals(other.uiConfig))
            return false;
        if (this.uiGrid == null) {
            if (other.uiGrid != null)
                return false;
        }
        else if (!this.uiGrid.equals(other.uiGrid))
            return false;
        if (this.owner == null) {
            if (other.owner != null)
                return false;
        }
        else if (!this.owner.equals(other.owner))
            return false;
        if (this.ownerType == null) {
            if (other.ownerType != null)
                return false;
        }
        else if (!this.ownerType.equals(other.ownerType))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        }
        else if (!this.active.equals(other.active))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        }
        else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        }
        else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        }
        else if (!this.language.equals(other.language))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.bagId == null) ? 0 : this.bagId.hashCode());
        result = prime * result + ((this.uiConfig == null) ? 0 : this.uiConfig.hashCode());
        result = prime * result + ((this.uiGrid == null) ? 0 : this.uiGrid.hashCode());
        result = prime * result + ((this.owner == null) ? 0 : this.owner.hashCode());
        result = prime * result + ((this.ownerType == null) ? 0 : this.ownerType.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("MyDesktop (");

        sb.append(key);
        sb.append(", ").append(bagId);
        sb.append(", ").append(uiConfig);
        sb.append(", ").append(uiGrid);
        sb.append(", ").append(owner);
        sb.append(", ").append(ownerType);
        sb.append(", ").append(active);
        sb.append(", ").append(sigma);
        sb.append(", ").append(metadata);
        sb.append(", ").append(language);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IMyDesktop from) {
        setKey(from.getKey());
        setBagId(from.getBagId());
        setUiConfig(from.getUiConfig());
        setUiGrid(from.getUiGrid());
        setOwner(from.getOwner());
        setOwnerType(from.getOwnerType());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IMyDesktop> E into(E into) {
        into.from(this);
        return into;
    }
}
