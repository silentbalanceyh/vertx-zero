/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.tpl.domain.tables;


import cn.vertxup.tpl.domain.Db;
import cn.vertxup.tpl.domain.Keys;
import cn.vertxup.tpl.domain.tables.records.MyFavorRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MyFavor extends TableImpl<MyFavorRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.MY_FAVOR</code>
     */
    public static final MyFavor MY_FAVOR = new MyFavor();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.KEY</code>. 「key」- 个人应用主键
     */
    public final TableField<MyFavorRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 个人应用主键");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.OWNER</code>. 「owner」- 拥有者ID，我的 /
     * 角色级
     */
    public final TableField<MyFavorRecord, String> OWNER = createField(DSL.name("OWNER"), SQLDataType.VARCHAR(36), this, "「owner」- 拥有者ID，我的 / 角色级");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.OWNER_TYPE</code>. 「ownerType」- ROLE
     * 角色，USER 用户
     */
    public final TableField<MyFavorRecord, String> OWNER_TYPE = createField(DSL.name("OWNER_TYPE"), SQLDataType.VARCHAR(5), this, "「ownerType」- ROLE 角色，USER 用户");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.UI_SORT</code>. 「uiSort」- 模块排序
     */
    public final TableField<MyFavorRecord, Long> UI_SORT = createField(DSL.name("UI_SORT"), SQLDataType.BIGINT, this, "「uiSort」- 模块排序");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.TYPE</code>. 「type」- 类型（默认全站）
     */
    public final TableField<MyFavorRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(32), this, "「type」- 类型（默认全站）");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.POSITION</code>. 「position」-
     * 位置（默认左侧）
     */
    public final TableField<MyFavorRecord, String> POSITION = createField(DSL.name("POSITION"), SQLDataType.VARCHAR(16), this, "「position」- 位置（默认左侧）");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.URI_KEY</code>. 「uriKey」- URI
     * KEY（加密长度）
     */
    public final TableField<MyFavorRecord, String> URI_KEY = createField(DSL.name("URI_KEY"), SQLDataType.VARCHAR(36), this, "「uriKey」- URI KEY（加密长度）");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.URI_FULL</code>. 「uriFull」-
     * 收藏完整链接地址（带参数部分）
     */
    public final TableField<MyFavorRecord, String> URI_FULL = createField(DSL.name("URI_FULL"), SQLDataType.CLOB, this, "「uriFull」- 收藏完整链接地址（带参数部分）");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.URI</code>. 「uri」- 收藏地址
     */
    public final TableField<MyFavorRecord, String> URI = createField(DSL.name("URI"), SQLDataType.CLOB, this, "「uri」- 收藏地址");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.URI_PARAM</code>. 「uriParam」-
     * 该收藏参数（收藏夹专用）
     */
    public final TableField<MyFavorRecord, String> URI_PARAM = createField(DSL.name("URI_PARAM"), SQLDataType.CLOB, this, "「uriParam」- 该收藏参数（收藏夹专用）");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<MyFavorRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<MyFavorRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<MyFavorRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<MyFavorRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<MyFavorRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<MyFavorRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<MyFavorRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.MY_FAVOR.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<MyFavorRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private MyFavor(Name alias, Table<MyFavorRecord> aliased) {
        this(alias, aliased, null);
    }

    private MyFavor(Name alias, Table<MyFavorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.MY_FAVOR</code> table reference
     */
    public MyFavor(String alias) {
        this(DSL.name(alias), MY_FAVOR);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.MY_FAVOR</code> table reference
     */
    public MyFavor(Name alias) {
        this(alias, MY_FAVOR);
    }

    /**
     * Create a <code>DB_ETERNAL.MY_FAVOR</code> table reference
     */
    public MyFavor() {
        this(DSL.name("MY_FAVOR"), null);
    }

    public <O extends Record> MyFavor(Table<O> child, ForeignKey<O, MyFavorRecord> key) {
        super(child, key, MY_FAVOR);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MyFavorRecord> getRecordType() {
        return MyFavorRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<MyFavorRecord> getPrimaryKey() {
        return Keys.KEY_MY_FAVOR_PRIMARY;
    }

    @Override
    public List<UniqueKey<MyFavorRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MY_FAVOR_OWNER_TYPE);
    }

    @Override
    public MyFavor as(String alias) {
        return new MyFavor(DSL.name(alias), this);
    }

    @Override
    public MyFavor as(Name alias) {
        return new MyFavor(alias, this);
    }

    @Override
    public MyFavor as(Table<?> alias) {
        return new MyFavor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MyFavor rename(String name) {
        return new MyFavor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MyFavor rename(Name name) {
        return new MyFavor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MyFavor rename(Table<?> name) {
        return new MyFavor(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<String, String, String, Long, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function18<? super String, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function18<? super String, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
