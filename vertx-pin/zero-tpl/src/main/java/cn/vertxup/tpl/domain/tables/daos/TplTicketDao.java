/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.tpl.domain.tables.daos;


import cn.vertxup.tpl.domain.tables.TplTicket;
import cn.vertxup.tpl.domain.tables.records.TplTicketRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TplTicketDao extends AbstractVertxDAO<TplTicketRecord, cn.vertxup.tpl.domain.tables.pojos.TplTicket, String, Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>>, Future<cn.vertxup.tpl.domain.tables.pojos.TplTicket>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<TplTicketRecord,cn.vertxup.tpl.domain.tables.pojos.TplTicket,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public TplTicketDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(TplTicket.TPL_TICKET, cn.vertxup.tpl.domain.tables.pojos.TplTicket.class, new JDBCClassicQueryExecutor<TplTicketRecord,cn.vertxup.tpl.domain.tables.pojos.TplTicket,String>(configuration,cn.vertxup.tpl.domain.tables.pojos.TplTicket.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.tpl.domain.tables.pojos.TplTicket object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByCode(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByName(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>DESCRIPTION IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByDescription(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.DESCRIPTION.in(values));
        }

        /**
     * Find records that have <code>DESCRIPTION IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByDescription(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.DESCRIPTION.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByType(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByStatus(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.STATUS.in(values));
        }

        /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByStatus(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.STATUS.in(values),limit);
        }

        /**
     * Find records that have <code>SYSTEM IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyBySystem(Collection<Boolean> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.SYSTEM.in(values));
        }

        /**
     * Find records that have <code>SYSTEM IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyBySystem(Collection<Boolean> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.SYSTEM.in(values),limit);
        }

        /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByModelId(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.MODEL_ID.in(values));
        }

        /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByModelId(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.MODEL_ID.in(values),limit);
        }

        /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByModelKey(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.MODEL_KEY.in(values));
        }

        /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByModelKey(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.MODEL_KEY.in(values),limit);
        }

        /**
     * Find records that have <code>MODEL_CATEGORY IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByModelCategory(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.MODEL_CATEGORY.in(values));
        }

        /**
     * Find records that have <code>MODEL_CATEGORY IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByModelCategory(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.MODEL_CATEGORY.in(values),limit);
        }

        /**
     * Find records that have <code>RECORD_JSON IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByRecordJson(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.RECORD_JSON.in(values));
        }

        /**
     * Find records that have <code>RECORD_JSON IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByRecordJson(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.RECORD_JSON.in(values),limit);
        }

        /**
     * Find records that have <code>RECORD_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByRecordComponent(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.RECORD_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>RECORD_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByRecordComponent(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.RECORD_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>UI_CONFIG IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByUiConfig(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.UI_CONFIG.in(values));
        }

        /**
     * Find records that have <code>UI_CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByUiConfig(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.UI_CONFIG.in(values),limit);
        }

        /**
     * Find records that have <code>UI_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByUiComponent(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.UI_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>UI_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByUiComponent(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.UI_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(TplTicket.TPL_TICKET.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.TplTicket>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(TplTicket.TPL_TICKET.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<TplTicketRecord,cn.vertxup.tpl.domain.tables.pojos.TplTicket,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<TplTicketRecord,cn.vertxup.tpl.domain.tables.pojos.TplTicket,String>) super.queryExecutor();
        }
}
