/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.tpl.domain.tables;


import cn.vertxup.tpl.domain.Db;
import cn.vertxup.tpl.domain.Keys;
import cn.vertxup.tpl.domain.tables.records.MyTplRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MyTpl extends TableImpl<MyTplRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.MY_TPL</code>
     */
    public static final MyTpl MY_TPL = new MyTpl();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.MY_TPL.KEY</code>. 「key」- 个人设置主键
     */
    public final TableField<MyTplRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 个人设置主键");
    /**
     * The column <code>DB_ETERNAL.MY_TPL.TPL_ID</code>. 「tplId」- 对应TPL的ID
     */
    public final TableField<MyTplRecord, String> TPL_ID = createField(DSL.name("TPL_ID"), SQLDataType.VARCHAR(36), this, "「tplId」- 对应TPL的ID");
    /**
     * The column <code>DB_ETERNAL.MY_TPL.TPL_TYPE</code>. 「tplType」- 对应TPL类型
     */
    public final TableField<MyTplRecord, String> TPL_TYPE = createField(DSL.name("TPL_TYPE"), SQLDataType.VARCHAR(36), this, "「tplType」- 对应TPL类型");
    /**
     * The column <code>DB_ETERNAL.MY_TPL.OWNER</code>. 「owner」- 拥有者ID，我的 / 角色级
     */
    public final TableField<MyTplRecord, String> OWNER = createField(DSL.name("OWNER"), SQLDataType.VARCHAR(36), this, "「owner」- 拥有者ID，我的 / 角色级");
    /**
     * The column <code>DB_ETERNAL.MY_TPL.OWNER_TYPE</code>. 「ownerType」- ROLE
     * 角色，USER 用户
     */
    public final TableField<MyTplRecord, String> OWNER_TYPE = createField(DSL.name("OWNER_TYPE"), SQLDataType.VARCHAR(5), this, "「ownerType」- ROLE 角色，USER 用户");
    /**
     * The column <code>DB_ETERNAL.MY_TPL.TYPE</code>. 「type」- 类型（默认全站）
     */
    public final TableField<MyTplRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(32), this, "「type」- 类型（默认全站）");
    /**
     * The column <code>DB_ETERNAL.MY_TPL.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<MyTplRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.MY_TPL.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<MyTplRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.MY_TPL.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<MyTplRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.MY_TPL.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<MyTplRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.MY_TPL.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<MyTplRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.MY_TPL.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<MyTplRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.MY_TPL.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<MyTplRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.MY_TPL.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<MyTplRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private MyTpl(Name alias, Table<MyTplRecord> aliased) {
        this(alias, aliased, null);
    }

    private MyTpl(Name alias, Table<MyTplRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.MY_TPL</code> table reference
     */
    public MyTpl(String alias) {
        this(DSL.name(alias), MY_TPL);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.MY_TPL</code> table reference
     */
    public MyTpl(Name alias) {
        this(alias, MY_TPL);
    }

    /**
     * Create a <code>DB_ETERNAL.MY_TPL</code> table reference
     */
    public MyTpl() {
        this(DSL.name("MY_TPL"), null);
    }

    public <O extends Record> MyTpl(Table<O> child, ForeignKey<O, MyTplRecord> key) {
        super(child, key, MY_TPL);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MyTplRecord> getRecordType() {
        return MyTplRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<MyTplRecord> getPrimaryKey() {
        return Keys.KEY_MY_TPL_PRIMARY;
    }

    @Override
    public List<UniqueKey<MyTplRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MY_TPL_TYPE);
    }

    @Override
    public MyTpl as(String alias) {
        return new MyTpl(DSL.name(alias), this);
    }

    @Override
    public MyTpl as(Name alias) {
        return new MyTpl(alias, this);
    }

    @Override
    public MyTpl as(Table<?> alias) {
        return new MyTpl(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MyTpl rename(String name) {
        return new MyTpl(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MyTpl rename(Name name) {
        return new MyTpl(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MyTpl rename(Table<?> name) {
        return new MyTpl(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
