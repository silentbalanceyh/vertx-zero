/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.tpl.domain.tables.daos;


import cn.vertxup.tpl.domain.tables.MyBag;
import cn.vertxup.tpl.domain.tables.records.MyBagRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MyBagDao extends AbstractVertxDAO<MyBagRecord, cn.vertxup.tpl.domain.tables.pojos.MyBag, String, Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>>, Future<cn.vertxup.tpl.domain.tables.pojos.MyBag>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<MyBagRecord,cn.vertxup.tpl.domain.tables.pojos.MyBag,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public MyBagDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(MyBag.MY_BAG, cn.vertxup.tpl.domain.tables.pojos.MyBag.class, new JDBCClassicQueryExecutor<MyBagRecord,cn.vertxup.tpl.domain.tables.pojos.MyBag,String>(configuration,cn.vertxup.tpl.domain.tables.pojos.MyBag.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.tpl.domain.tables.pojos.MyBag object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>BAG_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByBagId(Collection<String> values) {
                return findManyByCondition(MyBag.MY_BAG.BAG_ID.in(values));
        }

        /**
     * Find records that have <code>BAG_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByBagId(Collection<String> values, int limit) {
                return findManyByCondition(MyBag.MY_BAG.BAG_ID.in(values),limit);
        }

        /**
     * Find records that have <code>OWNER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByOwner(Collection<String> values) {
                return findManyByCondition(MyBag.MY_BAG.OWNER.in(values));
        }

        /**
     * Find records that have <code>OWNER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByOwner(Collection<String> values, int limit) {
                return findManyByCondition(MyBag.MY_BAG.OWNER.in(values),limit);
        }

        /**
     * Find records that have <code>OWNER_TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByOwnerType(Collection<String> values) {
                return findManyByCondition(MyBag.MY_BAG.OWNER_TYPE.in(values));
        }

        /**
     * Find records that have <code>OWNER_TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByOwnerType(Collection<String> values, int limit) {
                return findManyByCondition(MyBag.MY_BAG.OWNER_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>UI_SORT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByUiSort(Collection<Long> values) {
                return findManyByCondition(MyBag.MY_BAG.UI_SORT.in(values));
        }

        /**
     * Find records that have <code>UI_SORT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByUiSort(Collection<Long> values, int limit) {
                return findManyByCondition(MyBag.MY_BAG.UI_SORT.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByType(Collection<String> values) {
                return findManyByCondition(MyBag.MY_BAG.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(MyBag.MY_BAG.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>POSITION IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByPosition(Collection<String> values) {
                return findManyByCondition(MyBag.MY_BAG.POSITION.in(values));
        }

        /**
     * Find records that have <code>POSITION IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByPosition(Collection<String> values, int limit) {
                return findManyByCondition(MyBag.MY_BAG.POSITION.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(MyBag.MY_BAG.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(MyBag.MY_BAG.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(MyBag.MY_BAG.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(MyBag.MY_BAG.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(MyBag.MY_BAG.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(MyBag.MY_BAG.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(MyBag.MY_BAG.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(MyBag.MY_BAG.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(MyBag.MY_BAG.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(MyBag.MY_BAG.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(MyBag.MY_BAG.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(MyBag.MY_BAG.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(MyBag.MY_BAG.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(MyBag.MY_BAG.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(MyBag.MY_BAG.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.tpl.domain.tables.pojos.MyBag>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(MyBag.MY_BAG.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<MyBagRecord,cn.vertxup.tpl.domain.tables.pojos.MyBag,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<MyBagRecord,cn.vertxup.tpl.domain.tables.pojos.MyBag,String>) super.queryExecutor();
        }
}
