/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.atom.domain.tables.daos;


import cn.vertxup.atom.domain.tables.MField;
import cn.vertxup.atom.domain.tables.records.MFieldRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MFieldDao extends AbstractVertxDAO<MFieldRecord, cn.vertxup.atom.domain.tables.pojos.MField, String, Future<List<cn.vertxup.atom.domain.tables.pojos.MField>>, Future<cn.vertxup.atom.domain.tables.pojos.MField>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<MFieldRecord,cn.vertxup.atom.domain.tables.pojos.MField,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     *      * @param vertx the vertx instance
     */
        public MFieldDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(MField.M_FIELD, cn.vertxup.atom.domain.tables.pojos.MField.class, new JDBCClassicQueryExecutor<MFieldRecord,cn.vertxup.atom.domain.tables.pojos.MField,String>(configuration,cn.vertxup.atom.domain.tables.pojos.MField.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.atom.domain.tables.pojos.MField object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByName(Collection<String> values) {
                return findManyByCondition(MField.M_FIELD.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(MField.M_FIELD.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByType(Collection<String> values) {
                return findManyByCondition(MField.M_FIELD.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(MField.M_FIELD.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>COLUMN_NAME IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByColumnName(Collection<String> values) {
                return findManyByCondition(MField.M_FIELD.COLUMN_NAME.in(values));
        }

        /**
     * Find records that have <code>COLUMN_NAME IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByColumnName(Collection<String> values, int limit) {
                return findManyByCondition(MField.M_FIELD.COLUMN_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>COLUMN_TYPE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByColumnType(Collection<String> values) {
                return findManyByCondition(MField.M_FIELD.COLUMN_TYPE.in(values));
        }

        /**
     * Find records that have <code>COLUMN_TYPE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByColumnType(Collection<String> values, int limit) {
                return findManyByCondition(MField.M_FIELD.COLUMN_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>IS_PRIMARY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByIsPrimary(Collection<Boolean> values) {
                return findManyByCondition(MField.M_FIELD.IS_PRIMARY.in(values));
        }

        /**
     * Find records that have <code>IS_PRIMARY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByIsPrimary(Collection<Boolean> values, int limit) {
                return findManyByCondition(MField.M_FIELD.IS_PRIMARY.in(values),limit);
        }

        /**
     * Find records that have <code>IS_NULLABLE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByIsNullable(Collection<Boolean> values) {
                return findManyByCondition(MField.M_FIELD.IS_NULLABLE.in(values));
        }

        /**
     * Find records that have <code>IS_NULLABLE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByIsNullable(Collection<Boolean> values, int limit) {
                return findManyByCondition(MField.M_FIELD.IS_NULLABLE.in(values),limit);
        }

        /**
     * Find records that have <code>LENGTH IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByLength(Collection<Integer> values) {
                return findManyByCondition(MField.M_FIELD.LENGTH.in(values));
        }

        /**
     * Find records that have <code>LENGTH IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByLength(Collection<Integer> values, int limit) {
                return findManyByCondition(MField.M_FIELD.LENGTH.in(values),limit);
        }

        /**
     * Find records that have <code>PRECISION IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByPrecision(Collection<Integer> values) {
                return findManyByCondition(MField.M_FIELD.PRECISION.in(values));
        }

        /**
     * Find records that have <code>PRECISION IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByPrecision(Collection<Integer> values, int limit) {
                return findManyByCondition(MField.M_FIELD.PRECISION.in(values),limit);
        }

        /**
     * Find records that have <code>FORMAT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByFormat(Collection<String> values) {
                return findManyByCondition(MField.M_FIELD.FORMAT.in(values));
        }

        /**
     * Find records that have <code>FORMAT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByFormat(Collection<String> values, int limit) {
                return findManyByCondition(MField.M_FIELD.FORMAT.in(values),limit);
        }

        /**
     * Find records that have <code>IN_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByInComponent(Collection<String> values) {
                return findManyByCondition(MField.M_FIELD.IN_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>IN_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByInComponent(Collection<String> values, int limit) {
                return findManyByCondition(MField.M_FIELD.IN_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>OUT_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByOutComponent(Collection<String> values) {
                return findManyByCondition(MField.M_FIELD.OUT_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>OUT_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByOutComponent(Collection<String> values, int limit) {
                return findManyByCondition(MField.M_FIELD.OUT_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>ENTITY_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByEntityId(Collection<String> values) {
                return findManyByCondition(MField.M_FIELD.ENTITY_ID.in(values));
        }

        /**
     * Find records that have <code>ENTITY_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByEntityId(Collection<String> values, int limit) {
                return findManyByCondition(MField.M_FIELD.ENTITY_ID.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENTS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByComments(Collection<String> values) {
                return findManyByCondition(MField.M_FIELD.COMMENTS.in(values));
        }

        /**
     * Find records that have <code>COMMENTS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByComments(Collection<String> values, int limit) {
                return findManyByCondition(MField.M_FIELD.COMMENTS.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(MField.M_FIELD.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(MField.M_FIELD.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(MField.M_FIELD.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(MField.M_FIELD.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(MField.M_FIELD.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(MField.M_FIELD.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(MField.M_FIELD.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(MField.M_FIELD.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(MField.M_FIELD.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(MField.M_FIELD.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(MField.M_FIELD.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(MField.M_FIELD.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(MField.M_FIELD.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(MField.M_FIELD.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(MField.M_FIELD.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MField>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(MField.M_FIELD.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<MFieldRecord,cn.vertxup.atom.domain.tables.pojos.MField,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<MFieldRecord,cn.vertxup.atom.domain.tables.pojos.MField,String>) super.queryExecutor();
        }
}
