/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.atom.domain.tables.daos;


import cn.vertxup.atom.domain.tables.MTpl;
import cn.vertxup.atom.domain.tables.records.MTplRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MTplDao extends AbstractVertxDAO<MTplRecord, cn.vertxup.atom.domain.tables.pojos.MTpl, String, Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>>, Future<cn.vertxup.atom.domain.tables.pojos.MTpl>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<MTplRecord,cn.vertxup.atom.domain.tables.pojos.MTpl,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public MTplDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(MTpl.M_TPL, cn.vertxup.atom.domain.tables.pojos.MTpl.class, new JDBCClassicQueryExecutor<MTplRecord,cn.vertxup.atom.domain.tables.pojos.MTpl,String>(configuration,cn.vertxup.atom.domain.tables.pojos.MTpl.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.atom.domain.tables.pojos.MTpl object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByName(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByCode(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByType(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>TPL_CATEGORY IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplCategory(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.TPL_CATEGORY.in(values));
        }

        /**
     * Find records that have <code>TPL_CATEGORY IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplCategory(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.TPL_CATEGORY.in(values),limit);
        }

        /**
     * Find records that have <code>TPL_INTEGRATION IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplIntegration(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.TPL_INTEGRATION.in(values));
        }

        /**
     * Find records that have <code>TPL_INTEGRATION IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplIntegration(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.TPL_INTEGRATION.in(values),limit);
        }

        /**
     * Find records that have <code>TPL_ACL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplAcl(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.TPL_ACL.in(values));
        }

        /**
     * Find records that have <code>TPL_ACL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplAcl(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.TPL_ACL.in(values),limit);
        }

        /**
     * Find records that have <code>TPL_ACL_VISIT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplAclVisit(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.TPL_ACL_VISIT.in(values));
        }

        /**
     * Find records that have <code>TPL_ACL_VISIT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplAclVisit(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.TPL_ACL_VISIT.in(values),limit);
        }

        /**
     * Find records that have <code>TPL_MODEL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplModel(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.TPL_MODEL.in(values));
        }

        /**
     * Find records that have <code>TPL_MODEL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplModel(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.TPL_MODEL.in(values),limit);
        }

        /**
     * Find records that have <code>TPL_ENTITY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplEntity(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.TPL_ENTITY.in(values));
        }

        /**
     * Find records that have <code>TPL_ENTITY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplEntity(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.TPL_ENTITY.in(values),limit);
        }

        /**
     * Find records that have <code>TPL_API IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplApi(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.TPL_API.in(values));
        }

        /**
     * Find records that have <code>TPL_API IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplApi(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.TPL_API.in(values),limit);
        }

        /**
     * Find records that have <code>TPL_JOB IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplJob(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.TPL_JOB.in(values));
        }

        /**
     * Find records that have <code>TPL_JOB IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplJob(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.TPL_JOB.in(values),limit);
        }

        /**
     * Find records that have <code>TPL_UI IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplUi(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.TPL_UI.in(values));
        }

        /**
     * Find records that have <code>TPL_UI IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplUi(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.TPL_UI.in(values),limit);
        }

        /**
     * Find records that have <code>TPL_UI_LIST IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplUiList(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.TPL_UI_LIST.in(values));
        }

        /**
     * Find records that have <code>TPL_UI_LIST IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplUiList(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.TPL_UI_LIST.in(values),limit);
        }

        /**
     * Find records that have <code>TPL_UI_FORM IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplUiForm(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.TPL_UI_FORM.in(values));
        }

        /**
     * Find records that have <code>TPL_UI_FORM IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByTplUiForm(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.TPL_UI_FORM.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(MTpl.M_TPL.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(MTpl.M_TPL.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(MTpl.M_TPL.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(MTpl.M_TPL.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(MTpl.M_TPL.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<MTplRecord,cn.vertxup.atom.domain.tables.pojos.MTpl,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<MTplRecord,cn.vertxup.atom.domain.tables.pojos.MTpl,String>) super.queryExecutor();
        }
}
