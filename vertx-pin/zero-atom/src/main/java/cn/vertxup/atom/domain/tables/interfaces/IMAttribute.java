/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.atom.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;

import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.setOrThrow;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IMAttribute extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.KEY</code>. 「key」- 属性ID
     */
    public IMAttribute setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.KEY</code>. 「key」- 属性ID
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.NAME</code>. 「name」- 属性名称
     */
    public IMAttribute setName(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.NAME</code>. 「name」- 属性名称
     */
    public String getName();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.ALIAS</code>. 「alias」- 属性别名（业务名）
     */
    public IMAttribute setAlias(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.ALIAS</code>. 「alias」- 属性别名（业务名）
     */
    public String getAlias();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.TYPE</code>. 「type」-
     * INTERNAL/EXTERNAL/REFERENCE属性
     */
    public IMAttribute setType(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.TYPE</code>. 「type」-
     * INTERNAL/EXTERNAL/REFERENCE属性
     */
    public String getType();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.EXPRESSION</code>. 「expression」-
     * 表达式
     */
    public IMAttribute setExpression(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.EXPRESSION</code>. 「expression」-
     * 表达式
     */
    public String getExpression();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.NORMALIZE</code>. 「normalize」-
     * 表达式
     */
    public IMAttribute setNormalize(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.NORMALIZE</code>. 「normalize」-
     * 表达式
     */
    public String getNormalize();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IN_COMPONENT</code>.
     * 「inComponent」- 写入插件
     */
    public IMAttribute setInComponent(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IN_COMPONENT</code>.
     * 「inComponent」- 写入插件
     */
    public String getInComponent();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.OUT_COMPONENT</code>.
     * 「outComponent」- 读取插件
     */
    public IMAttribute setOutComponent(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.OUT_COMPONENT</code>.
     * 「outComponent」- 读取插件
     */
    public String getOutComponent();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.MODEL_ID</code>. 「modelId」-
     * 关联的模型ID
     */
    public IMAttribute setModelId(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.MODEL_ID</code>. 「modelId」-
     * 关联的模型ID
     */
    public String getModelId();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.COMMENTS</code>. 「comments」-
     * 当前属性的描述信息
     */
    public IMAttribute setComments(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.COMMENTS</code>. 「comments」-
     * 当前属性的描述信息
     */
    public String getComments();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE</code>. 「source」- 关联实体ID
     */
    public IMAttribute setSource(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE</code>. 「source」- 关联实体ID
     */
    public String getSource();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_FIELD</code>.
     * 「sourceField」- 可选，如果不设置则以name为主
     */
    public IMAttribute setSourceField(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_FIELD</code>.
     * 「sourceField」- 可选，如果不设置则以name为主
     */
    public String getSourceField();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_CONFIG</code>.
     * 「sourceConfig」- 数据集配置（区分 Array 和 Object）
     */
    public IMAttribute setSourceConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_CONFIG</code>.
     * 「sourceConfig」- 数据集配置（区分 Array 和 Object）
     */
    public String getSourceConfig();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_REFERENCE</code>.
     * 「sourceReference」- 引用配置信息（ type = REFERENCE）
     */
    public IMAttribute setSourceReference(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_REFERENCE</code>.
     * 「sourceReference」- 引用配置信息（ type = REFERENCE）
     */
    public String getSourceReference();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_EXTERNAL</code>.
     * 「sourceExternal」- 外部配置信息（ type = EXTERNAL ）
     */
    public IMAttribute setSourceExternal(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_EXTERNAL</code>.
     * 「sourceExternal」- 外部配置信息（ type = EXTERNAL ）
     */
    public String getSourceExternal();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_ARRAY</code>. 「isArray」-
     * 是否集合属性，集合属性在导入导出时可用（保留）
     */
    public IMAttribute setIsArray(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_ARRAY</code>. 「isArray」-
     * 是否集合属性，集合属性在导入导出时可用（保留）
     */
    public Boolean getIsArray();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_REFER</code>. 「isRefer」-
     * 是否引用属性的主属性，主属性才可拥有 sourceReference 配置，根据 source 有区别
     */
    public IMAttribute setIsRefer(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_REFER</code>. 「isRefer」-
     * 是否引用属性的主属性，主属性才可拥有 sourceReference 配置，根据 source 有区别
     */
    public Boolean getIsRefer();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_SYNC_IN</code>. 「isSyncIn」-
     * 是否同步读
     */
    public IMAttribute setIsSyncIn(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_SYNC_IN</code>. 「isSyncIn」-
     * 是否同步读
     */
    public Boolean getIsSyncIn();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_SYNC_OUT</code>. 「isSyncOut」-
     * 是否同步写
     */
    public IMAttribute setIsSyncOut(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_SYNC_OUT</code>. 「isSyncOut」-
     * 是否同步写
     */
    public Boolean getIsSyncOut();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_LOCK</code>. 「isLock」-
     * 是否锁定，锁定属性不可删除
     */
    public IMAttribute setIsLock(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_LOCK</code>. 「isLock」-
     * 是否锁定，锁定属性不可删除
     */
    public Boolean getIsLock();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_TRACK</code>. 「isTrack」-
     * 是否实现历史记录，如果是 isTrack 那么启用 ACTIVITY 的变更记录，对应 ITEM
     */
    public IMAttribute setIsTrack(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_TRACK</code>. 「isTrack」-
     * 是否实现历史记录，如果是 isTrack 那么启用 ACTIVITY 的变更记录，对应 ITEM
     */
    public Boolean getIsTrack();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_CONFIRM</code>. 「isConfirm」-
     * 是否生成待确认变更，只有放在待确认变更中的数据需要生成待确认变更
     */
    public IMAttribute setIsConfirm(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_CONFIRM</code>. 「isConfirm」-
     * 是否生成待确认变更，只有放在待确认变更中的数据需要生成待确认变更
     */
    public Boolean getIsConfirm();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.SIGMA</code>. 「sigma」- 统一标识
     */
    public IMAttribute setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public IMAttribute setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.ACTIVE</code>. 「active」- 是否启用
     */
    public IMAttribute setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    public IMAttribute setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public IMAttribute setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public IMAttribute setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public IMAttribute setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public IMAttribute setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IMAttribute
     */
    public void from(IMAttribute from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IMAttribute
     */
    public <E extends IMAttribute> E into(E into);

        @Override
        public default IMAttribute fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setName,json::getString,"NAME","java.lang.String");
                setOrThrow(this::setAlias,json::getString,"ALIAS","java.lang.String");
                setOrThrow(this::setType,json::getString,"TYPE","java.lang.String");
                setOrThrow(this::setExpression,json::getString,"EXPRESSION","java.lang.String");
                setOrThrow(this::setNormalize,json::getString,"NORMALIZE","java.lang.String");
                setOrThrow(this::setInComponent,json::getString,"IN_COMPONENT","java.lang.String");
                setOrThrow(this::setOutComponent,json::getString,"OUT_COMPONENT","java.lang.String");
                setOrThrow(this::setModelId,json::getString,"MODEL_ID","java.lang.String");
                setOrThrow(this::setComments,json::getString,"COMMENTS","java.lang.String");
                setOrThrow(this::setSource,json::getString,"SOURCE","java.lang.String");
                setOrThrow(this::setSourceField,json::getString,"SOURCE_FIELD","java.lang.String");
                setOrThrow(this::setSourceConfig,json::getString,"SOURCE_CONFIG","java.lang.String");
                setOrThrow(this::setSourceReference,json::getString,"SOURCE_REFERENCE","java.lang.String");
                setOrThrow(this::setSourceExternal,json::getString,"SOURCE_EXTERNAL","java.lang.String");
                setOrThrow(this::setIsArray,json::getBoolean,"IS_ARRAY","java.lang.Boolean");
                setOrThrow(this::setIsRefer,json::getBoolean,"IS_REFER","java.lang.Boolean");
                setOrThrow(this::setIsSyncIn,json::getBoolean,"IS_SYNC_IN","java.lang.Boolean");
                setOrThrow(this::setIsSyncOut,json::getBoolean,"IS_SYNC_OUT","java.lang.Boolean");
                setOrThrow(this::setIsLock,json::getBoolean,"IS_LOCK","java.lang.Boolean");
                setOrThrow(this::setIsTrack,json::getBoolean,"IS_TRACK","java.lang.Boolean");
                setOrThrow(this::setIsConfirm,json::getBoolean,"IS_CONFIRM","java.lang.Boolean");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                setOrThrow(this::setUpdatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"UPDATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setUpdatedBy,json::getString,"UPDATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("NAME",getName());
                json.put("ALIAS",getAlias());
                json.put("TYPE",getType());
                json.put("EXPRESSION",getExpression());
                json.put("NORMALIZE",getNormalize());
                json.put("IN_COMPONENT",getInComponent());
                json.put("OUT_COMPONENT",getOutComponent());
                json.put("MODEL_ID",getModelId());
                json.put("COMMENTS",getComments());
                json.put("SOURCE",getSource());
                json.put("SOURCE_FIELD",getSourceField());
                json.put("SOURCE_CONFIG",getSourceConfig());
                json.put("SOURCE_REFERENCE",getSourceReference());
                json.put("SOURCE_EXTERNAL",getSourceExternal());
                json.put("IS_ARRAY",getIsArray());
                json.put("IS_REFER",getIsRefer());
                json.put("IS_SYNC_IN",getIsSyncIn());
                json.put("IS_SYNC_OUT",getIsSyncOut());
                json.put("IS_LOCK",getIsLock());
                json.put("IS_TRACK",getIsTrack());
                json.put("IS_CONFIRM",getIsConfirm());
                json.put("SIGMA",getSigma());
                json.put("LANGUAGE",getLanguage());
                json.put("ACTIVE",getActive());
                json.put("METADATA",getMetadata());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                json.put("UPDATED_AT",getUpdatedAt()==null?null:getUpdatedAt().toString());
                json.put("UPDATED_BY",getUpdatedBy());
                return json;
        }

}
