/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.atom.domain.tables.records;


import cn.vertxup.atom.domain.tables.MEntity;
import cn.vertxup.atom.domain.tables.interfaces.IMEntity;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record15;
import org.jooq.Row15;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MEntityRecord extends UpdatableRecordImpl<MEntityRecord> implements VertxPojo, Record15<String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String>, IMEntity {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.KEY</code>. 「key」- 实体ID
     */
    @Override
    public MEntityRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.KEY</code>. 「key」- 实体ID
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.IDENTIFIER</code>. 「identifier」-
     * 当前实体全局唯一ID
     */
    @Override
    public MEntityRecord setIdentifier(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.IDENTIFIER</code>. 「identifier」-
     * 当前实体全局唯一ID
     */
    @Override
    public String getIdentifier() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.NAMESPACE</code>. 「namespace」-
     * 当前实体使用的名空间
     */
    @Override
    public MEntityRecord setNamespace(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.NAMESPACE</code>. 「namespace」-
     * 当前实体使用的名空间
     */
    @Override
    public String getNamespace() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.NAME</code>. 「name」- 当前实体的名称
     */
    @Override
    public MEntityRecord setName(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.NAME</code>. 「name」- 当前实体的名称
     */
    @Override
    public String getName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.TYPE</code>. 「type」-
     * 实体类型：ENTITY/RELATION
     */
    @Override
    public MEntityRecord setType(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.TYPE</code>. 「type」-
     * 实体类型：ENTITY/RELATION
     */
    @Override
    public String getType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.TABLE_NAME</code>. 「tableName」-
     * 实体对应的数据库表
     */
    @Override
    public MEntityRecord setTableName(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.TABLE_NAME</code>. 「tableName」-
     * 实体对应的数据库表
     */
    @Override
    public String getTableName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.COMMENTS</code>. 「comments」- 数据库表备注
     */
    @Override
    public MEntityRecord setComments(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.COMMENTS</code>. 「comments」- 数据库表备注
     */
    @Override
    public String getComments() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public MEntityRecord setSigma(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public MEntityRecord setLanguage(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public MEntityRecord setActive(Boolean value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public MEntityRecord setMetadata(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public MEntityRecord setCreatedAt(LocalDateTime value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public MEntityRecord setCreatedBy(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public MEntityRecord setUpdatedAt(LocalDateTime value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ENTITY.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public MEntityRecord setUpdatedBy(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ENTITY.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(14);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record15 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    @Override
    public Row15<String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row15) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return MEntity.M_ENTITY.KEY;
    }

    @Override
    public Field<String> field2() {
        return MEntity.M_ENTITY.IDENTIFIER;
    }

    @Override
    public Field<String> field3() {
        return MEntity.M_ENTITY.NAMESPACE;
    }

    @Override
    public Field<String> field4() {
        return MEntity.M_ENTITY.NAME;
    }

    @Override
    public Field<String> field5() {
        return MEntity.M_ENTITY.TYPE;
    }

    @Override
    public Field<String> field6() {
        return MEntity.M_ENTITY.TABLE_NAME;
    }

    @Override
    public Field<String> field7() {
        return MEntity.M_ENTITY.COMMENTS;
    }

    @Override
    public Field<String> field8() {
        return MEntity.M_ENTITY.SIGMA;
    }

    @Override
    public Field<String> field9() {
        return MEntity.M_ENTITY.LANGUAGE;
    }

    @Override
    public Field<Boolean> field10() {
        return MEntity.M_ENTITY.ACTIVE;
    }

    @Override
    public Field<String> field11() {
        return MEntity.M_ENTITY.METADATA;
    }

    @Override
    public Field<LocalDateTime> field12() {
        return MEntity.M_ENTITY.CREATED_AT;
    }

    @Override
    public Field<String> field13() {
        return MEntity.M_ENTITY.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field14() {
        return MEntity.M_ENTITY.UPDATED_AT;
    }

    @Override
    public Field<String> field15() {
        return MEntity.M_ENTITY.UPDATED_BY;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getIdentifier();
    }

    @Override
    public String component3() {
        return getNamespace();
    }

    @Override
    public String component4() {
        return getName();
    }

    @Override
    public String component5() {
        return getType();
    }

    @Override
    public String component6() {
        return getTableName();
    }

    @Override
    public String component7() {
        return getComments();
    }

    @Override
    public String component8() {
        return getSigma();
    }

    @Override
    public String component9() {
        return getLanguage();
    }

    @Override
    public Boolean component10() {
        return getActive();
    }

    @Override
    public String component11() {
        return getMetadata();
    }

    @Override
    public LocalDateTime component12() {
        return getCreatedAt();
    }

    @Override
    public String component13() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component14() {
        return getUpdatedAt();
    }

    @Override
    public String component15() {
        return getUpdatedBy();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getIdentifier();
    }

    @Override
    public String value3() {
        return getNamespace();
    }

    @Override
    public String value4() {
        return getName();
    }

    @Override
    public String value5() {
        return getType();
    }

    @Override
    public String value6() {
        return getTableName();
    }

    @Override
    public String value7() {
        return getComments();
    }

    @Override
    public String value8() {
        return getSigma();
    }

    @Override
    public String value9() {
        return getLanguage();
    }

    @Override
    public Boolean value10() {
        return getActive();
    }

    @Override
    public String value11() {
        return getMetadata();
    }

    @Override
    public LocalDateTime value12() {
        return getCreatedAt();
    }

    @Override
    public String value13() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value14() {
        return getUpdatedAt();
    }

    @Override
    public String value15() {
        return getUpdatedBy();
    }

    @Override
    public MEntityRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public MEntityRecord value2(String value) {
        setIdentifier(value);
        return this;
    }

    @Override
    public MEntityRecord value3(String value) {
        setNamespace(value);
        return this;
    }

    @Override
    public MEntityRecord value4(String value) {
        setName(value);
        return this;
    }

    @Override
    public MEntityRecord value5(String value) {
        setType(value);
        return this;
    }

    @Override
    public MEntityRecord value6(String value) {
        setTableName(value);
        return this;
    }

    @Override
    public MEntityRecord value7(String value) {
        setComments(value);
        return this;
    }

    @Override
    public MEntityRecord value8(String value) {
        setSigma(value);
        return this;
    }

    @Override
    public MEntityRecord value9(String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public MEntityRecord value10(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public MEntityRecord value11(String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public MEntityRecord value12(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public MEntityRecord value13(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public MEntityRecord value14(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public MEntityRecord value15(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public MEntityRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, String value9, Boolean value10, String value11, LocalDateTime value12, String value13, LocalDateTime value14, String value15) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IMEntity from) {
        setKey(from.getKey());
        setIdentifier(from.getIdentifier());
        setNamespace(from.getNamespace());
        setName(from.getName());
        setType(from.getType());
        setTableName(from.getTableName());
        setComments(from.getComments());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IMEntity> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MEntityRecord
     */
    public MEntityRecord() {
        super(MEntity.M_ENTITY);
    }

    /**
     * Create a detached, initialised MEntityRecord
     */
    public MEntityRecord(String key, String identifier, String namespace, String name, String type, String tableName, String comments, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(MEntity.M_ENTITY);

        setKey(key);
        setIdentifier(identifier);
        setNamespace(namespace);
        setName(name);
        setType(type);
        setTableName(tableName);
        setComments(comments);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
    }

    /**
     * Create a detached, initialised MEntityRecord
     */
    public MEntityRecord(cn.vertxup.atom.domain.tables.pojos.MEntity value) {
        super(MEntity.M_ENTITY);

        if (value != null) {
            setKey(value.getKey());
            setIdentifier(value.getIdentifier());
            setNamespace(value.getNamespace());
            setName(value.getName());
            setType(value.getType());
            setTableName(value.getTableName());
            setComments(value.getComments());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
        }
    }

        public MEntityRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
