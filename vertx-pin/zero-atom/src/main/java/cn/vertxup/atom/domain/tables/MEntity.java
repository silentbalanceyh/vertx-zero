/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.atom.domain.tables;


import cn.vertxup.atom.domain.Db;
import cn.vertxup.atom.domain.Keys;
import cn.vertxup.atom.domain.tables.records.MEntityRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MEntity extends TableImpl<MEntityRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.M_ENTITY</code>
     */
    public static final MEntity M_ENTITY = new MEntity();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.M_ENTITY.KEY</code>. 「key」- 实体ID
     */
    public final TableField<MEntityRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 实体ID");
    /**
     * The column <code>DB_ETERNAL.M_ENTITY.IDENTIFIER</code>. 「identifier」-
     * 当前实体全局唯一ID
     */
    public final TableField<MEntityRecord, String> IDENTIFIER = createField(DSL.name("IDENTIFIER"), SQLDataType.VARCHAR(255), this, "「identifier」- 当前实体全局唯一ID");
    /**
     * The column <code>DB_ETERNAL.M_ENTITY.NAMESPACE</code>. 「namespace」-
     * 当前实体使用的名空间
     */
    public final TableField<MEntityRecord, String> NAMESPACE = createField(DSL.name("NAMESPACE"), SQLDataType.VARCHAR(255), this, "「namespace」- 当前实体使用的名空间");
    /**
     * The column <code>DB_ETERNAL.M_ENTITY.NAME</code>. 「name」- 当前实体的名称
     */
    public final TableField<MEntityRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 当前实体的名称");
    /**
     * The column <code>DB_ETERNAL.M_ENTITY.TYPE</code>. 「type」-
     * 实体类型：ENTITY/RELATION
     */
    public final TableField<MEntityRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(20), this, "「type」- 实体类型：ENTITY/RELATION");
    /**
     * The column <code>DB_ETERNAL.M_ENTITY.TABLE_NAME</code>. 「tableName」-
     * 实体对应的数据库表
     */
    public final TableField<MEntityRecord, String> TABLE_NAME = createField(DSL.name("TABLE_NAME"), SQLDataType.VARCHAR(255), this, "「tableName」- 实体对应的数据库表");
    /**
     * The column <code>DB_ETERNAL.M_ENTITY.COMMENTS</code>. 「comments」- 数据库表备注
     */
    public final TableField<MEntityRecord, String> COMMENTS = createField(DSL.name("COMMENTS"), SQLDataType.CLOB, this, "「comments」- 数据库表备注");
    /**
     * The column <code>DB_ETERNAL.M_ENTITY.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<MEntityRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.M_ENTITY.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<MEntityRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.M_ENTITY.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<MEntityRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.M_ENTITY.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<MEntityRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>DB_ETERNAL.M_ENTITY.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<MEntityRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.M_ENTITY.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<MEntityRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.M_ENTITY.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<MEntityRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.M_ENTITY.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<MEntityRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private MEntity(Name alias, Table<MEntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private MEntity(Name alias, Table<MEntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.M_ENTITY</code> table reference
     */
    public MEntity(String alias) {
        this(DSL.name(alias), M_ENTITY);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.M_ENTITY</code> table reference
     */
    public MEntity(Name alias) {
        this(alias, M_ENTITY);
    }

    /**
     * Create a <code>DB_ETERNAL.M_ENTITY</code> table reference
     */
    public MEntity() {
        this(DSL.name("M_ENTITY"), null);
    }

    public <O extends Record> MEntity(Table<O> child, ForeignKey<O, MEntityRecord> key) {
        super(child, key, M_ENTITY);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MEntityRecord> getRecordType() {
        return MEntityRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<MEntityRecord> getPrimaryKey() {
        return Keys.KEY_M_ENTITY_PRIMARY;
    }

    @Override
    public List<UniqueKey<MEntityRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_M_ENTITY_NAMESPACE, Keys.KEY_M_ENTITY_NAMESPACE_2, Keys.KEY_M_ENTITY_SIGMA);
    }

    @Override
    public MEntity as(String alias) {
        return new MEntity(DSL.name(alias), this);
    }

    @Override
    public MEntity as(Name alias) {
        return new MEntity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MEntity rename(String name) {
        return new MEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MEntity rename(Name name) {
        return new MEntity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
