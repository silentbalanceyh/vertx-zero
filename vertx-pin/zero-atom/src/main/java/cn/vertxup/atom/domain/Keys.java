/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.atom.domain;


import cn.vertxup.atom.domain.tables.MAcc;
import cn.vertxup.atom.domain.tables.MAttribute;
import cn.vertxup.atom.domain.tables.MEntity;
import cn.vertxup.atom.domain.tables.MField;
import cn.vertxup.atom.domain.tables.MIndex;
import cn.vertxup.atom.domain.tables.MJoin;
import cn.vertxup.atom.domain.tables.MKey;
import cn.vertxup.atom.domain.tables.MModel;
import cn.vertxup.atom.domain.tables.MRelation;
import cn.vertxup.atom.domain.tables.records.MAccRecord;
import cn.vertxup.atom.domain.tables.records.MAttributeRecord;
import cn.vertxup.atom.domain.tables.records.MEntityRecord;
import cn.vertxup.atom.domain.tables.records.MFieldRecord;
import cn.vertxup.atom.domain.tables.records.MIndexRecord;
import cn.vertxup.atom.domain.tables.records.MJoinRecord;
import cn.vertxup.atom.domain.tables.records.MKeyRecord;
import cn.vertxup.atom.domain.tables.records.MModelRecord;
import cn.vertxup.atom.domain.tables.records.MRelationRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * DB_ETERNAL.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<MAccRecord> KEY_M_ACC_PRIMARY = Internal.createUniqueKey(MAcc.M_ACC, DSL.name("KEY_M_ACC_PRIMARY"), new TableField[] { MAcc.M_ACC.KEY }, true);
    public static final UniqueKey<MAccRecord> KEY_M_ACC_SIGMA = Internal.createUniqueKey(MAcc.M_ACC, DSL.name("KEY_M_ACC_SIGMA"), new TableField[] { MAcc.M_ACC.SIGMA, MAcc.M_ACC.MODEL_KEY }, true);
    public static final UniqueKey<MAttributeRecord> KEY_M_ATTRIBUTE_NAME = Internal.createUniqueKey(MAttribute.M_ATTRIBUTE, DSL.name("KEY_M_ATTRIBUTE_NAME"), new TableField[] { MAttribute.M_ATTRIBUTE.NAME, MAttribute.M_ATTRIBUTE.MODEL_ID }, true);
    public static final UniqueKey<MAttributeRecord> KEY_M_ATTRIBUTE_PRIMARY = Internal.createUniqueKey(MAttribute.M_ATTRIBUTE, DSL.name("KEY_M_ATTRIBUTE_PRIMARY"), new TableField[] { MAttribute.M_ATTRIBUTE.KEY }, true);
    public static final UniqueKey<MEntityRecord> KEY_M_ENTITY_NAMESPACE = Internal.createUniqueKey(MEntity.M_ENTITY, DSL.name("KEY_M_ENTITY_NAMESPACE"), new TableField[] { MEntity.M_ENTITY.NAMESPACE, MEntity.M_ENTITY.IDENTIFIER }, true);
    public static final UniqueKey<MEntityRecord> KEY_M_ENTITY_NAMESPACE_2 = Internal.createUniqueKey(MEntity.M_ENTITY, DSL.name("KEY_M_ENTITY_NAMESPACE_2"), new TableField[] { MEntity.M_ENTITY.NAMESPACE, MEntity.M_ENTITY.NAME }, true);
    public static final UniqueKey<MEntityRecord> KEY_M_ENTITY_PRIMARY = Internal.createUniqueKey(MEntity.M_ENTITY, DSL.name("KEY_M_ENTITY_PRIMARY"), new TableField[] { MEntity.M_ENTITY.KEY }, true);
    public static final UniqueKey<MEntityRecord> KEY_M_ENTITY_SIGMA = Internal.createUniqueKey(MEntity.M_ENTITY, DSL.name("KEY_M_ENTITY_SIGMA"), new TableField[] { MEntity.M_ENTITY.SIGMA, MEntity.M_ENTITY.TABLE_NAME }, true);
    public static final UniqueKey<MFieldRecord> KEY_M_FIELD_NAME = Internal.createUniqueKey(MField.M_FIELD, DSL.name("KEY_M_FIELD_NAME"), new TableField[] { MField.M_FIELD.NAME, MField.M_FIELD.ENTITY_ID }, true);
    public static final UniqueKey<MFieldRecord> KEY_M_FIELD_PRIMARY = Internal.createUniqueKey(MField.M_FIELD, DSL.name("KEY_M_FIELD_PRIMARY"), new TableField[] { MField.M_FIELD.KEY }, true);
    public static final UniqueKey<MIndexRecord> KEY_M_INDEX_NAME = Internal.createUniqueKey(MIndex.M_INDEX, DSL.name("KEY_M_INDEX_NAME"), new TableField[] { MIndex.M_INDEX.NAME, MIndex.M_INDEX.ENTITY_ID }, true);
    public static final UniqueKey<MIndexRecord> KEY_M_INDEX_PRIMARY = Internal.createUniqueKey(MIndex.M_INDEX, DSL.name("KEY_M_INDEX_PRIMARY"), new TableField[] { MIndex.M_INDEX.KEY }, true);
    public static final UniqueKey<MJoinRecord> KEY_M_JOIN_PRIMARY = Internal.createUniqueKey(MJoin.M_JOIN, DSL.name("KEY_M_JOIN_PRIMARY"), new TableField[] { MJoin.M_JOIN.MODEL, MJoin.M_JOIN.ENTITY, MJoin.M_JOIN.ENTITY_KEY, MJoin.M_JOIN.NAMESPACE }, true);
    public static final UniqueKey<MKeyRecord> KEY_M_KEY_NAME = Internal.createUniqueKey(MKey.M_KEY, DSL.name("KEY_M_KEY_NAME"), new TableField[] { MKey.M_KEY.NAME, MKey.M_KEY.ENTITY_ID }, true);
    public static final UniqueKey<MKeyRecord> KEY_M_KEY_PRIMARY = Internal.createUniqueKey(MKey.M_KEY, DSL.name("KEY_M_KEY_PRIMARY"), new TableField[] { MKey.M_KEY.KEY }, true);
    public static final UniqueKey<MModelRecord> KEY_M_MODEL_NAMESPACE = Internal.createUniqueKey(MModel.M_MODEL, DSL.name("KEY_M_MODEL_NAMESPACE"), new TableField[] { MModel.M_MODEL.NAMESPACE, MModel.M_MODEL.IDENTIFIER }, true);
    public static final UniqueKey<MModelRecord> KEY_M_MODEL_NAMESPACE_2 = Internal.createUniqueKey(MModel.M_MODEL, DSL.name("KEY_M_MODEL_NAMESPACE_2"), new TableField[] { MModel.M_MODEL.NAMESPACE, MModel.M_MODEL.NAME }, true);
    public static final UniqueKey<MModelRecord> KEY_M_MODEL_PRIMARY = Internal.createUniqueKey(MModel.M_MODEL, DSL.name("KEY_M_MODEL_PRIMARY"), new TableField[] { MModel.M_MODEL.KEY }, true);
    public static final UniqueKey<MRelationRecord> KEY_M_RELATION_PRIMARY = Internal.createUniqueKey(MRelation.M_RELATION, DSL.name("KEY_M_RELATION_PRIMARY"), new TableField[] { MRelation.M_RELATION.KEY }, true);
    public static final UniqueKey<MRelationRecord> KEY_M_RELATION_TYPE = Internal.createUniqueKey(MRelation.M_RELATION, DSL.name("KEY_M_RELATION_TYPE"), new TableField[] { MRelation.M_RELATION.TYPE, MRelation.M_RELATION.UPSTREAM, MRelation.M_RELATION.DOWNSTREAM, MRelation.M_RELATION.SIGMA }, true);
}
