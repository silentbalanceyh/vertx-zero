/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.atom.domain.tables;


import cn.vertxup.atom.domain.Db;
import cn.vertxup.atom.domain.Indexes;
import cn.vertxup.atom.domain.Keys;
import cn.vertxup.atom.domain.tables.records.MJoinRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MJoin extends TableImpl<MJoinRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.M_JOIN</code>
     */
    public static final MJoin M_JOIN = new MJoin();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.M_JOIN.MODEL</code>. 「model」- 模型identifier
     */
    public final TableField<MJoinRecord, String> MODEL = createField(DSL.name("MODEL"), SQLDataType.VARCHAR(32).nullable(false), this, "「model」- 模型identifier");
    /**
     * The column <code>DB_ETERNAL.M_JOIN.ENTITY</code>. 「entity」- 实体identifier
     */
    public final TableField<MJoinRecord, String> ENTITY = createField(DSL.name("ENTITY"), SQLDataType.VARCHAR(32).nullable(false), this, "「entity」- 实体identifier");
    /**
     * The column <code>DB_ETERNAL.M_JOIN.ENTITY_KEY</code>. 「entityKey」-
     * 实体主键字段名
     */
    public final TableField<MJoinRecord, String> ENTITY_KEY = createField(DSL.name("ENTITY_KEY"), SQLDataType.VARCHAR(32).nullable(false), this, "「entityKey」- 实体主键字段名");
    /**
     * The column <code>DB_ETERNAL.M_JOIN.PRIORITY</code>. 「priority」- 优先级
     */
    public final TableField<MJoinRecord, Integer> PRIORITY = createField(DSL.name("PRIORITY"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "「priority」- 优先级");
    /**
     * The column <code>DB_ETERNAL.M_JOIN.NAMESPACE</code>. 「namespace」-
     * 名空间（和App绑定的）
     */
    public final TableField<MJoinRecord, String> NAMESPACE = createField(DSL.name("NAMESPACE"), SQLDataType.VARCHAR(64).nullable(false), this, "「namespace」- 名空间（和App绑定的）");

    private MJoin(Name alias, Table<MJoinRecord> aliased) {
        this(alias, aliased, null);
    }

    private MJoin(Name alias, Table<MJoinRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.M_JOIN</code> table reference
     */
    public MJoin(String alias) {
        this(DSL.name(alias), M_JOIN);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.M_JOIN</code> table reference
     */
    public MJoin(Name alias) {
        this(alias, M_JOIN);
    }

    /**
     * Create a <code>DB_ETERNAL.M_JOIN</code> table reference
     */
    public MJoin() {
        this(DSL.name("M_JOIN"), null);
    }

    public <O extends Record> MJoin(Table<O> child, ForeignKey<O, MJoinRecord> key) {
        super(child, key, M_JOIN);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MJoinRecord> getRecordType() {
        return MJoinRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.M_JOIN_IDXM_M_JOIN_NAMESPACE_MODEL);
    }

    @Override
    public UniqueKey<MJoinRecord> getPrimaryKey() {
        return Keys.KEY_M_JOIN_PRIMARY;
    }

    @Override
    public MJoin as(String alias) {
        return new MJoin(DSL.name(alias), this);
    }

    @Override
    public MJoin as(Name alias) {
        return new MJoin(alias, this);
    }

    @Override
    public MJoin as(Table<?> alias) {
        return new MJoin(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MJoin rename(String name) {
        return new MJoin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MJoin rename(Name name) {
        return new MJoin(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MJoin rename(Table<?> name) {
        return new MJoin(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
