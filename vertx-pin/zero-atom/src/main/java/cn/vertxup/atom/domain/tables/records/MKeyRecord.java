/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.atom.domain.tables.records;


import cn.vertxup.atom.domain.tables.MKey;
import cn.vertxup.atom.domain.tables.interfaces.IMKey;
import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDateTime;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MKeyRecord extends UpdatableRecordImpl<MKeyRecord> implements VertxPojo, Record14<String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String>, IMKey {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.M_KEY.KEY</code>. 「key」- 键ID
     */
    @Override
    public MKeyRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_KEY.KEY</code>. 「key」- 键ID
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_KEY.NAME</code>. 「name」- 键名称
     */
    @Override
    public MKeyRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_KEY.NAME</code>. 「name」- 键名称
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_KEY.TYPE</code>. 「type」- 键类型
     */
    @Override
    public MKeyRecord setType(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_KEY.TYPE</code>. 「type」- 键类型
     */
    @Override
    public String getType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_KEY.COLUMNS</code>. 「columns」-
     * JsonArray格式，键覆盖的列集合
     */
    @Override
    public MKeyRecord setColumns(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_KEY.COLUMNS</code>. 「columns」-
     * JsonArray格式，键覆盖的列集合
     */
    @Override
    public String getColumns() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_KEY.ENTITY_ID</code>. 「entityId」- 关联的实体ID
     */
    @Override
    public MKeyRecord setEntityId(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_KEY.ENTITY_ID</code>. 「entityId」- 关联的实体ID
     */
    @Override
    public String getEntityId() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_KEY.COMMENTS</code>. 「comments」- 当前属性的描述信息
     */
    @Override
    public MKeyRecord setComments(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_KEY.COMMENTS</code>. 「comments」- 当前属性的描述信息
     */
    @Override
    public String getComments() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_KEY.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public MKeyRecord setSigma(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_KEY.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_KEY.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public MKeyRecord setLanguage(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_KEY.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_KEY.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public MKeyRecord setActive(Boolean value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_KEY.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_KEY.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public MKeyRecord setMetadata(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_KEY.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_KEY.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public MKeyRecord setCreatedAt(LocalDateTime value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_KEY.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_KEY.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public MKeyRecord setCreatedBy(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_KEY.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_KEY.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public MKeyRecord setUpdatedAt(LocalDateTime value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_KEY.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_KEY.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public MKeyRecord setUpdatedBy(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_KEY.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return MKey.M_KEY.KEY;
    }

    @Override
    public Field<String> field2() {
        return MKey.M_KEY.NAME;
    }

    @Override
    public Field<String> field3() {
        return MKey.M_KEY.TYPE;
    }

    @Override
    public Field<String> field4() {
        return MKey.M_KEY.COLUMNS;
    }

    @Override
    public Field<String> field5() {
        return MKey.M_KEY.ENTITY_ID;
    }

    @Override
    public Field<String> field6() {
        return MKey.M_KEY.COMMENTS;
    }

    @Override
    public Field<String> field7() {
        return MKey.M_KEY.SIGMA;
    }

    @Override
    public Field<String> field8() {
        return MKey.M_KEY.LANGUAGE;
    }

    @Override
    public Field<Boolean> field9() {
        return MKey.M_KEY.ACTIVE;
    }

    @Override
    public Field<String> field10() {
        return MKey.M_KEY.METADATA;
    }

    @Override
    public Field<LocalDateTime> field11() {
        return MKey.M_KEY.CREATED_AT;
    }

    @Override
    public Field<String> field12() {
        return MKey.M_KEY.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field13() {
        return MKey.M_KEY.UPDATED_AT;
    }

    @Override
    public Field<String> field14() {
        return MKey.M_KEY.UPDATED_BY;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getType();
    }

    @Override
    public String component4() {
        return getColumns();
    }

    @Override
    public String component5() {
        return getEntityId();
    }

    @Override
    public String component6() {
        return getComments();
    }

    @Override
    public String component7() {
        return getSigma();
    }

    @Override
    public String component8() {
        return getLanguage();
    }

    @Override
    public Boolean component9() {
        return getActive();
    }

    @Override
    public String component10() {
        return getMetadata();
    }

    @Override
    public LocalDateTime component11() {
        return getCreatedAt();
    }

    @Override
    public String component12() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component13() {
        return getUpdatedAt();
    }

    @Override
    public String component14() {
        return getUpdatedBy();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getType();
    }

    @Override
    public String value4() {
        return getColumns();
    }

    @Override
    public String value5() {
        return getEntityId();
    }

    @Override
    public String value6() {
        return getComments();
    }

    @Override
    public String value7() {
        return getSigma();
    }

    @Override
    public String value8() {
        return getLanguage();
    }

    @Override
    public Boolean value9() {
        return getActive();
    }

    @Override
    public String value10() {
        return getMetadata();
    }

    @Override
    public LocalDateTime value11() {
        return getCreatedAt();
    }

    @Override
    public String value12() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value13() {
        return getUpdatedAt();
    }

    @Override
    public String value14() {
        return getUpdatedBy();
    }

    @Override
    public MKeyRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public MKeyRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public MKeyRecord value3(String value) {
        setType(value);
        return this;
    }

    @Override
    public MKeyRecord value4(String value) {
        setColumns(value);
        return this;
    }

    @Override
    public MKeyRecord value5(String value) {
        setEntityId(value);
        return this;
    }

    @Override
    public MKeyRecord value6(String value) {
        setComments(value);
        return this;
    }

    @Override
    public MKeyRecord value7(String value) {
        setSigma(value);
        return this;
    }

    @Override
    public MKeyRecord value8(String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public MKeyRecord value9(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public MKeyRecord value10(String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public MKeyRecord value11(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public MKeyRecord value12(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public MKeyRecord value13(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public MKeyRecord value14(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public MKeyRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, Boolean value9, String value10, LocalDateTime value11, String value12, LocalDateTime value13, String value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IMKey from) {
        setKey(from.getKey());
        setName(from.getName());
        setType(from.getType());
        setColumns(from.getColumns());
        setEntityId(from.getEntityId());
        setComments(from.getComments());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IMKey> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MKeyRecord
     */
    public MKeyRecord() {
        super(MKey.M_KEY);
    }

    /**
     * Create a detached, initialised MKeyRecord
     */
    public MKeyRecord(String key, String name, String type, String columns, String entityId, String comments, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(MKey.M_KEY);

        setKey(key);
        setName(name);
        setType(type);
        setColumns(columns);
        setEntityId(entityId);
        setComments(comments);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
    }

    /**
     * Create a detached, initialised MKeyRecord
     */
    public MKeyRecord(cn.vertxup.atom.domain.tables.pojos.MKey value) {
        super(MKey.M_KEY);

        if (value != null) {
            setKey(value.getKey());
            setName(value.getName());
            setType(value.getType());
            setColumns(value.getColumns());
            setEntityId(value.getEntityId());
            setComments(value.getComments());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
        }
    }

        public MKeyRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
