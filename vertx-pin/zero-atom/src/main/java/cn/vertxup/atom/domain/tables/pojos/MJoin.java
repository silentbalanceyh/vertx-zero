/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.atom.domain.tables.pojos;


import cn.vertxup.atom.domain.tables.interfaces.IMJoin;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MJoin implements VertxPojo, IMJoin {

    private static final long serialVersionUID = 1L;

    private String model;
    private String entity;
    private String entityKey;
    private Integer priority;
    private String namespace;

    public MJoin() {}

    public MJoin(IMJoin value) {
        this.model = value.getModel();
        this.entity = value.getEntity();
        this.entityKey = value.getEntityKey();
        this.priority = value.getPriority();
        this.namespace = value.getNamespace();
    }

    public MJoin(
        String model,
        String entity,
        String entityKey,
        Integer priority,
        String namespace
    ) {
        this.model = model;
        this.entity = entity;
        this.entityKey = entityKey;
        this.priority = priority;
        this.namespace = namespace;
    }

        public MJoin(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.M_JOIN.MODEL</code>. 「model」- 模型identifier
     */
    @Override
    public String getModel() {
        return this.model;
    }

    /**
     * Setter for <code>DB_ETERNAL.M_JOIN.MODEL</code>. 「model」- 模型identifier
     */
    @Override
    public MJoin setModel(String model) {
        this.model = model;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_JOIN.ENTITY</code>. 「entity」- 实体identifier
     */
    @Override
    public String getEntity() {
        return this.entity;
    }

    /**
     * Setter for <code>DB_ETERNAL.M_JOIN.ENTITY</code>. 「entity」- 实体identifier
     */
    @Override
    public MJoin setEntity(String entity) {
        this.entity = entity;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_JOIN.ENTITY_KEY</code>. 「entityKey」-
     * 实体主键字段名
     */
    @Override
    public String getEntityKey() {
        return this.entityKey;
    }

    /**
     * Setter for <code>DB_ETERNAL.M_JOIN.ENTITY_KEY</code>. 「entityKey」-
     * 实体主键字段名
     */
    @Override
    public MJoin setEntityKey(String entityKey) {
        this.entityKey = entityKey;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_JOIN.PRIORITY</code>. 「priority」- 优先级
     */
    @Override
    public Integer getPriority() {
        return this.priority;
    }

    /**
     * Setter for <code>DB_ETERNAL.M_JOIN.PRIORITY</code>. 「priority」- 优先级
     */
    @Override
    public MJoin setPriority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_JOIN.NAMESPACE</code>. 「namespace」-
     * 名空间（和App绑定的）
     */
    @Override
    public String getNamespace() {
        return this.namespace;
    }

    /**
     * Setter for <code>DB_ETERNAL.M_JOIN.NAMESPACE</code>. 「namespace」-
     * 名空间（和App绑定的）
     */
    @Override
    public MJoin setNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final MJoin other = (MJoin) obj;
        if (this.model == null) {
            if (other.model != null)
                return false;
        }
        else if (!this.model.equals(other.model))
            return false;
        if (this.entity == null) {
            if (other.entity != null)
                return false;
        }
        else if (!this.entity.equals(other.entity))
            return false;
        if (this.entityKey == null) {
            if (other.entityKey != null)
                return false;
        }
        else if (!this.entityKey.equals(other.entityKey))
            return false;
        if (this.priority == null) {
            if (other.priority != null)
                return false;
        }
        else if (!this.priority.equals(other.priority))
            return false;
        if (this.namespace == null) {
            if (other.namespace != null)
                return false;
        }
        else if (!this.namespace.equals(other.namespace))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.model == null) ? 0 : this.model.hashCode());
        result = prime * result + ((this.entity == null) ? 0 : this.entity.hashCode());
        result = prime * result + ((this.entityKey == null) ? 0 : this.entityKey.hashCode());
        result = prime * result + ((this.priority == null) ? 0 : this.priority.hashCode());
        result = prime * result + ((this.namespace == null) ? 0 : this.namespace.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("MJoin (");

        sb.append(model);
        sb.append(", ").append(entity);
        sb.append(", ").append(entityKey);
        sb.append(", ").append(priority);
        sb.append(", ").append(namespace);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IMJoin from) {
        setModel(from.getModel());
        setEntity(from.getEntity());
        setEntityKey(from.getEntityKey());
        setPriority(from.getPriority());
        setNamespace(from.getNamespace());
    }

    @Override
    public <E extends IMJoin> E into(E into) {
        into.from(this);
        return into;
    }
}
