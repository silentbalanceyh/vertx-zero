/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.atom.domain.tables.records;


import cn.vertxup.atom.domain.tables.MAttribute;
import cn.vertxup.atom.domain.tables.interfaces.IMAttribute;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MAttributeRecord extends UpdatableRecordImpl<MAttributeRecord> implements VertxPojo, IMAttribute {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.KEY</code>. 「key」- 属性ID
     */
    @Override
    public MAttributeRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.KEY</code>. 「key」- 属性ID
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.NAME</code>. 「name」- 属性名称
     */
    @Override
    public MAttributeRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.NAME</code>. 「name」- 属性名称
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.ALIAS</code>. 「alias」- 属性别名（业务名）
     */
    @Override
    public MAttributeRecord setAlias(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.ALIAS</code>. 「alias」- 属性别名（业务名）
     */
    @Override
    public String getAlias() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.TYPE</code>. 「type」-
     * INTERNAL/EXTERNAL/REFERENCE属性
     */
    @Override
    public MAttributeRecord setType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.TYPE</code>. 「type」-
     * INTERNAL/EXTERNAL/REFERENCE属性
     */
    @Override
    public String getType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.EXPRESSION</code>. 「expression」-
     * 表达式
     */
    @Override
    public MAttributeRecord setExpression(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.EXPRESSION</code>. 「expression」-
     * 表达式
     */
    @Override
    public String getExpression() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.NORMALIZE</code>. 「normalize」-
     * 表达式
     */
    @Override
    public MAttributeRecord setNormalize(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.NORMALIZE</code>. 「normalize」-
     * 表达式
     */
    @Override
    public String getNormalize() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IN_COMPONENT</code>.
     * 「inComponent」- 写入插件
     */
    @Override
    public MAttributeRecord setInComponent(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IN_COMPONENT</code>.
     * 「inComponent」- 写入插件
     */
    @Override
    public String getInComponent() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.OUT_COMPONENT</code>.
     * 「outComponent」- 读取插件
     */
    @Override
    public MAttributeRecord setOutComponent(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.OUT_COMPONENT</code>.
     * 「outComponent」- 读取插件
     */
    @Override
    public String getOutComponent() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.MODEL_ID</code>. 「modelId」-
     * 关联的模型ID
     */
    @Override
    public MAttributeRecord setModelId(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.MODEL_ID</code>. 「modelId」-
     * 关联的模型ID
     */
    @Override
    public String getModelId() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.COMMENTS</code>. 「comments」-
     * 当前属性的描述信息
     */
    @Override
    public MAttributeRecord setComments(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.COMMENTS</code>. 「comments」-
     * 当前属性的描述信息
     */
    @Override
    public String getComments() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE</code>. 「source」- 关联实体ID
     */
    @Override
    public MAttributeRecord setSource(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE</code>. 「source」- 关联实体ID
     */
    @Override
    public String getSource() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_FIELD</code>.
     * 「sourceField」- 可选，如果不设置则以name为主
     */
    @Override
    public MAttributeRecord setSourceField(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_FIELD</code>.
     * 「sourceField」- 可选，如果不设置则以name为主
     */
    @Override
    public String getSourceField() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_CONFIG</code>.
     * 「sourceConfig」- 数据集配置（区分 Array 和 Object）
     */
    @Override
    public MAttributeRecord setSourceConfig(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_CONFIG</code>.
     * 「sourceConfig」- 数据集配置（区分 Array 和 Object）
     */
    @Override
    public String getSourceConfig() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_REFERENCE</code>.
     * 「sourceReference」- 引用配置信息（ type = REFERENCE）
     */
    @Override
    public MAttributeRecord setSourceReference(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_REFERENCE</code>.
     * 「sourceReference」- 引用配置信息（ type = REFERENCE）
     */
    @Override
    public String getSourceReference() {
        return (String) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_EXTERNAL</code>.
     * 「sourceExternal」- 外部配置信息（ type = EXTERNAL ）
     */
    @Override
    public MAttributeRecord setSourceExternal(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.SOURCE_EXTERNAL</code>.
     * 「sourceExternal」- 外部配置信息（ type = EXTERNAL ）
     */
    @Override
    public String getSourceExternal() {
        return (String) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_ARRAY</code>. 「isArray」-
     * 是否集合属性，集合属性在导入导出时可用（保留）
     */
    @Override
    public MAttributeRecord setIsArray(Boolean value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_ARRAY</code>. 「isArray」-
     * 是否集合属性，集合属性在导入导出时可用（保留）
     */
    @Override
    public Boolean getIsArray() {
        return (Boolean) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_REFER</code>. 「isRefer」-
     * 是否引用属性的主属性，主属性才可拥有 sourceReference 配置，根据 source 有区别
     */
    @Override
    public MAttributeRecord setIsRefer(Boolean value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_REFER</code>. 「isRefer」-
     * 是否引用属性的主属性，主属性才可拥有 sourceReference 配置，根据 source 有区别
     */
    @Override
    public Boolean getIsRefer() {
        return (Boolean) get(16);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_SYNC_IN</code>. 「isSyncIn」-
     * 是否同步读
     */
    @Override
    public MAttributeRecord setIsSyncIn(Boolean value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_SYNC_IN</code>. 「isSyncIn」-
     * 是否同步读
     */
    @Override
    public Boolean getIsSyncIn() {
        return (Boolean) get(17);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_SYNC_OUT</code>. 「isSyncOut」-
     * 是否同步写
     */
    @Override
    public MAttributeRecord setIsSyncOut(Boolean value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_SYNC_OUT</code>. 「isSyncOut」-
     * 是否同步写
     */
    @Override
    public Boolean getIsSyncOut() {
        return (Boolean) get(18);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_LOCK</code>. 「isLock」-
     * 是否锁定，锁定属性不可删除
     */
    @Override
    public MAttributeRecord setIsLock(Boolean value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_LOCK</code>. 「isLock」-
     * 是否锁定，锁定属性不可删除
     */
    @Override
    public Boolean getIsLock() {
        return (Boolean) get(19);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_TRACK</code>. 「isTrack」-
     * 是否实现历史记录，如果是 isTrack 那么启用 ACTIVITY 的变更记录，对应 ITEM
     */
    @Override
    public MAttributeRecord setIsTrack(Boolean value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_TRACK</code>. 「isTrack」-
     * 是否实现历史记录，如果是 isTrack 那么启用 ACTIVITY 的变更记录，对应 ITEM
     */
    @Override
    public Boolean getIsTrack() {
        return (Boolean) get(20);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_CONFIRM</code>. 「isConfirm」-
     * 是否生成待确认变更，只有放在待确认变更中的数据需要生成待确认变更
     */
    @Override
    public MAttributeRecord setIsConfirm(Boolean value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.IS_CONFIRM</code>. 「isConfirm」-
     * 是否生成待确认变更，只有放在待确认变更中的数据需要生成待确认变更
     */
    @Override
    public Boolean getIsConfirm() {
        return (Boolean) get(21);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public MAttributeRecord setSigma(String value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(22);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    @Override
    public MAttributeRecord setLanguage(String value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(23);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public MAttributeRecord setActive(Boolean value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(24);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    @Override
    public MAttributeRecord setMetadata(String value) {
        set(25, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(25);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public MAttributeRecord setCreatedAt(LocalDateTime value) {
        set(26, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(26);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public MAttributeRecord setCreatedBy(String value) {
        set(27, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(27);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public MAttributeRecord setUpdatedAt(LocalDateTime value) {
        set(28, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(28);
    }

    /**
     * Setter for <code>DB_ETERNAL.M_ATTRIBUTE.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public MAttributeRecord setUpdatedBy(String value) {
        set(29, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.M_ATTRIBUTE.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(29);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IMAttribute from) {
        setKey(from.getKey());
        setName(from.getName());
        setAlias(from.getAlias());
        setType(from.getType());
        setExpression(from.getExpression());
        setNormalize(from.getNormalize());
        setInComponent(from.getInComponent());
        setOutComponent(from.getOutComponent());
        setModelId(from.getModelId());
        setComments(from.getComments());
        setSource(from.getSource());
        setSourceField(from.getSourceField());
        setSourceConfig(from.getSourceConfig());
        setSourceReference(from.getSourceReference());
        setSourceExternal(from.getSourceExternal());
        setIsArray(from.getIsArray());
        setIsRefer(from.getIsRefer());
        setIsSyncIn(from.getIsSyncIn());
        setIsSyncOut(from.getIsSyncOut());
        setIsLock(from.getIsLock());
        setIsTrack(from.getIsTrack());
        setIsConfirm(from.getIsConfirm());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IMAttribute> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MAttributeRecord
     */
    public MAttributeRecord() {
        super(MAttribute.M_ATTRIBUTE);
    }

    /**
     * Create a detached, initialised MAttributeRecord
     */
    public MAttributeRecord(String key, String name, String alias, String type, String expression, String normalize, String inComponent, String outComponent, String modelId, String comments, String source, String sourceField, String sourceConfig, String sourceReference, String sourceExternal, Boolean isArray, Boolean isRefer, Boolean isSyncIn, Boolean isSyncOut, Boolean isLock, Boolean isTrack, Boolean isConfirm, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(MAttribute.M_ATTRIBUTE);

        setKey(key);
        setName(name);
        setAlias(alias);
        setType(type);
        setExpression(expression);
        setNormalize(normalize);
        setInComponent(inComponent);
        setOutComponent(outComponent);
        setModelId(modelId);
        setComments(comments);
        setSource(source);
        setSourceField(sourceField);
        setSourceConfig(sourceConfig);
        setSourceReference(sourceReference);
        setSourceExternal(sourceExternal);
        setIsArray(isArray);
        setIsRefer(isRefer);
        setIsSyncIn(isSyncIn);
        setIsSyncOut(isSyncOut);
        setIsLock(isLock);
        setIsTrack(isTrack);
        setIsConfirm(isConfirm);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
    }

    /**
     * Create a detached, initialised MAttributeRecord
     */
    public MAttributeRecord(cn.vertxup.atom.domain.tables.pojos.MAttribute value) {
        super(MAttribute.M_ATTRIBUTE);

        if (value != null) {
            setKey(value.getKey());
            setName(value.getName());
            setAlias(value.getAlias());
            setType(value.getType());
            setExpression(value.getExpression());
            setNormalize(value.getNormalize());
            setInComponent(value.getInComponent());
            setOutComponent(value.getOutComponent());
            setModelId(value.getModelId());
            setComments(value.getComments());
            setSource(value.getSource());
            setSourceField(value.getSourceField());
            setSourceConfig(value.getSourceConfig());
            setSourceReference(value.getSourceReference());
            setSourceExternal(value.getSourceExternal());
            setIsArray(value.getIsArray());
            setIsRefer(value.getIsRefer());
            setIsSyncIn(value.getIsSyncIn());
            setIsSyncOut(value.getIsSyncOut());
            setIsLock(value.getIsLock());
            setIsTrack(value.getIsTrack());
            setIsConfirm(value.getIsConfirm());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
        }
    }

        public MAttributeRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
