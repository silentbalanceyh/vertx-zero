/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.battery.domain.tables;


import cn.vertxup.battery.domain.Db;
import cn.vertxup.battery.domain.Keys;
import cn.vertxup.battery.domain.tables.records.BComponentRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class BComponent extends TableImpl<BComponentRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.B_COMPONENT</code>
     */
    public static final BComponent B_COMPONENT = new BComponent();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.B_COMPONENT.KEY</code>. 「key」- 主键
     */
    public final TableField<BComponentRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 主键");
    /**
     * The column <code>DB_ETERNAL.B_COMPONENT.BLOCK_ID</code>. 「blockId」-
     * 所属模块ID
     */
    public final TableField<BComponentRecord, String> BLOCK_ID = createField(DSL.name("BLOCK_ID"), SQLDataType.VARCHAR(36), this, "「blockId」- 所属模块ID");
    /**
     * The column <code>DB_ETERNAL.B_COMPONENT.TYPE</code>. 「type」- 类型保留，单独区分
     */
    public final TableField<BComponentRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(64), this, "「type」- 类型保留，单独区分");
    /**
     * The column <code>DB_ETERNAL.B_COMPONENT.MAVEN_AID</code>. 「mavenAid」-
     * 所在项目ID
     */
    public final TableField<BComponentRecord, String> MAVEN_AID = createField(DSL.name("MAVEN_AID"), SQLDataType.VARCHAR(255), this, "「mavenAid」- 所在项目ID");
    /**
     * The column <code>DB_ETERNAL.B_COMPONENT.MAVEN_GID</code>. 「mavenGid」-
     * 所在Group的ID
     */
    public final TableField<BComponentRecord, String> MAVEN_GID = createField(DSL.name("MAVEN_GID"), SQLDataType.VARCHAR(255), this, "「mavenGid」- 所在Group的ID");
    /**
     * The column <code>DB_ETERNAL.B_COMPONENT.SPEC_INTERFACE</code>.
     * 「specInterface」- 接口名称
     */
    public final TableField<BComponentRecord, String> SPEC_INTERFACE = createField(DSL.name("SPEC_INTERFACE"), SQLDataType.VARCHAR(255), this, "「specInterface」- 接口名称");
    /**
     * The column <code>DB_ETERNAL.B_COMPONENT.SPEC_IMPL</code>. 「specImpl」-
     * 实现组件
     */
    public final TableField<BComponentRecord, String> SPEC_IMPL = createField(DSL.name("SPEC_IMPL"), SQLDataType.VARCHAR(255), this, "「specImpl」- 实现组件");
    /**
     * The column <code>DB_ETERNAL.B_COMPONENT.INTEGRATED</code>. 「integrated」-
     * 是否用于外部集成
     */
    public final TableField<BComponentRecord, Boolean> INTEGRATED = createField(DSL.name("INTEGRATED"), SQLDataType.BIT, this, "「integrated」- 是否用于外部集成");
    /**
     * The column <code>DB_ETERNAL.B_COMPONENT.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<BComponentRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.B_COMPONENT.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<BComponentRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.B_COMPONENT.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<BComponentRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.B_COMPONENT.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public final TableField<BComponentRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");

    private BComponent(Name alias, Table<BComponentRecord> aliased) {
        this(alias, aliased, null);
    }

    private BComponent(Name alias, Table<BComponentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.B_COMPONENT</code> table reference
     */
    public BComponent(String alias) {
        this(DSL.name(alias), B_COMPONENT);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.B_COMPONENT</code> table reference
     */
    public BComponent(Name alias) {
        this(alias, B_COMPONENT);
    }

    /**
     * Create a <code>DB_ETERNAL.B_COMPONENT</code> table reference
     */
    public BComponent() {
        this(DSL.name("B_COMPONENT"), null);
    }

    public <O extends Record> BComponent(Table<O> child, ForeignKey<O, BComponentRecord> key) {
        super(child, key, B_COMPONENT);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BComponentRecord> getRecordType() {
        return BComponentRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<BComponentRecord> getPrimaryKey() {
        return Keys.KEY_B_COMPONENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<BComponentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_B_COMPONENT_SPEC_IMPL);
    }

    @Override
    public BComponent as(String alias) {
        return new BComponent(DSL.name(alias), this);
    }

    @Override
    public BComponent as(Name alias) {
        return new BComponent(alias, this);
    }

    @Override
    public BComponent as(Table<?> alias) {
        return new BComponent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BComponent rename(String name) {
        return new BComponent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BComponent rename(Name name) {
        return new BComponent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BComponent rename(Table<?> name) {
        return new BComponent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, String, String, String, String, String, Boolean, Boolean, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
