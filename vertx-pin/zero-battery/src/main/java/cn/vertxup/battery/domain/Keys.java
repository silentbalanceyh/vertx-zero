/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.battery.domain;


import cn.vertxup.battery.domain.tables.BAuthority;
import cn.vertxup.battery.domain.tables.BBag;
import cn.vertxup.battery.domain.tables.BBlock;
import cn.vertxup.battery.domain.tables.BComponent;
import cn.vertxup.battery.domain.tables.BWeb;
import cn.vertxup.battery.domain.tables.records.BAuthorityRecord;
import cn.vertxup.battery.domain.tables.records.BBagRecord;
import cn.vertxup.battery.domain.tables.records.BBlockRecord;
import cn.vertxup.battery.domain.tables.records.BComponentRecord;
import cn.vertxup.battery.domain.tables.records.BWebRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * DB_ETERNAL.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BAuthorityRecord> KEY_B_AUTHORITY_CODE = Internal.createUniqueKey(BAuthority.B_AUTHORITY, DSL.name("KEY_B_AUTHORITY_CODE"), new TableField[] { BAuthority.B_AUTHORITY.CODE, BAuthority.B_AUTHORITY.BLOCK_ID }, true);
    public static final UniqueKey<BAuthorityRecord> KEY_B_AUTHORITY_PRIMARY = Internal.createUniqueKey(BAuthority.B_AUTHORITY, DSL.name("KEY_B_AUTHORITY_PRIMARY"), new TableField[] { BAuthority.B_AUTHORITY.KEY }, true);
    public static final UniqueKey<BBagRecord> KEY_B_BAG_NAME = Internal.createUniqueKey(BBag.B_BAG, DSL.name("KEY_B_BAG_NAME"), new TableField[] { BBag.B_BAG.NAME, BBag.B_BAG.APP_ID }, true);
    public static final UniqueKey<BBagRecord> KEY_B_BAG_NAME_ABBR = Internal.createUniqueKey(BBag.B_BAG, DSL.name("KEY_B_BAG_NAME_ABBR"), new TableField[] { BBag.B_BAG.NAME_ABBR, BBag.B_BAG.APP_ID }, true);
    public static final UniqueKey<BBagRecord> KEY_B_BAG_PRIMARY = Internal.createUniqueKey(BBag.B_BAG, DSL.name("KEY_B_BAG_PRIMARY"), new TableField[] { BBag.B_BAG.KEY }, true);
    public static final UniqueKey<BBlockRecord> KEY_B_BLOCK_CODE = Internal.createUniqueKey(BBlock.B_BLOCK, DSL.name("KEY_B_BLOCK_CODE"), new TableField[] { BBlock.B_BLOCK.CODE, BBlock.B_BLOCK.APP_ID }, true);
    public static final UniqueKey<BBlockRecord> KEY_B_BLOCK_NAME = Internal.createUniqueKey(BBlock.B_BLOCK, DSL.name("KEY_B_BLOCK_NAME"), new TableField[] { BBlock.B_BLOCK.NAME, BBlock.B_BLOCK.APP_ID, BBlock.B_BLOCK.BAG_ID }, true);
    public static final UniqueKey<BBlockRecord> KEY_B_BLOCK_PRIMARY = Internal.createUniqueKey(BBlock.B_BLOCK, DSL.name("KEY_B_BLOCK_PRIMARY"), new TableField[] { BBlock.B_BLOCK.KEY }, true);
    public static final UniqueKey<BBlockRecord> KEY_B_BLOCK_SIGN_SECRET = Internal.createUniqueKey(BBlock.B_BLOCK, DSL.name("KEY_B_BLOCK_SIGN_SECRET"), new TableField[] { BBlock.B_BLOCK.SIGN_SECRET }, true);
    public static final UniqueKey<BComponentRecord> KEY_B_COMPONENT_PRIMARY = Internal.createUniqueKey(BComponent.B_COMPONENT, DSL.name("KEY_B_COMPONENT_PRIMARY"), new TableField[] { BComponent.B_COMPONENT.KEY }, true);
    public static final UniqueKey<BComponentRecord> KEY_B_COMPONENT_SPEC_IMPL = Internal.createUniqueKey(BComponent.B_COMPONENT, DSL.name("KEY_B_COMPONENT_SPEC_IMPL"), new TableField[] { BComponent.B_COMPONENT.SPEC_IMPL, BComponent.B_COMPONENT.BLOCK_ID }, true);
    public static final UniqueKey<BWebRecord> KEY_B_WEB_CODE = Internal.createUniqueKey(BWeb.B_WEB, DSL.name("KEY_B_WEB_CODE"), new TableField[] { BWeb.B_WEB.CODE, BWeb.B_WEB.BLOCK_ID }, true);
    public static final UniqueKey<BWebRecord> KEY_B_WEB_PRIMARY = Internal.createUniqueKey(BWeb.B_WEB, DSL.name("KEY_B_WEB_PRIMARY"), new TableField[] { BWeb.B_WEB.KEY }, true);
}
