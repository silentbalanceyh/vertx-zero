/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.battery.domain.tables.pojos;


import cn.vertxup.battery.domain.tables.interfaces.IBComponent;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BComponent implements VertxPojo, IBComponent {

    private static final long serialVersionUID = 1L;

    private String  key;
    private String  blockId;
    private String  type;
    private String  mavenAid;
    private String  mavenGid;
    private String  specInterface;
    private String  specImpl;
    private Boolean integrated;
    private Boolean active;
    private String  sigma;
    private String  metadata;
    private String  language;

    public BComponent() {}

    public BComponent(IBComponent value) {
        this.key = value.getKey();
        this.blockId = value.getBlockId();
        this.type = value.getType();
        this.mavenAid = value.getMavenAid();
        this.mavenGid = value.getMavenGid();
        this.specInterface = value.getSpecInterface();
        this.specImpl = value.getSpecImpl();
        this.integrated = value.getIntegrated();
        this.active = value.getActive();
        this.sigma = value.getSigma();
        this.metadata = value.getMetadata();
        this.language = value.getLanguage();
    }

    public BComponent(
        String  key,
        String  blockId,
        String  type,
        String  mavenAid,
        String  mavenGid,
        String  specInterface,
        String  specImpl,
        Boolean integrated,
        Boolean active,
        String  sigma,
        String  metadata,
        String  language
    ) {
        this.key = key;
        this.blockId = blockId;
        this.type = type;
        this.mavenAid = mavenAid;
        this.mavenGid = mavenGid;
        this.specInterface = specInterface;
        this.specImpl = specImpl;
        this.integrated = integrated;
        this.active = active;
        this.sigma = sigma;
        this.metadata = metadata;
        this.language = language;
    }

        public BComponent(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.B_COMPONENT.KEY</code>. 「key」- 主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.B_COMPONENT.KEY</code>. 「key」- 主键
     */
    @Override
    public BComponent setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.B_COMPONENT.BLOCK_ID</code>. 「blockId」-
     * 所属模块ID
     */
    @Override
    public String getBlockId() {
        return this.blockId;
    }

    /**
     * Setter for <code>DB_ETERNAL.B_COMPONENT.BLOCK_ID</code>. 「blockId」-
     * 所属模块ID
     */
    @Override
    public BComponent setBlockId(String blockId) {
        this.blockId = blockId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.B_COMPONENT.TYPE</code>. 「type」- 类型保留，单独区分
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Setter for <code>DB_ETERNAL.B_COMPONENT.TYPE</code>. 「type」- 类型保留，单独区分
     */
    @Override
    public BComponent setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.B_COMPONENT.MAVEN_AID</code>. 「mavenAid」-
     * 所在项目ID
     */
    @Override
    public String getMavenAid() {
        return this.mavenAid;
    }

    /**
     * Setter for <code>DB_ETERNAL.B_COMPONENT.MAVEN_AID</code>. 「mavenAid」-
     * 所在项目ID
     */
    @Override
    public BComponent setMavenAid(String mavenAid) {
        this.mavenAid = mavenAid;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.B_COMPONENT.MAVEN_GID</code>. 「mavenGid」-
     * 所在Group的ID
     */
    @Override
    public String getMavenGid() {
        return this.mavenGid;
    }

    /**
     * Setter for <code>DB_ETERNAL.B_COMPONENT.MAVEN_GID</code>. 「mavenGid」-
     * 所在Group的ID
     */
    @Override
    public BComponent setMavenGid(String mavenGid) {
        this.mavenGid = mavenGid;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.B_COMPONENT.SPEC_INTERFACE</code>.
     * 「specInterface」- 接口名称
     */
    @Override
    public String getSpecInterface() {
        return this.specInterface;
    }

    /**
     * Setter for <code>DB_ETERNAL.B_COMPONENT.SPEC_INTERFACE</code>.
     * 「specInterface」- 接口名称
     */
    @Override
    public BComponent setSpecInterface(String specInterface) {
        this.specInterface = specInterface;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.B_COMPONENT.SPEC_IMPL</code>. 「specImpl」-
     * 实现组件
     */
    @Override
    public String getSpecImpl() {
        return this.specImpl;
    }

    /**
     * Setter for <code>DB_ETERNAL.B_COMPONENT.SPEC_IMPL</code>. 「specImpl」-
     * 实现组件
     */
    @Override
    public BComponent setSpecImpl(String specImpl) {
        this.specImpl = specImpl;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.B_COMPONENT.INTEGRATED</code>. 「integrated」-
     * 是否用于外部集成
     */
    @Override
    public Boolean getIntegrated() {
        return this.integrated;
    }

    /**
     * Setter for <code>DB_ETERNAL.B_COMPONENT.INTEGRATED</code>. 「integrated」-
     * 是否用于外部集成
     */
    @Override
    public BComponent setIntegrated(Boolean integrated) {
        this.integrated = integrated;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.B_COMPONENT.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.B_COMPONENT.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public BComponent setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.B_COMPONENT.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.B_COMPONENT.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public BComponent setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.B_COMPONENT.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.B_COMPONENT.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public BComponent setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.B_COMPONENT.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.B_COMPONENT.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    @Override
    public BComponent setLanguage(String language) {
        this.language = language;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("BComponent (");

        sb.append(key);
        sb.append(", ").append(blockId);
        sb.append(", ").append(type);
        sb.append(", ").append(mavenAid);
        sb.append(", ").append(mavenGid);
        sb.append(", ").append(specInterface);
        sb.append(", ").append(specImpl);
        sb.append(", ").append(integrated);
        sb.append(", ").append(active);
        sb.append(", ").append(sigma);
        sb.append(", ").append(metadata);
        sb.append(", ").append(language);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IBComponent from) {
        setKey(from.getKey());
        setBlockId(from.getBlockId());
        setType(from.getType());
        setMavenAid(from.getMavenAid());
        setMavenGid(from.getMavenGid());
        setSpecInterface(from.getSpecInterface());
        setSpecImpl(from.getSpecImpl());
        setIntegrated(from.getIntegrated());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
    }

    @Override
    public <E extends IBComponent> E into(E into) {
        into.from(this);
        return into;
    }
}
