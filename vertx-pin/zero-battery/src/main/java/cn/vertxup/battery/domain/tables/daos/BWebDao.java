/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.battery.domain.tables.daos;


import cn.vertxup.battery.domain.tables.BWeb;
import cn.vertxup.battery.domain.tables.records.BWebRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;

import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BWebDao extends AbstractVertxDAO<BWebRecord, cn.vertxup.battery.domain.tables.pojos.BWeb, String, Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>>, Future<cn.vertxup.battery.domain.tables.pojos.BWeb>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<BWebRecord,cn.vertxup.battery.domain.tables.pojos.BWeb,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public BWebDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(BWeb.B_WEB, cn.vertxup.battery.domain.tables.pojos.BWeb.class, new JDBCClassicQueryExecutor<BWebRecord,cn.vertxup.battery.domain.tables.pojos.BWeb,String>(configuration,cn.vertxup.battery.domain.tables.pojos.BWeb.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.battery.domain.tables.pojos.BWeb object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByCode(Collection<String> values) {
                return findManyByCondition(BWeb.B_WEB.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(BWeb.B_WEB.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>BLOCK_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByBlockId(Collection<String> values) {
                return findManyByCondition(BWeb.B_WEB.BLOCK_ID.in(values));
        }

        /**
     * Find records that have <code>BLOCK_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByBlockId(Collection<String> values, int limit) {
                return findManyByCondition(BWeb.B_WEB.BLOCK_ID.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByType(Collection<String> values) {
                return findManyByCondition(BWeb.B_WEB.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(BWeb.B_WEB.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>LIC_CONTENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByLicContent(Collection<String> values) {
                return findManyByCondition(BWeb.B_WEB.LIC_CONTENT.in(values));
        }

        /**
     * Find records that have <code>LIC_CONTENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByLicContent(Collection<String> values, int limit) {
                return findManyByCondition(BWeb.B_WEB.LIC_CONTENT.in(values),limit);
        }

        /**
     * Find records that have <code>LIC_OP IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByLicOp(Collection<String> values) {
                return findManyByCondition(BWeb.B_WEB.LIC_OP.in(values));
        }

        /**
     * Find records that have <code>LIC_OP IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByLicOp(Collection<String> values, int limit) {
                return findManyByCondition(BWeb.B_WEB.LIC_OP.in(values),limit);
        }

        /**
     * Find records that have <code>LIC_MODULE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByLicModule(Collection<String> values) {
                return findManyByCondition(BWeb.B_WEB.LIC_MODULE.in(values));
        }

        /**
     * Find records that have <code>LIC_MODULE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByLicModule(Collection<String> values, int limit) {
                return findManyByCondition(BWeb.B_WEB.LIC_MODULE.in(values),limit);
        }

        /**
     * Find records that have <code>LIC_TPL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByLicTpl(Collection<String> values) {
                return findManyByCondition(BWeb.B_WEB.LIC_TPL.in(values));
        }

        /**
     * Find records that have <code>LIC_TPL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByLicTpl(Collection<String> values, int limit) {
                return findManyByCondition(BWeb.B_WEB.LIC_TPL.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(BWeb.B_WEB.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(BWeb.B_WEB.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(BWeb.B_WEB.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(BWeb.B_WEB.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(BWeb.B_WEB.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(BWeb.B_WEB.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(BWeb.B_WEB.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.battery.domain.tables.pojos.BWeb>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(BWeb.B_WEB.LANGUAGE.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<BWebRecord,cn.vertxup.battery.domain.tables.pojos.BWeb,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<BWebRecord,cn.vertxup.battery.domain.tables.pojos.BWeb,String>) super.queryExecutor();
        }
}
