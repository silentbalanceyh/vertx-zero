/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.battery.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;

import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.setOrThrow;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IBAuthority extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.B_AUTHORITY.KEY</code>. 「key」- 主键
     */
    public IBAuthority setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.B_AUTHORITY.KEY</code>. 「key」- 主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.B_AUTHORITY.CODE</code>. 「name」- 系统内部编码
     */
    public IBAuthority setCode(String value);

    /**
     * Getter for <code>DB_ETERNAL.B_AUTHORITY.CODE</code>. 「name」- 系统内部编码
     */
    public String getCode();

    /**
     * Setter for <code>DB_ETERNAL.B_AUTHORITY.BLOCK_ID</code>. 「blockId」-
     * 所属模块ID
     */
    public IBAuthority setBlockId(String value);

    /**
     * Getter for <code>DB_ETERNAL.B_AUTHORITY.BLOCK_ID</code>. 「blockId」-
     * 所属模块ID
     */
    public String getBlockId();

    /**
     * Setter for <code>DB_ETERNAL.B_AUTHORITY.TYPE</code>. 「type」- 类型保留，单独区分
     */
    public IBAuthority setType(String value);

    /**
     * Getter for <code>DB_ETERNAL.B_AUTHORITY.TYPE</code>. 「type」- 类型保留，单独区分
     */
    public String getType();

    /**
     * Setter for <code>DB_ETERNAL.B_AUTHORITY.LIC_RESOURCE</code>.
     * 「licResource」- 资源编码
     */
    public IBAuthority setLicResource(String value);

    /**
     * Getter for <code>DB_ETERNAL.B_AUTHORITY.LIC_RESOURCE</code>.
     * 「licResource」- 资源编码
     */
    public String getLicResource();

    /**
     * Setter for <code>DB_ETERNAL.B_AUTHORITY.LIC_ACTION</code>. 「licAction」-
     * 操作编码
     */
    public IBAuthority setLicAction(String value);

    /**
     * Getter for <code>DB_ETERNAL.B_AUTHORITY.LIC_ACTION</code>. 「licAction」-
     * 操作编码
     */
    public String getLicAction();

    /**
     * Setter for <code>DB_ETERNAL.B_AUTHORITY.LIC_PERMISSION</code>.
     * 「licPermission」- 所需权限集合
     */
    public IBAuthority setLicPermission(String value);

    /**
     * Getter for <code>DB_ETERNAL.B_AUTHORITY.LIC_PERMISSION</code>.
     * 「licPermission」- 所需权限集合
     */
    public String getLicPermission();

    /**
     * Setter for <code>DB_ETERNAL.B_AUTHORITY.LIC_VIEW</code>. 「licView」- 视图集合
     */
    public IBAuthority setLicView(String value);

    /**
     * Getter for <code>DB_ETERNAL.B_AUTHORITY.LIC_VIEW</code>. 「licView」- 视图集合
     */
    public String getLicView();

    /**
     * Setter for <code>DB_ETERNAL.B_AUTHORITY.ACTIVE</code>. 「active」- 是否启用
     */
    public IBAuthority setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.B_AUTHORITY.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.B_AUTHORITY.SIGMA</code>. 「sigma」- 统一标识
     */
    public IBAuthority setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.B_AUTHORITY.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.B_AUTHORITY.METADATA</code>. 「metadata」- 附加配置
     */
    public IBAuthority setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.B_AUTHORITY.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.B_AUTHORITY.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public IBAuthority setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.B_AUTHORITY.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public String getLanguage();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IBAuthority
     */
    public void from(IBAuthority from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IBAuthority
     */
    public <E extends IBAuthority> E into(E into);

        @Override
        public default IBAuthority fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setCode,json::getString,"CODE","java.lang.String");
                setOrThrow(this::setBlockId,json::getString,"BLOCK_ID","java.lang.String");
                setOrThrow(this::setType,json::getString,"TYPE","java.lang.String");
                setOrThrow(this::setLicResource,json::getString,"LIC_RESOURCE","java.lang.String");
                setOrThrow(this::setLicAction,json::getString,"LIC_ACTION","java.lang.String");
                setOrThrow(this::setLicPermission,json::getString,"LIC_PERMISSION","java.lang.String");
                setOrThrow(this::setLicView,json::getString,"LIC_VIEW","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("CODE",getCode());
                json.put("BLOCK_ID",getBlockId());
                json.put("TYPE",getType());
                json.put("LIC_RESOURCE",getLicResource());
                json.put("LIC_ACTION",getLicAction());
                json.put("LIC_PERMISSION",getLicPermission());
                json.put("LIC_VIEW",getLicView());
                json.put("ACTIVE",getActive());
                json.put("SIGMA",getSigma());
                json.put("METADATA",getMetadata());
                json.put("LANGUAGE",getLanguage());
                return json;
        }

}
