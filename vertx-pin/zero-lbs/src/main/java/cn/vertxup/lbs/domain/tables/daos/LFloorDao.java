/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.lbs.domain.tables.daos;


import cn.vertxup.lbs.domain.tables.LFloor;
import cn.vertxup.lbs.domain.tables.records.LFloorRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LFloorDao extends AbstractVertxDAO<LFloorRecord, cn.vertxup.lbs.domain.tables.pojos.LFloor, String, Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>>, Future<cn.vertxup.lbs.domain.tables.pojos.LFloor>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<LFloorRecord,cn.vertxup.lbs.domain.tables.pojos.LFloor,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public LFloorDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(LFloor.L_FLOOR, cn.vertxup.lbs.domain.tables.pojos.LFloor.class, new JDBCClassicQueryExecutor<LFloorRecord,cn.vertxup.lbs.domain.tables.pojos.LFloor,String>(configuration,cn.vertxup.lbs.domain.tables.pojos.LFloor.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.lbs.domain.tables.pojos.LFloor object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByName(Collection<String> values) {
                return findManyByCondition(LFloor.L_FLOOR.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(LFloor.L_FLOOR.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByCode(Collection<String> values) {
                return findManyByCondition(LFloor.L_FLOOR.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(LFloor.L_FLOOR.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(LFloor.L_FLOOR.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(LFloor.L_FLOOR.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>ORDER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByOrder(Collection<Integer> values) {
                return findManyByCondition(LFloor.L_FLOOR.ORDER.in(values));
        }

        /**
     * Find records that have <code>ORDER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByOrder(Collection<Integer> values, int limit) {
                return findManyByCondition(LFloor.L_FLOOR.ORDER.in(values),limit);
        }

        /**
     * Find records that have <code>TENT_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByTentId(Collection<String> values) {
                return findManyByCondition(LFloor.L_FLOOR.TENT_ID.in(values));
        }

        /**
     * Find records that have <code>TENT_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByTentId(Collection<String> values, int limit) {
                return findManyByCondition(LFloor.L_FLOOR.TENT_ID.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(LFloor.L_FLOOR.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(LFloor.L_FLOOR.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(LFloor.L_FLOOR.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(LFloor.L_FLOOR.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(LFloor.L_FLOOR.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(LFloor.L_FLOOR.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(LFloor.L_FLOOR.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(LFloor.L_FLOOR.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(LFloor.L_FLOOR.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(LFloor.L_FLOOR.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(LFloor.L_FLOOR.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(LFloor.L_FLOOR.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(LFloor.L_FLOOR.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LFloor>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(LFloor.L_FLOOR.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<LFloorRecord,cn.vertxup.lbs.domain.tables.pojos.LFloor,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<LFloorRecord,cn.vertxup.lbs.domain.tables.pojos.LFloor,String>) super.queryExecutor();
        }
}
