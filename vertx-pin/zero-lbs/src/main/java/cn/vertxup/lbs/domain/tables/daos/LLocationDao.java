/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.lbs.domain.tables.daos;


import cn.vertxup.lbs.domain.tables.LLocation;
import cn.vertxup.lbs.domain.tables.records.LLocationRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LLocationDao extends AbstractVertxDAO<LLocationRecord, cn.vertxup.lbs.domain.tables.pojos.LLocation, String, Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>>, Future<cn.vertxup.lbs.domain.tables.pojos.LLocation>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<LLocationRecord,cn.vertxup.lbs.domain.tables.pojos.LLocation,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     *      * @param vertx the vertx instance
     */
        public LLocationDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(LLocation.L_LOCATION, cn.vertxup.lbs.domain.tables.pojos.LLocation.class, new JDBCClassicQueryExecutor<LLocationRecord,cn.vertxup.lbs.domain.tables.pojos.LLocation,String>(configuration,cn.vertxup.lbs.domain.tables.pojos.LLocation.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.lbs.domain.tables.pojos.LLocation object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByName(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByCode(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>ADDRESS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByAddress(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.ADDRESS.in(values));
        }

        /**
     * Find records that have <code>ADDRESS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByAddress(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.ADDRESS.in(values),limit);
        }

        /**
     * Find records that have <code>CITY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByCity(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.CITY.in(values));
        }

        /**
     * Find records that have <code>CITY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByCity(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.CITY.in(values),limit);
        }

        /**
     * Find records that have <code>COUNTRY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByCountry(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.COUNTRY.in(values));
        }

        /**
     * Find records that have <code>COUNTRY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByCountry(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.COUNTRY.in(values),limit);
        }

        /**
     * Find records that have <code>REGION IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByRegion(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.REGION.in(values));
        }

        /**
     * Find records that have <code>REGION IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByRegion(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.REGION.in(values),limit);
        }

        /**
     * Find records that have <code>FULL_NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByFullName(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.FULL_NAME.in(values));
        }

        /**
     * Find records that have <code>FULL_NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByFullName(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.FULL_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>STATE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByState(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.STATE.in(values));
        }

        /**
     * Find records that have <code>STATE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByState(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.STATE.in(values),limit);
        }

        /**
     * Find records that have <code>STREET1 IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByStreet1(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.STREET1.in(values));
        }

        /**
     * Find records that have <code>STREET1 IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByStreet1(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.STREET1.in(values),limit);
        }

        /**
     * Find records that have <code>STREET2 IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByStreet2(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.STREET2.in(values));
        }

        /**
     * Find records that have <code>STREET2 IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByStreet2(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.STREET2.in(values),limit);
        }

        /**
     * Find records that have <code>STREET3 IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByStreet3(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.STREET3.in(values));
        }

        /**
     * Find records that have <code>STREET3 IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByStreet3(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.STREET3.in(values),limit);
        }

        /**
     * Find records that have <code>POSTAL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByPostal(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.POSTAL.in(values));
        }

        /**
     * Find records that have <code>POSTAL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByPostal(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.POSTAL.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>REGION_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByRegionId(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.REGION_ID.in(values));
        }

        /**
     * Find records that have <code>REGION_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByRegionId(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.REGION_ID.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(LLocation.L_LOCATION.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(LLocation.L_LOCATION.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(LLocation.L_LOCATION.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(LLocation.L_LOCATION.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LLocation>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(LLocation.L_LOCATION.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<LLocationRecord,cn.vertxup.lbs.domain.tables.pojos.LLocation,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<LLocationRecord,cn.vertxup.lbs.domain.tables.pojos.LLocation,String>) super.queryExecutor();
        }
}
