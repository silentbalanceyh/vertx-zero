/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.lbs.domain.tables.daos;


import cn.vertxup.lbs.domain.tables.LCity;
import cn.vertxup.lbs.domain.tables.records.LCityRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LCityDao extends AbstractVertxDAO<LCityRecord, cn.vertxup.lbs.domain.tables.pojos.LCity, String, Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>>, Future<cn.vertxup.lbs.domain.tables.pojos.LCity>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<LCityRecord,cn.vertxup.lbs.domain.tables.pojos.LCity,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     *      * @param vertx the vertx instance
     */
        public LCityDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(LCity.L_CITY, cn.vertxup.lbs.domain.tables.pojos.LCity.class, new JDBCClassicQueryExecutor<LCityRecord,cn.vertxup.lbs.domain.tables.pojos.LCity,String>(configuration,cn.vertxup.lbs.domain.tables.pojos.LCity.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.lbs.domain.tables.pojos.LCity object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByName(Collection<String> values) {
                return findManyByCondition(LCity.L_CITY.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(LCity.L_CITY.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByCode(Collection<String> values) {
                return findManyByCondition(LCity.L_CITY.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(LCity.L_CITY.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(LCity.L_CITY.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(LCity.L_CITY.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>ORDER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByOrder(Collection<Integer> values) {
                return findManyByCondition(LCity.L_CITY.ORDER.in(values));
        }

        /**
     * Find records that have <code>ORDER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByOrder(Collection<Integer> values, int limit) {
                return findManyByCondition(LCity.L_CITY.ORDER.in(values),limit);
        }

        /**
     * Find records that have <code>STATE_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByStateId(Collection<String> values) {
                return findManyByCondition(LCity.L_CITY.STATE_ID.in(values));
        }

        /**
     * Find records that have <code>STATE_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByStateId(Collection<String> values, int limit) {
                return findManyByCondition(LCity.L_CITY.STATE_ID.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(LCity.L_CITY.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(LCity.L_CITY.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(LCity.L_CITY.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(LCity.L_CITY.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(LCity.L_CITY.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(LCity.L_CITY.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(LCity.L_CITY.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(LCity.L_CITY.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(LCity.L_CITY.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(LCity.L_CITY.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(LCity.L_CITY.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(LCity.L_CITY.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(LCity.L_CITY.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCity>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(LCity.L_CITY.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<LCityRecord,cn.vertxup.lbs.domain.tables.pojos.LCity,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<LCityRecord,cn.vertxup.lbs.domain.tables.pojos.LCity,String>) super.queryExecutor();
        }
}
