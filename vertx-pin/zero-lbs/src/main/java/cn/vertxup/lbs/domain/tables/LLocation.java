/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.lbs.domain.tables;


import cn.vertxup.lbs.domain.Db;
import cn.vertxup.lbs.domain.Keys;
import cn.vertxup.lbs.domain.tables.records.LLocationRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class LLocation extends TableImpl<LLocationRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.L_LOCATION</code>
     */
    public static final LLocation L_LOCATION = new LLocation();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.KEY</code>. 「key」- 主键
     */
    public final TableField<LLocationRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 主键");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.NAME</code>. 「name」- 名称
     */
    public final TableField<LLocationRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(32).nullable(false), this, "「name」- 名称");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.CODE</code>. 「code」- 编码
     */
    public final TableField<LLocationRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(36), this, "「code」- 编码");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.ADDRESS</code>. 「address」- 详细地址
     */
    public final TableField<LLocationRecord, String> ADDRESS = createField(DSL.name("ADDRESS"), SQLDataType.CLOB, this, "「address」- 详细地址");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.CITY</code>. 「city」- 3.城市
     */
    public final TableField<LLocationRecord, String> CITY = createField(DSL.name("CITY"), SQLDataType.VARCHAR(32), this, "「city」- 3.城市");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.COUNTRY</code>. 「country」- 1.国家
     */
    public final TableField<LLocationRecord, String> COUNTRY = createField(DSL.name("COUNTRY"), SQLDataType.VARCHAR(32), this, "「country」- 1.国家");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.REGION</code>. 「region」- 4.区域
     */
    public final TableField<LLocationRecord, String> REGION = createField(DSL.name("REGION"), SQLDataType.VARCHAR(32), this, "「region」- 4.区域");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.FULL_NAME</code>. 「fullName」- 地址全称
     */
    public final TableField<LLocationRecord, String> FULL_NAME = createField(DSL.name("FULL_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "「fullName」- 地址全称");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.STATE</code>. 「state」- 2.省会
     */
    public final TableField<LLocationRecord, String> STATE = createField(DSL.name("STATE"), SQLDataType.VARCHAR(32), this, "「state」- 2.省会");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.STREET1</code>. 「street1」- 街道1
     */
    public final TableField<LLocationRecord, String> STREET1 = createField(DSL.name("STREET1"), SQLDataType.VARCHAR(72), this, "「street1」- 街道1");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.STREET2</code>. 「street2」- 街道2
     */
    public final TableField<LLocationRecord, String> STREET2 = createField(DSL.name("STREET2"), SQLDataType.VARCHAR(72), this, "「street2」- 街道2");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.STREET3</code>. 「street3」- 街道3
     */
    public final TableField<LLocationRecord, String> STREET3 = createField(DSL.name("STREET3"), SQLDataType.VARCHAR(72), this, "「street3」- 街道3");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.POSTAL</code>. 「postal」- 邮政编码
     */
    public final TableField<LLocationRecord, String> POSTAL = createField(DSL.name("POSTAL"), SQLDataType.VARCHAR(16), this, "「postal」- 邮政编码");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<LLocationRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.REGION_ID</code>. 「regionId」- 区域ID
     */
    public final TableField<LLocationRecord, String> REGION_ID = createField(DSL.name("REGION_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「regionId」- 区域ID");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<LLocationRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<LLocationRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<LLocationRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<LLocationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public final TableField<LLocationRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<LLocationRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.L_LOCATION.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public final TableField<LLocationRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private LLocation(Name alias, Table<LLocationRecord> aliased) {
        this(alias, aliased, null);
    }

    private LLocation(Name alias, Table<LLocationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.L_LOCATION</code> table reference
     */
    public LLocation(String alias) {
        this(DSL.name(alias), L_LOCATION);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.L_LOCATION</code> table reference
     */
    public LLocation(Name alias) {
        this(alias, L_LOCATION);
    }

    /**
     * Create a <code>DB_ETERNAL.L_LOCATION</code> table reference
     */
    public LLocation() {
        this(DSL.name("L_LOCATION"), null);
    }

    public <O extends Record> LLocation(Table<O> child, ForeignKey<O, LLocationRecord> key) {
        super(child, key, L_LOCATION);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LLocationRecord> getRecordType() {
        return LLocationRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<LLocationRecord> getPrimaryKey() {
        return Keys.KEY_L_LOCATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<LLocationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_L_LOCATION_CODE);
    }

    @Override
    public LLocation as(String alias) {
        return new LLocation(DSL.name(alias), this);
    }

    @Override
    public LLocation as(Name alias) {
        return new LLocation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LLocation rename(String name) {
        return new LLocation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LLocation rename(Name name) {
        return new LLocation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row22) super.fieldsRow();
    }
}
