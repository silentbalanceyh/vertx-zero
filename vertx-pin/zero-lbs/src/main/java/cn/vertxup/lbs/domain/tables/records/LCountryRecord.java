/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.lbs.domain.tables.records;


import cn.vertxup.lbs.domain.tables.LCountry;
import cn.vertxup.lbs.domain.tables.interfaces.ILCountry;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record15;
import org.jooq.Row15;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LCountryRecord extends UpdatableRecordImpl<LCountryRecord> implements VertxPojo, Record15<String, String, String, String, String, String, String, Integer, Boolean, String, String, LocalDateTime, String, LocalDateTime, String>, ILCountry {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.L_COUNTRY.KEY</code>. 「key」- 国家主键
     */
    @Override
    public LCountryRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.L_COUNTRY.KEY</code>. 「key」- 国家主键
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.L_COUNTRY.NAME</code>. 「name」- 国家名称
     */
    @Override
    public LCountryRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.L_COUNTRY.NAME</code>. 「name」- 国家名称
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.L_COUNTRY.CODE</code>. 「code」- 国家编号
     */
    @Override
    public LCountryRecord setCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.L_COUNTRY.CODE</code>. 「code」- 国家编号
     */
    @Override
    public String getCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.L_COUNTRY.FLAG</code>. 「flag」- 国旗
     */
    @Override
    public LCountryRecord setFlag(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.L_COUNTRY.FLAG</code>. 「flag」- 国旗
     */
    @Override
    public String getFlag() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.L_COUNTRY.PHONE_PREFIX</code>. 「phonePrefix」-
     * 电话前缀
     */
    @Override
    public LCountryRecord setPhonePrefix(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.L_COUNTRY.PHONE_PREFIX</code>. 「phonePrefix」-
     * 电话前缀
     */
    @Override
    public String getPhonePrefix() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.L_COUNTRY.CURRENCY</code>. 「currency」- 使用货币
     */
    @Override
    public LCountryRecord setCurrency(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.L_COUNTRY.CURRENCY</code>. 「currency」- 使用货币
     */
    @Override
    public String getCurrency() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.L_COUNTRY.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public LCountryRecord setMetadata(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.L_COUNTRY.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.L_COUNTRY.ORDER</code>. 「order」- 排序
     */
    @Override
    public LCountryRecord setOrder(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.L_COUNTRY.ORDER</code>. 「order」- 排序
     */
    @Override
    public Integer getOrder() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.L_COUNTRY.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public LCountryRecord setActive(Boolean value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.L_COUNTRY.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.L_COUNTRY.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public LCountryRecord setSigma(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.L_COUNTRY.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.L_COUNTRY.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public LCountryRecord setLanguage(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.L_COUNTRY.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.L_COUNTRY.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public LCountryRecord setCreatedAt(LocalDateTime value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.L_COUNTRY.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.L_COUNTRY.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public LCountryRecord setCreatedBy(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.L_COUNTRY.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.L_COUNTRY.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public LCountryRecord setUpdatedAt(LocalDateTime value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.L_COUNTRY.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.L_COUNTRY.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public LCountryRecord setUpdatedBy(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.L_COUNTRY.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(14);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record15 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, String, String, String, String, String, String, Integer, Boolean, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    @Override
    public Row15<String, String, String, String, String, String, String, Integer, Boolean, String, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row15) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return LCountry.L_COUNTRY.KEY;
    }

    @Override
    public Field<String> field2() {
        return LCountry.L_COUNTRY.NAME;
    }

    @Override
    public Field<String> field3() {
        return LCountry.L_COUNTRY.CODE;
    }

    @Override
    public Field<String> field4() {
        return LCountry.L_COUNTRY.FLAG;
    }

    @Override
    public Field<String> field5() {
        return LCountry.L_COUNTRY.PHONE_PREFIX;
    }

    @Override
    public Field<String> field6() {
        return LCountry.L_COUNTRY.CURRENCY;
    }

    @Override
    public Field<String> field7() {
        return LCountry.L_COUNTRY.METADATA;
    }

    @Override
    public Field<Integer> field8() {
        return LCountry.L_COUNTRY.ORDER;
    }

    @Override
    public Field<Boolean> field9() {
        return LCountry.L_COUNTRY.ACTIVE;
    }

    @Override
    public Field<String> field10() {
        return LCountry.L_COUNTRY.SIGMA;
    }

    @Override
    public Field<String> field11() {
        return LCountry.L_COUNTRY.LANGUAGE;
    }

    @Override
    public Field<LocalDateTime> field12() {
        return LCountry.L_COUNTRY.CREATED_AT;
    }

    @Override
    public Field<String> field13() {
        return LCountry.L_COUNTRY.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field14() {
        return LCountry.L_COUNTRY.UPDATED_AT;
    }

    @Override
    public Field<String> field15() {
        return LCountry.L_COUNTRY.UPDATED_BY;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getCode();
    }

    @Override
    public String component4() {
        return getFlag();
    }

    @Override
    public String component5() {
        return getPhonePrefix();
    }

    @Override
    public String component6() {
        return getCurrency();
    }

    @Override
    public String component7() {
        return getMetadata();
    }

    @Override
    public Integer component8() {
        return getOrder();
    }

    @Override
    public Boolean component9() {
        return getActive();
    }

    @Override
    public String component10() {
        return getSigma();
    }

    @Override
    public String component11() {
        return getLanguage();
    }

    @Override
    public LocalDateTime component12() {
        return getCreatedAt();
    }

    @Override
    public String component13() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component14() {
        return getUpdatedAt();
    }

    @Override
    public String component15() {
        return getUpdatedBy();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getCode();
    }

    @Override
    public String value4() {
        return getFlag();
    }

    @Override
    public String value5() {
        return getPhonePrefix();
    }

    @Override
    public String value6() {
        return getCurrency();
    }

    @Override
    public String value7() {
        return getMetadata();
    }

    @Override
    public Integer value8() {
        return getOrder();
    }

    @Override
    public Boolean value9() {
        return getActive();
    }

    @Override
    public String value10() {
        return getSigma();
    }

    @Override
    public String value11() {
        return getLanguage();
    }

    @Override
    public LocalDateTime value12() {
        return getCreatedAt();
    }

    @Override
    public String value13() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value14() {
        return getUpdatedAt();
    }

    @Override
    public String value15() {
        return getUpdatedBy();
    }

    @Override
    public LCountryRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public LCountryRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public LCountryRecord value3(String value) {
        setCode(value);
        return this;
    }

    @Override
    public LCountryRecord value4(String value) {
        setFlag(value);
        return this;
    }

    @Override
    public LCountryRecord value5(String value) {
        setPhonePrefix(value);
        return this;
    }

    @Override
    public LCountryRecord value6(String value) {
        setCurrency(value);
        return this;
    }

    @Override
    public LCountryRecord value7(String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public LCountryRecord value8(Integer value) {
        setOrder(value);
        return this;
    }

    @Override
    public LCountryRecord value9(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public LCountryRecord value10(String value) {
        setSigma(value);
        return this;
    }

    @Override
    public LCountryRecord value11(String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public LCountryRecord value12(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public LCountryRecord value13(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public LCountryRecord value14(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public LCountryRecord value15(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public LCountryRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, Integer value8, Boolean value9, String value10, String value11, LocalDateTime value12, String value13, LocalDateTime value14, String value15) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ILCountry from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setFlag(from.getFlag());
        setPhonePrefix(from.getPhonePrefix());
        setCurrency(from.getCurrency());
        setMetadata(from.getMetadata());
        setOrder(from.getOrder());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends ILCountry> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LCountryRecord
     */
    public LCountryRecord() {
        super(LCountry.L_COUNTRY);
    }

    /**
     * Create a detached, initialised LCountryRecord
     */
    public LCountryRecord(String key, String name, String code, String flag, String phonePrefix, String currency, String metadata, Integer order, Boolean active, String sigma, String language, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(LCountry.L_COUNTRY);

        setKey(key);
        setName(name);
        setCode(code);
        setFlag(flag);
        setPhonePrefix(phonePrefix);
        setCurrency(currency);
        setMetadata(metadata);
        setOrder(order);
        setActive(active);
        setSigma(sigma);
        setLanguage(language);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
    }

    /**
     * Create a detached, initialised LCountryRecord
     */
    public LCountryRecord(cn.vertxup.lbs.domain.tables.pojos.LCountry value) {
        super(LCountry.L_COUNTRY);

        if (value != null) {
            setKey(value.getKey());
            setName(value.getName());
            setCode(value.getCode());
            setFlag(value.getFlag());
            setPhonePrefix(value.getPhonePrefix());
            setCurrency(value.getCurrency());
            setMetadata(value.getMetadata());
            setOrder(value.getOrder());
            setActive(value.getActive());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
        }
    }

        public LCountryRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
