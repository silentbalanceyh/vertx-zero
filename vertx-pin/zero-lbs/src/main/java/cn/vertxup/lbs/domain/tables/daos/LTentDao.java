/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.lbs.domain.tables.daos;


import cn.vertxup.lbs.domain.tables.LTent;
import cn.vertxup.lbs.domain.tables.records.LTentRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LTentDao extends AbstractVertxDAO<LTentRecord, cn.vertxup.lbs.domain.tables.pojos.LTent, String, Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>>, Future<cn.vertxup.lbs.domain.tables.pojos.LTent>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<LTentRecord,cn.vertxup.lbs.domain.tables.pojos.LTent,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     *      * @param vertx the vertx instance
     */
        public LTentDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(LTent.L_TENT, cn.vertxup.lbs.domain.tables.pojos.LTent.class, new JDBCClassicQueryExecutor<LTentRecord,cn.vertxup.lbs.domain.tables.pojos.LTent,String>(configuration,cn.vertxup.lbs.domain.tables.pojos.LTent.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.lbs.domain.tables.pojos.LTent object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByName(Collection<String> values) {
                return findManyByCondition(LTent.L_TENT.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(LTent.L_TENT.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByCode(Collection<String> values) {
                return findManyByCondition(LTent.L_TENT.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(LTent.L_TENT.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>CONTACT_PHONE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByContactPhone(Collection<String> values) {
                return findManyByCondition(LTent.L_TENT.CONTACT_PHONE.in(values));
        }

        /**
     * Find records that have <code>CONTACT_PHONE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByContactPhone(Collection<String> values, int limit) {
                return findManyByCondition(LTent.L_TENT.CONTACT_PHONE.in(values),limit);
        }

        /**
     * Find records that have <code>CONTACT_NAME IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByContactName(Collection<String> values) {
                return findManyByCondition(LTent.L_TENT.CONTACT_NAME.in(values));
        }

        /**
     * Find records that have <code>CONTACT_NAME IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByContactName(Collection<String> values, int limit) {
                return findManyByCondition(LTent.L_TENT.CONTACT_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(LTent.L_TENT.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(LTent.L_TENT.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>ORDER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByOrder(Collection<Integer> values) {
                return findManyByCondition(LTent.L_TENT.ORDER.in(values));
        }

        /**
     * Find records that have <code>ORDER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByOrder(Collection<Integer> values, int limit) {
                return findManyByCondition(LTent.L_TENT.ORDER.in(values),limit);
        }

        /**
     * Find records that have <code>LOCATION_ID IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByLocationId(Collection<String> values) {
                return findManyByCondition(LTent.L_TENT.LOCATION_ID.in(values));
        }

        /**
     * Find records that have <code>LOCATION_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByLocationId(Collection<String> values, int limit) {
                return findManyByCondition(LTent.L_TENT.LOCATION_ID.in(values),limit);
        }

        /**
     * Find records that have <code>YARD_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByYardId(Collection<String> values) {
                return findManyByCondition(LTent.L_TENT.YARD_ID.in(values));
        }

        /**
     * Find records that have <code>YARD_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByYardId(Collection<String> values, int limit) {
                return findManyByCondition(LTent.L_TENT.YARD_ID.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(LTent.L_TENT.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(LTent.L_TENT.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(LTent.L_TENT.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(LTent.L_TENT.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(LTent.L_TENT.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(LTent.L_TENT.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(LTent.L_TENT.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(LTent.L_TENT.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(LTent.L_TENT.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(LTent.L_TENT.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(LTent.L_TENT.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(LTent.L_TENT.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(LTent.L_TENT.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LTent>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(LTent.L_TENT.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<LTentRecord,cn.vertxup.lbs.domain.tables.pojos.LTent,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<LTentRecord,cn.vertxup.lbs.domain.tables.pojos.LTent,String>) super.queryExecutor();
        }
}
