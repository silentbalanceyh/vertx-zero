/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.lbs.domain.tables.daos;


import cn.vertxup.lbs.domain.tables.LCountry;
import cn.vertxup.lbs.domain.tables.records.LCountryRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LCountryDao extends AbstractVertxDAO<LCountryRecord, cn.vertxup.lbs.domain.tables.pojos.LCountry, String, Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>>, Future<cn.vertxup.lbs.domain.tables.pojos.LCountry>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<LCountryRecord,cn.vertxup.lbs.domain.tables.pojos.LCountry,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public LCountryDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(LCountry.L_COUNTRY, cn.vertxup.lbs.domain.tables.pojos.LCountry.class, new JDBCClassicQueryExecutor<LCountryRecord,cn.vertxup.lbs.domain.tables.pojos.LCountry,String>(configuration,cn.vertxup.lbs.domain.tables.pojos.LCountry.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.lbs.domain.tables.pojos.LCountry object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByName(Collection<String> values) {
                return findManyByCondition(LCountry.L_COUNTRY.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(LCountry.L_COUNTRY.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByCode(Collection<String> values) {
                return findManyByCondition(LCountry.L_COUNTRY.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(LCountry.L_COUNTRY.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>FLAG IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByFlag(Collection<String> values) {
                return findManyByCondition(LCountry.L_COUNTRY.FLAG.in(values));
        }

        /**
     * Find records that have <code>FLAG IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByFlag(Collection<String> values, int limit) {
                return findManyByCondition(LCountry.L_COUNTRY.FLAG.in(values),limit);
        }

        /**
     * Find records that have <code>PHONE_PREFIX IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByPhonePrefix(Collection<String> values) {
                return findManyByCondition(LCountry.L_COUNTRY.PHONE_PREFIX.in(values));
        }

        /**
     * Find records that have <code>PHONE_PREFIX IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByPhonePrefix(Collection<String> values, int limit) {
                return findManyByCondition(LCountry.L_COUNTRY.PHONE_PREFIX.in(values),limit);
        }

        /**
     * Find records that have <code>CURRENCY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByCurrency(Collection<String> values) {
                return findManyByCondition(LCountry.L_COUNTRY.CURRENCY.in(values));
        }

        /**
     * Find records that have <code>CURRENCY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByCurrency(Collection<String> values, int limit) {
                return findManyByCondition(LCountry.L_COUNTRY.CURRENCY.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(LCountry.L_COUNTRY.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(LCountry.L_COUNTRY.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>ORDER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByOrder(Collection<Integer> values) {
                return findManyByCondition(LCountry.L_COUNTRY.ORDER.in(values));
        }

        /**
     * Find records that have <code>ORDER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByOrder(Collection<Integer> values, int limit) {
                return findManyByCondition(LCountry.L_COUNTRY.ORDER.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(LCountry.L_COUNTRY.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(LCountry.L_COUNTRY.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(LCountry.L_COUNTRY.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(LCountry.L_COUNTRY.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(LCountry.L_COUNTRY.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(LCountry.L_COUNTRY.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(LCountry.L_COUNTRY.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(LCountry.L_COUNTRY.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(LCountry.L_COUNTRY.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(LCountry.L_COUNTRY.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(LCountry.L_COUNTRY.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(LCountry.L_COUNTRY.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(LCountry.L_COUNTRY.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.lbs.domain.tables.pojos.LCountry>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(LCountry.L_COUNTRY.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<LCountryRecord,cn.vertxup.lbs.domain.tables.pojos.LCountry,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<LCountryRecord,cn.vertxup.lbs.domain.tables.pojos.LCountry,String>) super.queryExecutor();
        }
}
