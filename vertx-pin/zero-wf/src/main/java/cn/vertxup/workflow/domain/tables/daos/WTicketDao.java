/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.workflow.domain.tables.daos;


import cn.vertxup.workflow.domain.tables.WTicket;
import cn.vertxup.workflow.domain.tables.records.WTicketRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WTicketDao extends AbstractVertxDAO<WTicketRecord, cn.vertxup.workflow.domain.tables.pojos.WTicket, String, Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>>, Future<cn.vertxup.workflow.domain.tables.pojos.WTicket>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<WTicketRecord,cn.vertxup.workflow.domain.tables.pojos.WTicket,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public WTicketDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(WTicket.W_TICKET, cn.vertxup.workflow.domain.tables.pojos.WTicket.class, new JDBCClassicQueryExecutor<WTicketRecord,cn.vertxup.workflow.domain.tables.pojos.WTicket,String>(configuration,cn.vertxup.workflow.domain.tables.pojos.WTicket.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.workflow.domain.tables.pojos.WTicket object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyBySerial(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.SERIAL.in(values));
        }

        /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyBySerial(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.SERIAL.in(values),limit);
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByName(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCode(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByType(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>PHASE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByPhase(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.PHASE.in(values));
        }

        /**
     * Find records that have <code>PHASE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByPhase(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.PHASE.in(values),limit);
        }

        /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByModelId(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.MODEL_ID.in(values));
        }

        /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByModelId(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.MODEL_ID.in(values),limit);
        }

        /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByModelKey(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.MODEL_KEY.in(values));
        }

        /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByModelKey(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.MODEL_KEY.in(values),limit);
        }

        /**
     * Find records that have <code>MODEL_CATEGORY IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByModelCategory(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.MODEL_CATEGORY.in(values));
        }

        /**
     * Find records that have <code>MODEL_CATEGORY IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByModelCategory(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.MODEL_CATEGORY.in(values),limit);
        }

        /**
     * Find records that have <code>MODEL_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByModelComponent(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.MODEL_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>MODEL_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByModelComponent(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.MODEL_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>MODEL_CHILD IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByModelChild(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.MODEL_CHILD.in(values));
        }

        /**
     * Find records that have <code>MODEL_CHILD IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByModelChild(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.MODEL_CHILD.in(values),limit);
        }

        /**
     * Find records that have <code>QUANTITY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByQuantity(Collection<Integer> values) {
                return findManyByCondition(WTicket.W_TICKET.QUANTITY.in(values));
        }

        /**
     * Find records that have <code>QUANTITY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByQuantity(Collection<Integer> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.QUANTITY.in(values),limit);
        }

        /**
     * Find records that have <code>FLOW_DEFINITION_KEY IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByFlowDefinitionKey(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.FLOW_DEFINITION_KEY.in(values));
        }

        /**
     * Find records that have <code>FLOW_DEFINITION_KEY IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByFlowDefinitionKey(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.FLOW_DEFINITION_KEY.in(values),limit);
        }

        /**
     * Find records that have <code>FLOW_DEFINITION_ID IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByFlowDefinitionId(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.FLOW_DEFINITION_ID.in(values));
        }

        /**
     * Find records that have <code>FLOW_DEFINITION_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByFlowDefinitionId(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.FLOW_DEFINITION_ID.in(values),limit);
        }

        /**
     * Find records that have <code>FLOW_INSTANCE_ID IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByFlowInstanceId(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.FLOW_INSTANCE_ID.in(values));
        }

        /**
     * Find records that have <code>FLOW_INSTANCE_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByFlowInstanceId(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.FLOW_INSTANCE_ID.in(values),limit);
        }

        /**
     * Find records that have <code>FLOW_END IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByFlowEnd(Collection<Boolean> values) {
                return findManyByCondition(WTicket.W_TICKET.FLOW_END.in(values));
        }

        /**
     * Find records that have <code>FLOW_END IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByFlowEnd(Collection<Boolean> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.FLOW_END.in(values),limit);
        }

        /**
     * Find records that have <code>TITLE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByTitle(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.TITLE.in(values));
        }

        /**
     * Find records that have <code>TITLE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByTitle(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.TITLE.in(values),limit);
        }

        /**
     * Find records that have <code>DESCRIPTION IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByDescription(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.DESCRIPTION.in(values));
        }

        /**
     * Find records that have <code>DESCRIPTION IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByDescription(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.DESCRIPTION.in(values),limit);
        }

        /**
     * Find records that have <code>CATALOG IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCatalog(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.CATALOG.in(values));
        }

        /**
     * Find records that have <code>CATALOG IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCatalog(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.CATALOG.in(values),limit);
        }

        /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCategory(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.CATEGORY.in(values));
        }

        /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCategory(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.CATEGORY.in(values),limit);
        }

        /**
     * Find records that have <code>CATEGORY_SUB IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCategorySub(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.CATEGORY_SUB.in(values));
        }

        /**
     * Find records that have <code>CATEGORY_SUB IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCategorySub(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.CATEGORY_SUB.in(values),limit);
        }

        /**
     * Find records that have <code>OWNER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByOwner(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.OWNER.in(values));
        }

        /**
     * Find records that have <code>OWNER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByOwner(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.OWNER.in(values),limit);
        }

        /**
     * Find records that have <code>SUPERVISOR IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyBySupervisor(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.SUPERVISOR.in(values));
        }

        /**
     * Find records that have <code>SUPERVISOR IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyBySupervisor(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.SUPERVISOR.in(values),limit);
        }

        /**
     * Find records that have <code>OPEN_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByOpenBy(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.OPEN_BY.in(values));
        }

        /**
     * Find records that have <code>OPEN_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByOpenBy(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.OPEN_BY.in(values),limit);
        }

        /**
     * Find records that have <code>OPEN_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByOpenAt(Collection<LocalDateTime> values) {
                return findManyByCondition(WTicket.W_TICKET.OPEN_AT.in(values));
        }

        /**
     * Find records that have <code>OPEN_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByOpenAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.OPEN_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CANCEL_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCancelBy(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.CANCEL_BY.in(values));
        }

        /**
     * Find records that have <code>CANCEL_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCancelBy(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.CANCEL_BY.in(values),limit);
        }

        /**
     * Find records that have <code>CANCEL_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCancelAt(Collection<LocalDateTime> values) {
                return findManyByCondition(WTicket.W_TICKET.CANCEL_AT.in(values));
        }

        /**
     * Find records that have <code>CANCEL_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCancelAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.CANCEL_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CLOSE_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCloseBy(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.CLOSE_BY.in(values));
        }

        /**
     * Find records that have <code>CLOSE_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCloseBy(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.CLOSE_BY.in(values),limit);
        }

        /**
     * Find records that have <code>CLOSE_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCloseAt(Collection<LocalDateTime> values) {
                return findManyByCondition(WTicket.W_TICKET.CLOSE_AT.in(values));
        }

        /**
     * Find records that have <code>CLOSE_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCloseAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.CLOSE_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CLOSE_SOLUTION IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCloseSolution(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.CLOSE_SOLUTION.in(values));
        }

        /**
     * Find records that have <code>CLOSE_SOLUTION IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCloseSolution(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.CLOSE_SOLUTION.in(values),limit);
        }

        /**
     * Find records that have <code>CLOSE_CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCloseCode(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.CLOSE_CODE.in(values));
        }

        /**
     * Find records that have <code>CLOSE_CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCloseCode(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.CLOSE_CODE.in(values),limit);
        }

        /**
     * Find records that have <code>CLOSE_KB IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCloseKb(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.CLOSE_KB.in(values));
        }

        /**
     * Find records that have <code>CLOSE_KB IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCloseKb(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.CLOSE_KB.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(WTicket.W_TICKET.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(WTicket.W_TICKET.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(WTicket.W_TICKET.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(WTicket.W_TICKET.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.workflow.domain.tables.pojos.WTicket>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(WTicket.W_TICKET.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<WTicketRecord,cn.vertxup.workflow.domain.tables.pojos.WTicket,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<WTicketRecord,cn.vertxup.workflow.domain.tables.pojos.WTicket,String>) super.queryExecutor();
        }
}
