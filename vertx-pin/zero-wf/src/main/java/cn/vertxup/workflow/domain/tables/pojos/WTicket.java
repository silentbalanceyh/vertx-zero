/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.workflow.domain.tables.pojos;


import cn.vertxup.workflow.domain.tables.interfaces.IWTicket;
import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WTicket implements VertxPojo, IWTicket {

    private static final long serialVersionUID = 1L;

    private String key;
    private String serial;
    private String name;
    private String code;
    private String type;
    private String phase;
    private String modelId;
    private String modelKey;
    private String modelCategory;
    private String modelComponent;
    private String modelChild;
    private Integer quantity;
    private String flowDefinitionKey;
    private String flowDefinitionId;
    private String flowInstanceId;
    private Boolean flowEnd;
    private String title;
    private String description;
    private String catalog;
    private String category;
    private String categorySub;
    private String owner;
    private String supervisor;
    private String openBy;
    private String openGroup;
    private LocalDateTime openAt;
    private String cancelBy;
    private LocalDateTime cancelAt;
    private String closeBy;
    private LocalDateTime closeAt;
    private String closeSolution;
    private String closeCode;
    private String closeKb;
    private Boolean active;
    private String sigma;
    private String metadata;
    private String language;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public WTicket() {}

    public WTicket(IWTicket value) {
        this.key = value.getKey();
        this.serial = value.getSerial();
        this.name = value.getName();
        this.code = value.getCode();
        this.type = value.getType();
        this.phase = value.getPhase();
        this.modelId = value.getModelId();
        this.modelKey = value.getModelKey();
        this.modelCategory = value.getModelCategory();
        this.modelComponent = value.getModelComponent();
        this.modelChild = value.getModelChild();
        this.quantity = value.getQuantity();
        this.flowDefinitionKey = value.getFlowDefinitionKey();
        this.flowDefinitionId = value.getFlowDefinitionId();
        this.flowInstanceId = value.getFlowInstanceId();
        this.flowEnd = value.getFlowEnd();
        this.title = value.getTitle();
        this.description = value.getDescription();
        this.catalog = value.getCatalog();
        this.category = value.getCategory();
        this.categorySub = value.getCategorySub();
        this.owner = value.getOwner();
        this.supervisor = value.getSupervisor();
        this.openBy = value.getOpenBy();
        this.openGroup = value.getOpenGroup();
        this.openAt = value.getOpenAt();
        this.cancelBy = value.getCancelBy();
        this.cancelAt = value.getCancelAt();
        this.closeBy = value.getCloseBy();
        this.closeAt = value.getCloseAt();
        this.closeSolution = value.getCloseSolution();
        this.closeCode = value.getCloseCode();
        this.closeKb = value.getCloseKb();
        this.active = value.getActive();
        this.sigma = value.getSigma();
        this.metadata = value.getMetadata();
        this.language = value.getLanguage();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public WTicket(
        String key,
        String serial,
        String name,
        String code,
        String type,
        String phase,
        String modelId,
        String modelKey,
        String modelCategory,
        String modelComponent,
        String modelChild,
        Integer quantity,
        String flowDefinitionKey,
        String flowDefinitionId,
        String flowInstanceId,
        Boolean flowEnd,
        String title,
        String description,
        String catalog,
        String category,
        String categorySub,
        String owner,
        String supervisor,
        String openBy,
        String openGroup,
        LocalDateTime openAt,
        String cancelBy,
        LocalDateTime cancelAt,
        String closeBy,
        LocalDateTime closeAt,
        String closeSolution,
        String closeCode,
        String closeKb,
        Boolean active,
        String sigma,
        String metadata,
        String language,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.serial = serial;
        this.name = name;
        this.code = code;
        this.type = type;
        this.phase = phase;
        this.modelId = modelId;
        this.modelKey = modelKey;
        this.modelCategory = modelCategory;
        this.modelComponent = modelComponent;
        this.modelChild = modelChild;
        this.quantity = quantity;
        this.flowDefinitionKey = flowDefinitionKey;
        this.flowDefinitionId = flowDefinitionId;
        this.flowInstanceId = flowInstanceId;
        this.flowEnd = flowEnd;
        this.title = title;
        this.description = description;
        this.catalog = catalog;
        this.category = category;
        this.categorySub = categorySub;
        this.owner = owner;
        this.supervisor = supervisor;
        this.openBy = openBy;
        this.openGroup = openGroup;
        this.openAt = openAt;
        this.cancelBy = cancelBy;
        this.cancelAt = cancelAt;
        this.closeBy = closeBy;
        this.closeAt = closeAt;
        this.closeSolution = closeSolution;
        this.closeCode = closeCode;
        this.closeKb = closeKb;
        this.active = active;
        this.sigma = sigma;
        this.metadata = metadata;
        this.language = language;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public WTicket(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.KEY</code>. 「key」- 单据主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.KEY</code>. 「key」- 单据主键
     */
    @Override
    public WTicket setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.SERIAL</code>. 「serial」- 单据编号，使用
     * X_NUMBER 生成
     */
    @Override
    public String getSerial() {
        return this.serial;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.SERIAL</code>. 「serial」- 单据编号，使用
     * X_NUMBER 生成
     */
    @Override
    public WTicket setSerial(String serial) {
        this.serial = serial;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.NAME</code>. 「name」- 单据标题
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.NAME</code>. 「name」- 单据标题
     */
    @Override
    public WTicket setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.CODE</code>. 「code」- 单据系统编号（内码）
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.CODE</code>. 「code」- 单据系统编号（内码）
     */
    @Override
    public WTicket setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.TYPE</code>. 「type」- 主单类型类型
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.TYPE</code>. 「type」- 主单类型类型
     */
    @Override
    public WTicket setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.PHASE</code>. 「phase」-
     * 主单据所属阶段（状态描述，由于挂TODO，所以不使用status）
     */
    @Override
    public String getPhase() {
        return this.phase;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.PHASE</code>. 「phase」-
     * 主单据所属阶段（状态描述，由于挂TODO，所以不使用status）
     */
    @Override
    public WTicket setPhase(String phase) {
        this.phase = phase;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public String getModelId() {
        return this.modelId;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public WTicket setModelId(String modelId) {
        this.modelId = modelId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public String getModelKey() {
        return this.modelKey;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public WTicket setModelKey(String modelKey) {
        this.modelKey = modelKey;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.MODEL_CATEGORY</code>.
     * 「modelCategory」- 关联的category记录，只包含叶节点
     */
    @Override
    public String getModelCategory() {
        return this.modelCategory;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.MODEL_CATEGORY</code>.
     * 「modelCategory」- 关联的category记录，只包含叶节点
     */
    @Override
    public WTicket setModelCategory(String modelCategory) {
        this.modelCategory = modelCategory;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.MODEL_COMPONENT</code>.
     * 「modelComponent」- 关联的待办组件记录
     */
    @Override
    public String getModelComponent() {
        return this.modelComponent;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.MODEL_COMPONENT</code>.
     * 「modelComponent」- 关联的待办组件记录
     */
    @Override
    public WTicket setModelComponent(String modelComponent) {
        this.modelComponent = modelComponent;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.MODEL_CHILD</code>. 「modelChild」-
     * 关联多个模型的记录ID，JsonArray格式
     */
    @Override
    public String getModelChild() {
        return this.modelChild;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.MODEL_CHILD</code>. 「modelChild」-
     * 关联多个模型的记录ID，JsonArray格式
     */
    @Override
    public WTicket setModelChild(String modelChild) {
        this.modelChild = modelChild;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.QUANTITY</code>. 「quantity」-
     * 数量信息，多个模型记录时统计模型总数
     */
    @Override
    public Integer getQuantity() {
        return this.quantity;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.QUANTITY</code>. 「quantity」-
     * 数量信息，多个模型记录时统计模型总数
     */
    @Override
    public WTicket setQuantity(Integer quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.FLOW_DEFINITION_KEY</code>.
     * 「flowDefinitionKey」- 流程定义的KEY, getProcessDefinitionKey
     */
    @Override
    public String getFlowDefinitionKey() {
        return this.flowDefinitionKey;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.FLOW_DEFINITION_KEY</code>.
     * 「flowDefinitionKey」- 流程定义的KEY, getProcessDefinitionKey
     */
    @Override
    public WTicket setFlowDefinitionKey(String flowDefinitionKey) {
        this.flowDefinitionKey = flowDefinitionKey;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.FLOW_DEFINITION_ID</code>.
     * 「flowDefinitionId」- 流程定义的ID，getProcessDefinitionKey
     */
    @Override
    public String getFlowDefinitionId() {
        return this.flowDefinitionId;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.FLOW_DEFINITION_ID</code>.
     * 「flowDefinitionId」- 流程定义的ID，getProcessDefinitionKey
     */
    @Override
    public WTicket setFlowDefinitionId(String flowDefinitionId) {
        this.flowDefinitionId = flowDefinitionId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.FLOW_INSTANCE_ID</code>.
     * 「flowInstanceId」- 流程定义的ID，getProcessId
     */
    @Override
    public String getFlowInstanceId() {
        return this.flowInstanceId;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.FLOW_INSTANCE_ID</code>.
     * 「flowInstanceId」- 流程定义的ID，getProcessId
     */
    @Override
    public WTicket setFlowInstanceId(String flowInstanceId) {
        this.flowInstanceId = flowInstanceId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.FLOW_END</code>. 「flowEnd」- 主单是否执行完成
     */
    @Override
    public Boolean getFlowEnd() {
        return this.flowEnd;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.FLOW_END</code>. 「flowEnd」- 主单是否执行完成
     */
    @Override
    public WTicket setFlowEnd(Boolean flowEnd) {
        this.flowEnd = flowEnd;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.TITLE</code>. 「title」- 主单业务标题
     */
    @Override
    public String getTitle() {
        return this.title;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.TITLE</code>. 「title」- 主单业务标题
     */
    @Override
    public WTicket setTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.DESCRIPTION</code>. 「description」-
     * 主单描述内容
     */
    @Override
    public String getDescription() {
        return this.description;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.DESCRIPTION</code>. 「description」-
     * 主单描述内容
     */
    @Override
    public WTicket setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.CATALOG</code>. 「catalog」- 关联服务目录
     */
    @Override
    public String getCatalog() {
        return this.catalog;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.CATALOG</code>. 「catalog」- 关联服务目录
     */
    @Override
    public WTicket setCatalog(String catalog) {
        this.catalog = catalog;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.CATEGORY</code>. 「category」- 业务类别
     */
    @Override
    public String getCategory() {
        return this.category;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.CATEGORY</code>. 「category」- 业务类别
     */
    @Override
    public WTicket setCategory(String category) {
        this.category = category;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.CATEGORY_SUB</code>. 「categorySub」-
     * 子类别
     */
    @Override
    public String getCategorySub() {
        return this.categorySub;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.CATEGORY_SUB</code>. 「categorySub」-
     * 子类别
     */
    @Override
    public WTicket setCategorySub(String categorySub) {
        this.categorySub = categorySub;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.OWNER</code>. 「owner」- 制单人/拥有者
     */
    @Override
    public String getOwner() {
        return this.owner;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.OWNER</code>. 「owner」- 制单人/拥有者
     */
    @Override
    public WTicket setOwner(String owner) {
        this.owner = owner;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.SUPERVISOR</code>. 「supervisor」- 监督人
     */
    @Override
    public String getSupervisor() {
        return this.supervisor;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.SUPERVISOR</code>. 「supervisor」- 监督人
     */
    @Override
    public WTicket setSupervisor(String supervisor) {
        this.supervisor = supervisor;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.OPEN_BY</code>. 「openBy」- 开单人
     */
    @Override
    public String getOpenBy() {
        return this.openBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.OPEN_BY</code>. 「openBy」- 开单人
     */
    @Override
    public WTicket setOpenBy(String openBy) {
        this.openBy = openBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.OPEN_GROUP</code>. 「openGroup」- 开单组
     */
    @Override
    public String getOpenGroup() {
        return this.openGroup;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.OPEN_GROUP</code>. 「openGroup」- 开单组
     */
    @Override
    public WTicket setOpenGroup(String openGroup) {
        this.openGroup = openGroup;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.OPEN_AT</code>. 「openAt」- 开单时间
     */
    @Override
    public LocalDateTime getOpenAt() {
        return this.openAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.OPEN_AT</code>. 「openAt」- 开单时间
     */
    @Override
    public WTicket setOpenAt(LocalDateTime openAt) {
        this.openAt = openAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.CANCEL_BY</code>. 「cancelBy」- 中断人
     */
    @Override
    public String getCancelBy() {
        return this.cancelBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.CANCEL_BY</code>. 「cancelBy」- 中断人
     */
    @Override
    public WTicket setCancelBy(String cancelBy) {
        this.cancelBy = cancelBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.CANCEL_AT</code>. 「cancelAt」- 中断时间
     */
    @Override
    public LocalDateTime getCancelAt() {
        return this.cancelAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.CANCEL_AT</code>. 「cancelAt」- 中断时间
     */
    @Override
    public WTicket setCancelAt(LocalDateTime cancelAt) {
        this.cancelAt = cancelAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.CLOSE_BY</code>. 「closeBy」- 关闭人
     */
    @Override
    public String getCloseBy() {
        return this.closeBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.CLOSE_BY</code>. 「closeBy」- 关闭人
     */
    @Override
    public WTicket setCloseBy(String closeBy) {
        this.closeBy = closeBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.CLOSE_AT</code>. 「closeAt」- 关闭时间
     */
    @Override
    public LocalDateTime getCloseAt() {
        return this.closeAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.CLOSE_AT</code>. 「closeAt」- 关闭时间
     */
    @Override
    public WTicket setCloseAt(LocalDateTime closeAt) {
        this.closeAt = closeAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.CLOSE_SOLUTION</code>.
     * 「closeSolution」- 关闭解决方案
     */
    @Override
    public String getCloseSolution() {
        return this.closeSolution;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.CLOSE_SOLUTION</code>.
     * 「closeSolution」- 关闭解决方案
     */
    @Override
    public WTicket setCloseSolution(String closeSolution) {
        this.closeSolution = closeSolution;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.CLOSE_CODE</code>. 「closeCode」- 关闭代码
     */
    @Override
    public String getCloseCode() {
        return this.closeCode;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.CLOSE_CODE</code>. 「closeCode」- 关闭代码
     */
    @Override
    public WTicket setCloseCode(String closeCode) {
        this.closeCode = closeCode;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.CLOSE_KB</code>. 「closeKb」-
     * 关闭时KB链接地址
     */
    @Override
    public String getCloseKb() {
        return this.closeKb;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.CLOSE_KB</code>. 「closeKb」-
     * 关闭时KB链接地址
     */
    @Override
    public WTicket setCloseKb(String closeKb) {
        this.closeKb = closeKb;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public WTicket setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public WTicket setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public WTicket setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public WTicket setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public WTicket setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public WTicket setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public WTicket setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.W_TICKET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.W_TICKET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public WTicket setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final WTicket other = (WTicket) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        }
        else if (!this.key.equals(other.key))
            return false;
        if (this.serial == null) {
            if (other.serial != null)
                return false;
        }
        else if (!this.serial.equals(other.serial))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.code == null) {
            if (other.code != null)
                return false;
        }
        else if (!this.code.equals(other.code))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        if (this.phase == null) {
            if (other.phase != null)
                return false;
        }
        else if (!this.phase.equals(other.phase))
            return false;
        if (this.modelId == null) {
            if (other.modelId != null)
                return false;
        }
        else if (!this.modelId.equals(other.modelId))
            return false;
        if (this.modelKey == null) {
            if (other.modelKey != null)
                return false;
        }
        else if (!this.modelKey.equals(other.modelKey))
            return false;
        if (this.modelCategory == null) {
            if (other.modelCategory != null)
                return false;
        }
        else if (!this.modelCategory.equals(other.modelCategory))
            return false;
        if (this.modelComponent == null) {
            if (other.modelComponent != null)
                return false;
        }
        else if (!this.modelComponent.equals(other.modelComponent))
            return false;
        if (this.modelChild == null) {
            if (other.modelChild != null)
                return false;
        }
        else if (!this.modelChild.equals(other.modelChild))
            return false;
        if (this.quantity == null) {
            if (other.quantity != null)
                return false;
        }
        else if (!this.quantity.equals(other.quantity))
            return false;
        if (this.flowDefinitionKey == null) {
            if (other.flowDefinitionKey != null)
                return false;
        }
        else if (!this.flowDefinitionKey.equals(other.flowDefinitionKey))
            return false;
        if (this.flowDefinitionId == null) {
            if (other.flowDefinitionId != null)
                return false;
        }
        else if (!this.flowDefinitionId.equals(other.flowDefinitionId))
            return false;
        if (this.flowInstanceId == null) {
            if (other.flowInstanceId != null)
                return false;
        }
        else if (!this.flowInstanceId.equals(other.flowInstanceId))
            return false;
        if (this.flowEnd == null) {
            if (other.flowEnd != null)
                return false;
        }
        else if (!this.flowEnd.equals(other.flowEnd))
            return false;
        if (this.title == null) {
            if (other.title != null)
                return false;
        }
        else if (!this.title.equals(other.title))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        if (this.catalog == null) {
            if (other.catalog != null)
                return false;
        }
        else if (!this.catalog.equals(other.catalog))
            return false;
        if (this.category == null) {
            if (other.category != null)
                return false;
        }
        else if (!this.category.equals(other.category))
            return false;
        if (this.categorySub == null) {
            if (other.categorySub != null)
                return false;
        }
        else if (!this.categorySub.equals(other.categorySub))
            return false;
        if (this.owner == null) {
            if (other.owner != null)
                return false;
        }
        else if (!this.owner.equals(other.owner))
            return false;
        if (this.supervisor == null) {
            if (other.supervisor != null)
                return false;
        }
        else if (!this.supervisor.equals(other.supervisor))
            return false;
        if (this.openBy == null) {
            if (other.openBy != null)
                return false;
        }
        else if (!this.openBy.equals(other.openBy))
            return false;
        if (this.openGroup == null) {
            if (other.openGroup != null)
                return false;
        }
        else if (!this.openGroup.equals(other.openGroup))
            return false;
        if (this.openAt == null) {
            if (other.openAt != null)
                return false;
        }
        else if (!this.openAt.equals(other.openAt))
            return false;
        if (this.cancelBy == null) {
            if (other.cancelBy != null)
                return false;
        }
        else if (!this.cancelBy.equals(other.cancelBy))
            return false;
        if (this.cancelAt == null) {
            if (other.cancelAt != null)
                return false;
        }
        else if (!this.cancelAt.equals(other.cancelAt))
            return false;
        if (this.closeBy == null) {
            if (other.closeBy != null)
                return false;
        }
        else if (!this.closeBy.equals(other.closeBy))
            return false;
        if (this.closeAt == null) {
            if (other.closeAt != null)
                return false;
        }
        else if (!this.closeAt.equals(other.closeAt))
            return false;
        if (this.closeSolution == null) {
            if (other.closeSolution != null)
                return false;
        }
        else if (!this.closeSolution.equals(other.closeSolution))
            return false;
        if (this.closeCode == null) {
            if (other.closeCode != null)
                return false;
        }
        else if (!this.closeCode.equals(other.closeCode))
            return false;
        if (this.closeKb == null) {
            if (other.closeKb != null)
                return false;
        }
        else if (!this.closeKb.equals(other.closeKb))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        }
        else if (!this.active.equals(other.active))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        }
        else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        }
        else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        }
        else if (!this.language.equals(other.language))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.serial == null) ? 0 : this.serial.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.phase == null) ? 0 : this.phase.hashCode());
        result = prime * result + ((this.modelId == null) ? 0 : this.modelId.hashCode());
        result = prime * result + ((this.modelKey == null) ? 0 : this.modelKey.hashCode());
        result = prime * result + ((this.modelCategory == null) ? 0 : this.modelCategory.hashCode());
        result = prime * result + ((this.modelComponent == null) ? 0 : this.modelComponent.hashCode());
        result = prime * result + ((this.modelChild == null) ? 0 : this.modelChild.hashCode());
        result = prime * result + ((this.quantity == null) ? 0 : this.quantity.hashCode());
        result = prime * result + ((this.flowDefinitionKey == null) ? 0 : this.flowDefinitionKey.hashCode());
        result = prime * result + ((this.flowDefinitionId == null) ? 0 : this.flowDefinitionId.hashCode());
        result = prime * result + ((this.flowInstanceId == null) ? 0 : this.flowInstanceId.hashCode());
        result = prime * result + ((this.flowEnd == null) ? 0 : this.flowEnd.hashCode());
        result = prime * result + ((this.title == null) ? 0 : this.title.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        result = prime * result + ((this.catalog == null) ? 0 : this.catalog.hashCode());
        result = prime * result + ((this.category == null) ? 0 : this.category.hashCode());
        result = prime * result + ((this.categorySub == null) ? 0 : this.categorySub.hashCode());
        result = prime * result + ((this.owner == null) ? 0 : this.owner.hashCode());
        result = prime * result + ((this.supervisor == null) ? 0 : this.supervisor.hashCode());
        result = prime * result + ((this.openBy == null) ? 0 : this.openBy.hashCode());
        result = prime * result + ((this.openGroup == null) ? 0 : this.openGroup.hashCode());
        result = prime * result + ((this.openAt == null) ? 0 : this.openAt.hashCode());
        result = prime * result + ((this.cancelBy == null) ? 0 : this.cancelBy.hashCode());
        result = prime * result + ((this.cancelAt == null) ? 0 : this.cancelAt.hashCode());
        result = prime * result + ((this.closeBy == null) ? 0 : this.closeBy.hashCode());
        result = prime * result + ((this.closeAt == null) ? 0 : this.closeAt.hashCode());
        result = prime * result + ((this.closeSolution == null) ? 0 : this.closeSolution.hashCode());
        result = prime * result + ((this.closeCode == null) ? 0 : this.closeCode.hashCode());
        result = prime * result + ((this.closeKb == null) ? 0 : this.closeKb.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("WTicket (");

        sb.append(key);
        sb.append(", ").append(serial);
        sb.append(", ").append(name);
        sb.append(", ").append(code);
        sb.append(", ").append(type);
        sb.append(", ").append(phase);
        sb.append(", ").append(modelId);
        sb.append(", ").append(modelKey);
        sb.append(", ").append(modelCategory);
        sb.append(", ").append(modelComponent);
        sb.append(", ").append(modelChild);
        sb.append(", ").append(quantity);
        sb.append(", ").append(flowDefinitionKey);
        sb.append(", ").append(flowDefinitionId);
        sb.append(", ").append(flowInstanceId);
        sb.append(", ").append(flowEnd);
        sb.append(", ").append(title);
        sb.append(", ").append(description);
        sb.append(", ").append(catalog);
        sb.append(", ").append(category);
        sb.append(", ").append(categorySub);
        sb.append(", ").append(owner);
        sb.append(", ").append(supervisor);
        sb.append(", ").append(openBy);
        sb.append(", ").append(openGroup);
        sb.append(", ").append(openAt);
        sb.append(", ").append(cancelBy);
        sb.append(", ").append(cancelAt);
        sb.append(", ").append(closeBy);
        sb.append(", ").append(closeAt);
        sb.append(", ").append(closeSolution);
        sb.append(", ").append(closeCode);
        sb.append(", ").append(closeKb);
        sb.append(", ").append(active);
        sb.append(", ").append(sigma);
        sb.append(", ").append(metadata);
        sb.append(", ").append(language);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IWTicket from) {
        setKey(from.getKey());
        setSerial(from.getSerial());
        setName(from.getName());
        setCode(from.getCode());
        setType(from.getType());
        setPhase(from.getPhase());
        setModelId(from.getModelId());
        setModelKey(from.getModelKey());
        setModelCategory(from.getModelCategory());
        setModelComponent(from.getModelComponent());
        setModelChild(from.getModelChild());
        setQuantity(from.getQuantity());
        setFlowDefinitionKey(from.getFlowDefinitionKey());
        setFlowDefinitionId(from.getFlowDefinitionId());
        setFlowInstanceId(from.getFlowInstanceId());
        setFlowEnd(from.getFlowEnd());
        setTitle(from.getTitle());
        setDescription(from.getDescription());
        setCatalog(from.getCatalog());
        setCategory(from.getCategory());
        setCategorySub(from.getCategorySub());
        setOwner(from.getOwner());
        setSupervisor(from.getSupervisor());
        setOpenBy(from.getOpenBy());
        setOpenGroup(from.getOpenGroup());
        setOpenAt(from.getOpenAt());
        setCancelBy(from.getCancelBy());
        setCancelAt(from.getCancelAt());
        setCloseBy(from.getCloseBy());
        setCloseAt(from.getCloseAt());
        setCloseSolution(from.getCloseSolution());
        setCloseCode(from.getCloseCode());
        setCloseKb(from.getCloseKb());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IWTicket> E into(E into) {
        into.from(this);
        return into;
    }
}
