/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables.pojos;


import cn.vertxup.rbac.domain.tables.interfaces.IOAccessToken;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OAccessToken implements VertxPojo, IOAccessToken {

    private static final long serialVersionUID = 1L;

    private String        key;
    private byte[]        token;
    private byte[]        auth;
    private Long          expiredTime;
    private byte[]        refreshToken;
    private String        language;
    private Boolean       active;
    private String        metadata;
    private LocalDateTime createdAt;
    private String        createdBy;

    public OAccessToken() {}

    public OAccessToken(IOAccessToken value) {
        this.key = value.getKey();
        this.token = value.getToken();
        this.auth = value.getAuth();
        this.expiredTime = value.getExpiredTime();
        this.refreshToken = value.getRefreshToken();
        this.language = value.getLanguage();
        this.active = value.getActive();
        this.metadata = value.getMetadata();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
    }

    public OAccessToken(
        String        key,
        byte[]        token,
        byte[]        auth,
        Long          expiredTime,
        byte[]        refreshToken,
        String        language,
        Boolean       active,
        String        metadata,
        LocalDateTime createdAt,
        String        createdBy
    ) {
        this.key = key;
        this.token = token;
        this.auth = auth;
        this.expiredTime = expiredTime;
        this.refreshToken = refreshToken;
        this.language = language;
        this.active = active;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
    }

        public OAccessToken(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.KEY</code>. 「key」- 令牌主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.KEY</code>. 「key」- 令牌主键
     */
    @Override
    public OAccessToken setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.TOKEN</code>. 「token」-
     * 用户的Token信息
     */
    @Override
    public byte[] getToken() {
        return this.token;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.TOKEN</code>. 「token」-
     * 用户的Token信息
     */
    @Override
    public OAccessToken setToken(byte[] token) {
        this.token = token;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.AUTH</code>. 「auth」- 用户的ID的
     * byte[] 信息
     */
    @Override
    public byte[] getAuth() {
        return this.auth;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.AUTH</code>. 「auth」- 用户的ID的
     * byte[] 信息
     */
    @Override
    public OAccessToken setAuth(byte[] auth) {
        this.auth = auth;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.EXPIRED_TIME</code>.
     * 「expiredTime」- 用户的Token过期时间
     */
    @Override
    public Long getExpiredTime() {
        return this.expiredTime;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.EXPIRED_TIME</code>.
     * 「expiredTime」- 用户的Token过期时间
     */
    @Override
    public OAccessToken setExpiredTime(Long expiredTime) {
        this.expiredTime = expiredTime;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.REFRESH_TOKEN</code>.
     * 「refreshToken」- 用户的刷新令牌
     */
    @Override
    public byte[] getRefreshToken() {
        return this.refreshToken;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.REFRESH_TOKEN</code>.
     * 「refreshToken」- 用户的刷新令牌
     */
    @Override
    public OAccessToken setRefreshToken(byte[] refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    @Override
    public OAccessToken setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public OAccessToken setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    @Override
    public OAccessToken setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.CREATED_AT</code>.
     * 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.CREATED_AT</code>.
     * 「createdAt」- 创建时间
     */
    @Override
    public OAccessToken setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.CREATED_BY</code>.
     * 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.CREATED_BY</code>.
     * 「createdBy」- 创建人
     */
    @Override
    public OAccessToken setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("OAccessToken (");

        sb.append(key);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(expiredTime);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(language);
        sb.append(", ").append(active);
        sb.append(", ").append(metadata);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IOAccessToken from) {
        setKey(from.getKey());
        setToken(from.getToken());
        setAuth(from.getAuth());
        setExpiredTime(from.getExpiredTime());
        setRefreshToken(from.getRefreshToken());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
    }

    @Override
    public <E extends IOAccessToken> E into(E into) {
        into.from(this);
        return into;
    }
}
