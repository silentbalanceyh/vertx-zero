/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IOAccessToken extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.KEY</code>. 「key」- 令牌主键
     */
    public IOAccessToken setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.KEY</code>. 「key」- 令牌主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.TOKEN</code>. 「token」-
     * 用户的Token信息
     */
    public IOAccessToken setToken(byte[] value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.TOKEN</code>. 「token」-
     * 用户的Token信息
     */
    public byte[] getToken();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.AUTH</code>. 「auth」- 用户的ID的
     * byte[] 信息
     */
    public IOAccessToken setAuth(byte[] value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.AUTH</code>. 「auth」- 用户的ID的
     * byte[] 信息
     */
    public byte[] getAuth();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.EXPIRED_TIME</code>.
     * 「expiredTime」- 用户的Token过期时间
     */
    public IOAccessToken setExpiredTime(Long value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.EXPIRED_TIME</code>.
     * 「expiredTime」- 用户的Token过期时间
     */
    public Long getExpiredTime();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.REFRESH_TOKEN</code>.
     * 「refreshToken」- 用户的刷新令牌
     */
    public IOAccessToken setRefreshToken(byte[] value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.REFRESH_TOKEN</code>.
     * 「refreshToken」- 用户的刷新令牌
     */
    public byte[] getRefreshToken();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public IOAccessToken setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.ACTIVE</code>. 「active」- 是否启用
     */
    public IOAccessToken setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    public IOAccessToken setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.CREATED_AT</code>.
     * 「createdAt」- 创建时间
     */
    public IOAccessToken setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.CREATED_AT</code>.
     * 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.O_ACCESS_TOKEN.CREATED_BY</code>.
     * 「createdBy」- 创建人
     */
    public IOAccessToken setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.O_ACCESS_TOKEN.CREATED_BY</code>.
     * 「createdBy」- 创建人
     */
    public String getCreatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IOAccessToken
     */
    public void from(IOAccessToken from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IOAccessToken
     */
    public <E extends IOAccessToken> E into(E into);

        @Override
        public default IOAccessToken fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setToken,json::getBinary,"TOKEN","byte[]");
                setOrThrow(this::setAuth,json::getBinary,"AUTH","byte[]");
                setOrThrow(this::setExpiredTime,json::getLong,"EXPIRED_TIME","java.lang.Long");
                setOrThrow(this::setRefreshToken,json::getBinary,"REFRESH_TOKEN","byte[]");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("TOKEN",getToken());
                json.put("AUTH",getAuth());
                json.put("EXPIRED_TIME",getExpiredTime());
                json.put("REFRESH_TOKEN",getRefreshToken());
                json.put("LANGUAGE",getLanguage());
                json.put("ACTIVE",getActive());
                json.put("METADATA",getMetadata());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                return json;
        }

}
