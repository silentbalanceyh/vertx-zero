/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables.records;


import cn.vertxup.rbac.domain.tables.OUser;
import cn.vertxup.rbac.domain.tables.interfaces.IOUser;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OUserRecord extends UpdatableRecordImpl<OUserRecord> implements VertxPojo, Record11<String, String, String, String, String, String, String, String, String, Boolean, String>, IOUser {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.O_USER.KEY</code>. 「key」- OAuth用户ID
     */
    @Override
    public OUserRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.KEY</code>. 「key」- OAuth用户ID
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.REDIRECT_URI</code>. 「redirectUri」-
     * 回调重定向地址
     */
    @Override
    public OUserRecord setRedirectUri(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.REDIRECT_URI</code>. 「redirectUri」-
     * 回调重定向地址
     */
    @Override
    public String getRedirectUri() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.CODE</code>. 「code」- 系统编号
     */
    @Override
    public OUserRecord setCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.CODE</code>. 「code」- 系统编号
     */
    @Override
    public String getCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.CLIENT_SECRET</code>. 「clientSecret」-
     * 客户端密钥
     */
    @Override
    public OUserRecord setClientSecret(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.CLIENT_SECRET</code>. 「clientSecret」-
     * 客户端密钥
     */
    @Override
    public String getClientSecret() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.CLIENT_ID</code>. 「clientId」- 客户端ID
     */
    @Override
    public OUserRecord setClientId(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.CLIENT_ID</code>. 「clientId」- 客户端ID
     */
    @Override
    public String getClientId() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.GRANT_TYPE</code>. 「grantType」- 认证方式
     */
    @Override
    public OUserRecord setGrantType(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.GRANT_TYPE</code>. 「grantType」- 认证方式
     */
    @Override
    public String getGrantType() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.SCOPE</code>. 「scope」- 对应名空间，以应用为中心
     */
    @Override
    public OUserRecord setScope(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.SCOPE</code>. 「scope」- 对应名空间，以应用为中心
     */
    @Override
    public String getScope() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.STATE</code>. 「state」- 客户端状态
     */
    @Override
    public OUserRecord setState(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.STATE</code>. 「state」- 客户端状态
     */
    @Override
    public String getState() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public OUserRecord setLanguage(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public OUserRecord setActive(Boolean value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public OUserRecord setMetadata(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, String, String, String, String, String, String, String, Boolean, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<String, String, String, String, String, String, String, String, String, Boolean, String> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return OUser.O_USER.KEY;
    }

    @Override
    public Field<String> field2() {
        return OUser.O_USER.REDIRECT_URI;
    }

    @Override
    public Field<String> field3() {
        return OUser.O_USER.CODE;
    }

    @Override
    public Field<String> field4() {
        return OUser.O_USER.CLIENT_SECRET;
    }

    @Override
    public Field<String> field5() {
        return OUser.O_USER.CLIENT_ID;
    }

    @Override
    public Field<String> field6() {
        return OUser.O_USER.GRANT_TYPE;
    }

    @Override
    public Field<String> field7() {
        return OUser.O_USER.SCOPE;
    }

    @Override
    public Field<String> field8() {
        return OUser.O_USER.STATE;
    }

    @Override
    public Field<String> field9() {
        return OUser.O_USER.LANGUAGE;
    }

    @Override
    public Field<Boolean> field10() {
        return OUser.O_USER.ACTIVE;
    }

    @Override
    public Field<String> field11() {
        return OUser.O_USER.METADATA;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getRedirectUri();
    }

    @Override
    public String component3() {
        return getCode();
    }

    @Override
    public String component4() {
        return getClientSecret();
    }

    @Override
    public String component5() {
        return getClientId();
    }

    @Override
    public String component6() {
        return getGrantType();
    }

    @Override
    public String component7() {
        return getScope();
    }

    @Override
    public String component8() {
        return getState();
    }

    @Override
    public String component9() {
        return getLanguage();
    }

    @Override
    public Boolean component10() {
        return getActive();
    }

    @Override
    public String component11() {
        return getMetadata();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getRedirectUri();
    }

    @Override
    public String value3() {
        return getCode();
    }

    @Override
    public String value4() {
        return getClientSecret();
    }

    @Override
    public String value5() {
        return getClientId();
    }

    @Override
    public String value6() {
        return getGrantType();
    }

    @Override
    public String value7() {
        return getScope();
    }

    @Override
    public String value8() {
        return getState();
    }

    @Override
    public String value9() {
        return getLanguage();
    }

    @Override
    public Boolean value10() {
        return getActive();
    }

    @Override
    public String value11() {
        return getMetadata();
    }

    @Override
    public OUserRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public OUserRecord value2(String value) {
        setRedirectUri(value);
        return this;
    }

    @Override
    public OUserRecord value3(String value) {
        setCode(value);
        return this;
    }

    @Override
    public OUserRecord value4(String value) {
        setClientSecret(value);
        return this;
    }

    @Override
    public OUserRecord value5(String value) {
        setClientId(value);
        return this;
    }

    @Override
    public OUserRecord value6(String value) {
        setGrantType(value);
        return this;
    }

    @Override
    public OUserRecord value7(String value) {
        setScope(value);
        return this;
    }

    @Override
    public OUserRecord value8(String value) {
        setState(value);
        return this;
    }

    @Override
    public OUserRecord value9(String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public OUserRecord value10(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public OUserRecord value11(String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public OUserRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, String value9, Boolean value10, String value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IOUser from) {
        setKey(from.getKey());
        setRedirectUri(from.getRedirectUri());
        setCode(from.getCode());
        setClientSecret(from.getClientSecret());
        setClientId(from.getClientId());
        setGrantType(from.getGrantType());
        setScope(from.getScope());
        setState(from.getState());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
    }

    @Override
    public <E extends IOUser> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OUserRecord
     */
    public OUserRecord() {
        super(OUser.O_USER);
    }

    /**
     * Create a detached, initialised OUserRecord
     */
    public OUserRecord(String key, String redirectUri, String code, String clientSecret, String clientId, String grantType, String scope, String state, String language, Boolean active, String metadata) {
        super(OUser.O_USER);

        setKey(key);
        setRedirectUri(redirectUri);
        setCode(code);
        setClientSecret(clientSecret);
        setClientId(clientId);
        setGrantType(grantType);
        setScope(scope);
        setState(state);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
    }

    /**
     * Create a detached, initialised OUserRecord
     */
    public OUserRecord(cn.vertxup.rbac.domain.tables.pojos.OUser value) {
        super(OUser.O_USER);

        if (value != null) {
            setKey(value.getKey());
            setRedirectUri(value.getRedirectUri());
            setCode(value.getCode());
            setClientSecret(value.getClientSecret());
            setClientId(value.getClientId());
            setGrantType(value.getGrantType());
            setScope(value.getScope());
            setState(value.getState());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
        }
    }

        public OUserRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
