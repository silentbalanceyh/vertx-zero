/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables;


import cn.vertxup.rbac.domain.Db;
import cn.vertxup.rbac.domain.Keys;
import cn.vertxup.rbac.domain.tables.records.SPathRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class SPath extends TableImpl<SPathRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.S_PATH</code>
     */
    public static final SPath S_PATH = new SPath();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.S_PATH.KEY</code>. 「key」- 规则主键
     */
    public final TableField<SPathRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 规则主键");
    /**
     * The column <code>DB_ETERNAL.S_PATH.NAME</code>. 「name」- 规则名称
     */
    public final TableField<SPathRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 规则名称");
    /**
     * The column <code>DB_ETERNAL.S_PATH.CODE</code>. 「code」- 系统界面标识
     */
    public final TableField<SPathRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 系统界面标识");
    /**
     * The column <code>DB_ETERNAL.S_PATH.MAPPING</code>. 「mapping」- 从 dm -&gt;
     * ui 转换
     */
    public final TableField<SPathRecord, String> MAPPING = createField(DSL.name("MAPPING"), SQLDataType.CLOB, this, "「mapping」- 从 dm -> ui 转换");
    /**
     * The column <code>DB_ETERNAL.S_PATH.RUN_COMPONENT</code>. 「runComponent」-
     * HValve执行组件，组件内置处理 dm / ui 两部分内容
     */
    public final TableField<SPathRecord, String> RUN_COMPONENT = createField(DSL.name("RUN_COMPONENT"), SQLDataType.VARCHAR(255), this, "「runComponent」- HValve执行组件，组件内置处理 dm / ui 两部分内容");
    /**
     * The column <code>DB_ETERNAL.S_PATH.DM_TYPE</code>. 「dmType」- 分组类型
     */
    public final TableField<SPathRecord, String> DM_TYPE = createField(DSL.name("DM_TYPE"), SQLDataType.VARCHAR(128), this, "「dmType」- 分组类型");
    /**
     * The column <code>DB_ETERNAL.S_PATH.DM_COMPONENT</code>. 「dmComponent」-
     * 必须绑定组专用Dao组件
     */
    public final TableField<SPathRecord, String> DM_COMPONENT = createField(DSL.name("DM_COMPONENT"), SQLDataType.VARCHAR(255), this, "「dmComponent」- 必须绑定组专用Dao组件");
    /**
     * The column <code>DB_ETERNAL.S_PATH.DM_CONDITION</code>. 「dmCondition」-
     * 分组条件
     */
    public final TableField<SPathRecord, String> DM_CONDITION = createField(DSL.name("DM_CONDITION"), SQLDataType.CLOB, this, "「dmCondition」- 分组条件");
    /**
     * The column <code>DB_ETERNAL.S_PATH.DM_CONFIG</code>. 「dmConfig」-
     * 组配置信息，配置呈现部分
     */
    public final TableField<SPathRecord, String> DM_CONFIG = createField(DSL.name("DM_CONFIG"), SQLDataType.CLOB, this, "「dmConfig」- 组配置信息，配置呈现部分");
    /**
     * The column <code>DB_ETERNAL.S_PATH.UI_TYPE</code>. 「uiType」- 目标数据源类型
     */
    public final TableField<SPathRecord, String> UI_TYPE = createField(DSL.name("UI_TYPE"), SQLDataType.VARCHAR(255), this, "「uiType」- 目标数据源类型");
    /**
     * The column <code>DB_ETERNAL.S_PATH.UI_CONFIG</code>. 「uiConfig」- 界面配置
     */
    public final TableField<SPathRecord, String> UI_CONFIG = createField(DSL.name("UI_CONFIG"), SQLDataType.CLOB, this, "「uiConfig」- 界面配置");
    /**
     * The column <code>DB_ETERNAL.S_PATH.UI_CONDITION</code>. 「uiCondition」-
     * 查询模板
     */
    public final TableField<SPathRecord, String> UI_CONDITION = createField(DSL.name("UI_CONDITION"), SQLDataType.CLOB, this, "「uiCondition」- 查询模板");
    /**
     * The column <code>DB_ETERNAL.S_PATH.UI_COMPONENT</code>. 「uiComponent」-
     * 特殊组件
     */
    public final TableField<SPathRecord, String> UI_COMPONENT = createField(DSL.name("UI_COMPONENT"), SQLDataType.VARCHAR(255), this, "「uiComponent」- 特殊组件");
    /**
     * The column <code>DB_ETERNAL.S_PATH.UI_SURFACE</code>. 「uiSurface」-
     * 界面呈现模式，已经被降维之后（列表、树、其他等相关配置）
     */
    public final TableField<SPathRecord, String> UI_SURFACE = createField(DSL.name("UI_SURFACE"), SQLDataType.CLOB, this, "「uiSurface」- 界面呈现模式，已经被降维之后（列表、树、其他等相关配置）");
    /**
     * The column <code>DB_ETERNAL.S_PATH.UI_SORT</code>. 「sort」- 该板块的排序（前端）
     */
    public final TableField<SPathRecord, Integer> UI_SORT = createField(DSL.name("UI_SORT"), SQLDataType.INTEGER, this, "「sort」- 该板块的排序（前端）");
    /**
     * The column <code>DB_ETERNAL.S_PATH.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<SPathRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.S_PATH.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<SPathRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.S_PATH.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<SPathRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.S_PATH.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<SPathRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>DB_ETERNAL.S_PATH.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<SPathRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.S_PATH.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<SPathRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.S_PATH.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<SPathRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.S_PATH.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<SPathRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private SPath(Name alias, Table<SPathRecord> aliased) {
        this(alias, aliased, null);
    }

    private SPath(Name alias, Table<SPathRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.S_PATH</code> table reference
     */
    public SPath(String alias) {
        this(DSL.name(alias), S_PATH);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.S_PATH</code> table reference
     */
    public SPath(Name alias) {
        this(alias, S_PATH);
    }

    /**
     * Create a <code>DB_ETERNAL.S_PATH</code> table reference
     */
    public SPath() {
        this(DSL.name("S_PATH"), null);
    }

    public <O extends Record> SPath(Table<O> child, ForeignKey<O, SPathRecord> key) {
        super(child, key, S_PATH);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SPathRecord> getRecordType() {
        return SPathRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<SPathRecord> getPrimaryKey() {
        return Keys.KEY_S_PATH_PRIMARY;
    }

    @Override
    public List<UniqueKey<SPathRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_S_PATH_CODE);
    }

    @Override
    public SPath as(String alias) {
        return new SPath(DSL.name(alias), this);
    }

    @Override
    public SPath as(Name alias) {
        return new SPath(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SPath rename(String name) {
        return new SPath(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SPath rename(Name name) {
        return new SPath(name, null);
    }
}
