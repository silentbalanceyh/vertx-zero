/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables.pojos;


import cn.vertxup.rbac.domain.tables.interfaces.IOUser;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OUser implements VertxPojo, IOUser {

    private static final long serialVersionUID = 1L;

    private String  key;
    private String  redirectUri;
    private String  code;
    private String  clientSecret;
    private String  clientId;
    private String  grantType;
    private String  scope;
    private String  state;
    private String  language;
    private Boolean active;
    private String  metadata;

    public OUser() {}

    public OUser(IOUser value) {
        this.key = value.getKey();
        this.redirectUri = value.getRedirectUri();
        this.code = value.getCode();
        this.clientSecret = value.getClientSecret();
        this.clientId = value.getClientId();
        this.grantType = value.getGrantType();
        this.scope = value.getScope();
        this.state = value.getState();
        this.language = value.getLanguage();
        this.active = value.getActive();
        this.metadata = value.getMetadata();
    }

    public OUser(
        String  key,
        String  redirectUri,
        String  code,
        String  clientSecret,
        String  clientId,
        String  grantType,
        String  scope,
        String  state,
        String  language,
        Boolean active,
        String  metadata
    ) {
        this.key = key;
        this.redirectUri = redirectUri;
        this.code = code;
        this.clientSecret = clientSecret;
        this.clientId = clientId;
        this.grantType = grantType;
        this.scope = scope;
        this.state = state;
        this.language = language;
        this.active = active;
        this.metadata = metadata;
    }

        public OUser(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.KEY</code>. 「key」- OAuth用户ID
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.KEY</code>. 「key」- OAuth用户ID
     */
    @Override
    public OUser setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.REDIRECT_URI</code>. 「redirectUri」-
     * 回调重定向地址
     */
    @Override
    public String getRedirectUri() {
        return this.redirectUri;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.REDIRECT_URI</code>. 「redirectUri」-
     * 回调重定向地址
     */
    @Override
    public OUser setRedirectUri(String redirectUri) {
        this.redirectUri = redirectUri;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.CODE</code>. 「code」- 系统编号
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.CODE</code>. 「code」- 系统编号
     */
    @Override
    public OUser setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.CLIENT_SECRET</code>. 「clientSecret」-
     * 客户端密钥
     */
    @Override
    public String getClientSecret() {
        return this.clientSecret;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.CLIENT_SECRET</code>. 「clientSecret」-
     * 客户端密钥
     */
    @Override
    public OUser setClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.CLIENT_ID</code>. 「clientId」- 客户端ID
     */
    @Override
    public String getClientId() {
        return this.clientId;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.CLIENT_ID</code>. 「clientId」- 客户端ID
     */
    @Override
    public OUser setClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.GRANT_TYPE</code>. 「grantType」- 认证方式
     */
    @Override
    public String getGrantType() {
        return this.grantType;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.GRANT_TYPE</code>. 「grantType」- 认证方式
     */
    @Override
    public OUser setGrantType(String grantType) {
        this.grantType = grantType;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.SCOPE</code>. 「scope」- 对应名空间，以应用为中心
     */
    @Override
    public String getScope() {
        return this.scope;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.SCOPE</code>. 「scope」- 对应名空间，以应用为中心
     */
    @Override
    public OUser setScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.STATE</code>. 「state」- 客户端状态
     */
    @Override
    public String getState() {
        return this.state;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.STATE</code>. 「state」- 客户端状态
     */
    @Override
    public OUser setState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public OUser setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public OUser setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.O_USER.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.O_USER.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public OUser setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("OUser (");

        sb.append(key);
        sb.append(", ").append(redirectUri);
        sb.append(", ").append(code);
        sb.append(", ").append(clientSecret);
        sb.append(", ").append(clientId);
        sb.append(", ").append(grantType);
        sb.append(", ").append(scope);
        sb.append(", ").append(state);
        sb.append(", ").append(language);
        sb.append(", ").append(active);
        sb.append(", ").append(metadata);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IOUser from) {
        setKey(from.getKey());
        setRedirectUri(from.getRedirectUri());
        setCode(from.getCode());
        setClientSecret(from.getClientSecret());
        setClientId(from.getClientId());
        setGrantType(from.getGrantType());
        setScope(from.getScope());
        setState(from.getState());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
    }

    @Override
    public <E extends IOUser> E into(E into) {
        into.from(this);
        return into;
    }
}
