/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables.pojos;


import cn.vertxup.rbac.domain.tables.interfaces.ISPath;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SPath implements VertxPojo, ISPath {

    private static final long serialVersionUID = 1L;

    private String        key;
    private String        name;
    private String        code;
    private String        groupMapping;
    private String        groupType;
    private String        groupComponent;
    private String        groupCondition;
    private String        groupConfig;
    private String        uiType;
    private String        uiConfig;
    private String        uiCondition;
    private String        uiComponent;
    private String        sigma;
    private String        language;
    private Boolean       active;
    private String        metadata;
    private LocalDateTime createdAt;
    private String        createdBy;
    private LocalDateTime updatedAt;
    private String        updatedBy;

    public SPath() {}

    public SPath(ISPath value) {
        this.key = value.getKey();
        this.name = value.getName();
        this.code = value.getCode();
        this.groupMapping = value.getGroupMapping();
        this.groupType = value.getGroupType();
        this.groupComponent = value.getGroupComponent();
        this.groupCondition = value.getGroupCondition();
        this.groupConfig = value.getGroupConfig();
        this.uiType = value.getUiType();
        this.uiConfig = value.getUiConfig();
        this.uiCondition = value.getUiCondition();
        this.uiComponent = value.getUiComponent();
        this.sigma = value.getSigma();
        this.language = value.getLanguage();
        this.active = value.getActive();
        this.metadata = value.getMetadata();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public SPath(
        String        key,
        String        name,
        String        code,
        String        groupMapping,
        String        groupType,
        String        groupComponent,
        String        groupCondition,
        String        groupConfig,
        String        uiType,
        String        uiConfig,
        String        uiCondition,
        String        uiComponent,
        String        sigma,
        String        language,
        Boolean       active,
        String        metadata,
        LocalDateTime createdAt,
        String        createdBy,
        LocalDateTime updatedAt,
        String        updatedBy
    ) {
        this.key = key;
        this.name = name;
        this.code = code;
        this.groupMapping = groupMapping;
        this.groupType = groupType;
        this.groupComponent = groupComponent;
        this.groupCondition = groupCondition;
        this.groupConfig = groupConfig;
        this.uiType = uiType;
        this.uiConfig = uiConfig;
        this.uiCondition = uiCondition;
        this.uiComponent = uiComponent;
        this.sigma = sigma;
        this.language = language;
        this.active = active;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public SPath(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.KEY</code>. 「key」- 规则主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.KEY</code>. 「key」- 规则主键
     */
    @Override
    public SPath setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.NAME</code>. 「name」- 规则名称
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.NAME</code>. 「name」- 规则名称
     */
    @Override
    public SPath setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.CODE</code>. 「code」- 系统界面标识
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.CODE</code>. 「code」- 系统界面标识
     */
    @Override
    public SPath setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.GROUP_MAPPING</code>. 「mapping」- 从
     * group -&gt; ui 转换
     */
    @Override
    public String getGroupMapping() {
        return this.groupMapping;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.GROUP_MAPPING</code>. 「mapping」- 从
     * group -&gt; ui 转换
     */
    @Override
    public SPath setGroupMapping(String groupMapping) {
        this.groupMapping = groupMapping;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.GROUP_TYPE</code>. 「groupType」- 分组类型
     */
    @Override
    public String getGroupType() {
        return this.groupType;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.GROUP_TYPE</code>. 「groupType」- 分组类型
     */
    @Override
    public SPath setGroupType(String groupType) {
        this.groupType = groupType;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.GROUP_COMPONENT</code>.
     * 「groupComponent」- 必须绑定组专用Dao组件
     */
    @Override
    public String getGroupComponent() {
        return this.groupComponent;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.GROUP_COMPONENT</code>.
     * 「groupComponent」- 必须绑定组专用Dao组件
     */
    @Override
    public SPath setGroupComponent(String groupComponent) {
        this.groupComponent = groupComponent;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.GROUP_CONDITION</code>.
     * 「groupCondition」- 分组条件
     */
    @Override
    public String getGroupCondition() {
        return this.groupCondition;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.GROUP_CONDITION</code>.
     * 「groupCondition」- 分组条件
     */
    @Override
    public SPath setGroupCondition(String groupCondition) {
        this.groupCondition = groupCondition;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.GROUP_CONFIG</code>. 「groupConfig」-
     * 组配置信息，配置呈现部分
     */
    @Override
    public String getGroupConfig() {
        return this.groupConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.GROUP_CONFIG</code>. 「groupConfig」-
     * 组配置信息，配置呈现部分
     */
    @Override
    public SPath setGroupConfig(String groupConfig) {
        this.groupConfig = groupConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.UI_TYPE</code>. 「uiType」- 目标数据源类型
     */
    @Override
    public String getUiType() {
        return this.uiType;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.UI_TYPE</code>. 「uiType」- 目标数据源类型
     */
    @Override
    public SPath setUiType(String uiType) {
        this.uiType = uiType;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.UI_CONFIG</code>. 「uiConfig」- 界面配置
     */
    @Override
    public String getUiConfig() {
        return this.uiConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.UI_CONFIG</code>. 「uiConfig」- 界面配置
     */
    @Override
    public SPath setUiConfig(String uiConfig) {
        this.uiConfig = uiConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.UI_CONDITION</code>. 「uiCondition」-
     * 查询模板
     */
    @Override
    public String getUiCondition() {
        return this.uiCondition;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.UI_CONDITION</code>. 「uiCondition」-
     * 查询模板
     */
    @Override
    public SPath setUiCondition(String uiCondition) {
        this.uiCondition = uiCondition;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.UI_COMPONENT</code>. 「uiComponent」- 在
     * DAO/OX/DEF 时的特殊组件
     */
    @Override
    public String getUiComponent() {
        return this.uiComponent;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.UI_COMPONENT</code>. 「uiComponent」- 在
     * DAO/OX/DEF 时的特殊组件
     */
    @Override
    public SPath setUiComponent(String uiComponent) {
        this.uiComponent = uiComponent;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public SPath setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public SPath setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public SPath setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public SPath setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public SPath setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public SPath setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public SPath setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PATH.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PATH.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public SPath setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SPath (");

        sb.append(key);
        sb.append(", ").append(name);
        sb.append(", ").append(code);
        sb.append(", ").append(groupMapping);
        sb.append(", ").append(groupType);
        sb.append(", ").append(groupComponent);
        sb.append(", ").append(groupCondition);
        sb.append(", ").append(groupConfig);
        sb.append(", ").append(uiType);
        sb.append(", ").append(uiConfig);
        sb.append(", ").append(uiCondition);
        sb.append(", ").append(uiComponent);
        sb.append(", ").append(sigma);
        sb.append(", ").append(language);
        sb.append(", ").append(active);
        sb.append(", ").append(metadata);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ISPath from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setGroupMapping(from.getGroupMapping());
        setGroupType(from.getGroupType());
        setGroupComponent(from.getGroupComponent());
        setGroupCondition(from.getGroupCondition());
        setGroupConfig(from.getGroupConfig());
        setUiType(from.getUiType());
        setUiConfig(from.getUiConfig());
        setUiCondition(from.getUiCondition());
        setUiComponent(from.getUiComponent());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends ISPath> E into(E into) {
        into.from(this);
        return into;
    }
}
