/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables.records;


import cn.vertxup.rbac.domain.tables.SPacket;
import cn.vertxup.rbac.domain.tables.interfaces.ISPacket;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record20;
import org.jooq.Row20;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SPacketRecord extends UpdatableRecordImpl<SPacketRecord> implements VertxPojo, Record20<String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String>, ISPacket {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.KEY</code>. 「key」- 包信息
     */
    @Override
    public SPacketRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.KEY</code>. 「key」- 包信息
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.PATH_ID</code>. 「pathId」- 关联的 path
     * id，包含关系
     */
    @Override
    public SPacketRecord setPathId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.PATH_ID</code>. 「pathId」- 关联的 path
     * id，包含关系
     */
    @Override
    public String getPathId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.RESOURCE_ID</code>. 「resourceId」-
     * 关联的资源 id
     */
    @Override
    public SPacketRecord setResourceId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.RESOURCE_ID</code>. 「resourceId」-
     * 关联的资源 id
     */
    @Override
    public String getResourceId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.ROW_TYPE</code>. 「rowType」- 行过滤类型
     */
    @Override
    public SPacketRecord setRowType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.ROW_TYPE</code>. 「rowType」- 行过滤类型
     */
    @Override
    public String getRowType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.ROW_FIELD</code>. 「rowField」- 行输入
     */
    @Override
    public SPacketRecord setRowField(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.ROW_FIELD</code>. 「rowField」- 行输入
     */
    @Override
    public String getRowField() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.ROW_TPL</code>. 「rowTpl」- 多字段的模板
     */
    @Override
    public SPacketRecord setRowTpl(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.ROW_TPL</code>. 「rowTpl」- 多字段的模板
     */
    @Override
    public String getRowTpl() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.ROW_TPL_MAPPING</code>.
     * 「rowTplMapping」- 多字段的映射关系
     */
    @Override
    public SPacketRecord setRowTplMapping(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.ROW_TPL_MAPPING</code>.
     * 「rowTplMapping」- 多字段的映射关系
     */
    @Override
    public String getRowTplMapping() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.COL_TYPE</code>. 「colType」- 列过滤类型
     */
    @Override
    public SPacketRecord setColType(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.COL_TYPE</code>. 「colType」- 列过滤类型
     */
    @Override
    public String getColType() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.COL_CONFIG</code>. 「colConfig」- 列配置
     */
    @Override
    public SPacketRecord setColConfig(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.COL_CONFIG</code>. 「colConfig」- 列配置
     */
    @Override
    public String getColConfig() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.COND_TPL</code>. 「condTpl」- 条件模板
     */
    @Override
    public SPacketRecord setCondTpl(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.COND_TPL</code>. 「condTpl」- 条件模板
     */
    @Override
    public String getCondTpl() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.COND_TPL_MAPPING</code>.
     * 「condTplMapping」- 查询条件映射关系
     */
    @Override
    public SPacketRecord setCondTplMapping(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.COND_TPL_MAPPING</code>.
     * 「condTplMapping」- 查询条件映射关系
     */
    @Override
    public String getCondTplMapping() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.COND_CONFIG</code>. 「condConfig」-
     * 条件配置（界面配置相关）
     */
    @Override
    public SPacketRecord setCondConfig(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.COND_CONFIG</code>. 「condConfig」-
     * 条件配置（界面配置相关）
     */
    @Override
    public String getCondConfig() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public SPacketRecord setSigma(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public SPacketRecord setLanguage(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public SPacketRecord setActive(Boolean value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public SPacketRecord setMetadata(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public SPacketRecord setCreatedAt(LocalDateTime value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(16);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public SPacketRecord setCreatedBy(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(17);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public SPacketRecord setUpdatedAt(LocalDateTime value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(18);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public SPacketRecord setUpdatedBy(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(19);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record20 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row20<String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row20) super.fieldsRow();
    }

    @Override
    public Row20<String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row20) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return SPacket.S_PACKET.KEY;
    }

    @Override
    public Field<String> field2() {
        return SPacket.S_PACKET.PATH_ID;
    }

    @Override
    public Field<String> field3() {
        return SPacket.S_PACKET.RESOURCE_ID;
    }

    @Override
    public Field<String> field4() {
        return SPacket.S_PACKET.ROW_TYPE;
    }

    @Override
    public Field<String> field5() {
        return SPacket.S_PACKET.ROW_FIELD;
    }

    @Override
    public Field<String> field6() {
        return SPacket.S_PACKET.ROW_TPL;
    }

    @Override
    public Field<String> field7() {
        return SPacket.S_PACKET.ROW_TPL_MAPPING;
    }

    @Override
    public Field<String> field8() {
        return SPacket.S_PACKET.COL_TYPE;
    }

    @Override
    public Field<String> field9() {
        return SPacket.S_PACKET.COL_CONFIG;
    }

    @Override
    public Field<String> field10() {
        return SPacket.S_PACKET.COND_TPL;
    }

    @Override
    public Field<String> field11() {
        return SPacket.S_PACKET.COND_TPL_MAPPING;
    }

    @Override
    public Field<String> field12() {
        return SPacket.S_PACKET.COND_CONFIG;
    }

    @Override
    public Field<String> field13() {
        return SPacket.S_PACKET.SIGMA;
    }

    @Override
    public Field<String> field14() {
        return SPacket.S_PACKET.LANGUAGE;
    }

    @Override
    public Field<Boolean> field15() {
        return SPacket.S_PACKET.ACTIVE;
    }

    @Override
    public Field<String> field16() {
        return SPacket.S_PACKET.METADATA;
    }

    @Override
    public Field<LocalDateTime> field17() {
        return SPacket.S_PACKET.CREATED_AT;
    }

    @Override
    public Field<String> field18() {
        return SPacket.S_PACKET.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field19() {
        return SPacket.S_PACKET.UPDATED_AT;
    }

    @Override
    public Field<String> field20() {
        return SPacket.S_PACKET.UPDATED_BY;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getPathId();
    }

    @Override
    public String component3() {
        return getResourceId();
    }

    @Override
    public String component4() {
        return getRowType();
    }

    @Override
    public String component5() {
        return getRowField();
    }

    @Override
    public String component6() {
        return getRowTpl();
    }

    @Override
    public String component7() {
        return getRowTplMapping();
    }

    @Override
    public String component8() {
        return getColType();
    }

    @Override
    public String component9() {
        return getColConfig();
    }

    @Override
    public String component10() {
        return getCondTpl();
    }

    @Override
    public String component11() {
        return getCondTplMapping();
    }

    @Override
    public String component12() {
        return getCondConfig();
    }

    @Override
    public String component13() {
        return getSigma();
    }

    @Override
    public String component14() {
        return getLanguage();
    }

    @Override
    public Boolean component15() {
        return getActive();
    }

    @Override
    public String component16() {
        return getMetadata();
    }

    @Override
    public LocalDateTime component17() {
        return getCreatedAt();
    }

    @Override
    public String component18() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component19() {
        return getUpdatedAt();
    }

    @Override
    public String component20() {
        return getUpdatedBy();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getPathId();
    }

    @Override
    public String value3() {
        return getResourceId();
    }

    @Override
    public String value4() {
        return getRowType();
    }

    @Override
    public String value5() {
        return getRowField();
    }

    @Override
    public String value6() {
        return getRowTpl();
    }

    @Override
    public String value7() {
        return getRowTplMapping();
    }

    @Override
    public String value8() {
        return getColType();
    }

    @Override
    public String value9() {
        return getColConfig();
    }

    @Override
    public String value10() {
        return getCondTpl();
    }

    @Override
    public String value11() {
        return getCondTplMapping();
    }

    @Override
    public String value12() {
        return getCondConfig();
    }

    @Override
    public String value13() {
        return getSigma();
    }

    @Override
    public String value14() {
        return getLanguage();
    }

    @Override
    public Boolean value15() {
        return getActive();
    }

    @Override
    public String value16() {
        return getMetadata();
    }

    @Override
    public LocalDateTime value17() {
        return getCreatedAt();
    }

    @Override
    public String value18() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value19() {
        return getUpdatedAt();
    }

    @Override
    public String value20() {
        return getUpdatedBy();
    }

    @Override
    public SPacketRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public SPacketRecord value2(String value) {
        setPathId(value);
        return this;
    }

    @Override
    public SPacketRecord value3(String value) {
        setResourceId(value);
        return this;
    }

    @Override
    public SPacketRecord value4(String value) {
        setRowType(value);
        return this;
    }

    @Override
    public SPacketRecord value5(String value) {
        setRowField(value);
        return this;
    }

    @Override
    public SPacketRecord value6(String value) {
        setRowTpl(value);
        return this;
    }

    @Override
    public SPacketRecord value7(String value) {
        setRowTplMapping(value);
        return this;
    }

    @Override
    public SPacketRecord value8(String value) {
        setColType(value);
        return this;
    }

    @Override
    public SPacketRecord value9(String value) {
        setColConfig(value);
        return this;
    }

    @Override
    public SPacketRecord value10(String value) {
        setCondTpl(value);
        return this;
    }

    @Override
    public SPacketRecord value11(String value) {
        setCondTplMapping(value);
        return this;
    }

    @Override
    public SPacketRecord value12(String value) {
        setCondConfig(value);
        return this;
    }

    @Override
    public SPacketRecord value13(String value) {
        setSigma(value);
        return this;
    }

    @Override
    public SPacketRecord value14(String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public SPacketRecord value15(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public SPacketRecord value16(String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public SPacketRecord value17(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public SPacketRecord value18(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SPacketRecord value19(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public SPacketRecord value20(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public SPacketRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, String value9, String value10, String value11, String value12, String value13, String value14, Boolean value15, String value16, LocalDateTime value17, String value18, LocalDateTime value19, String value20) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        value20(value20);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ISPacket from) {
        setKey(from.getKey());
        setPathId(from.getPathId());
        setResourceId(from.getResourceId());
        setRowType(from.getRowType());
        setRowField(from.getRowField());
        setRowTpl(from.getRowTpl());
        setRowTplMapping(from.getRowTplMapping());
        setColType(from.getColType());
        setColConfig(from.getColConfig());
        setCondTpl(from.getCondTpl());
        setCondTplMapping(from.getCondTplMapping());
        setCondConfig(from.getCondConfig());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends ISPacket> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SPacketRecord
     */
    public SPacketRecord() {
        super(SPacket.S_PACKET);
    }

    /**
     * Create a detached, initialised SPacketRecord
     */
    public SPacketRecord(String key, String pathId, String resourceId, String rowType, String rowField, String rowTpl, String rowTplMapping, String colType, String colConfig, String condTpl, String condTplMapping, String condConfig, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(SPacket.S_PACKET);

        setKey(key);
        setPathId(pathId);
        setResourceId(resourceId);
        setRowType(rowType);
        setRowField(rowField);
        setRowTpl(rowTpl);
        setRowTplMapping(rowTplMapping);
        setColType(colType);
        setColConfig(colConfig);
        setCondTpl(condTpl);
        setCondTplMapping(condTplMapping);
        setCondConfig(condConfig);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
    }

    /**
     * Create a detached, initialised SPacketRecord
     */
    public SPacketRecord(cn.vertxup.rbac.domain.tables.pojos.SPacket value) {
        super(SPacket.S_PACKET);

        if (value != null) {
            setKey(value.getKey());
            setPathId(value.getPathId());
            setResourceId(value.getResourceId());
            setRowType(value.getRowType());
            setRowField(value.getRowField());
            setRowTpl(value.getRowTpl());
            setRowTplMapping(value.getRowTplMapping());
            setColType(value.getColType());
            setColConfig(value.getColConfig());
            setCondTpl(value.getCondTpl());
            setCondTplMapping(value.getCondTplMapping());
            setCondConfig(value.getCondConfig());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
        }
    }

        public SPacketRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
