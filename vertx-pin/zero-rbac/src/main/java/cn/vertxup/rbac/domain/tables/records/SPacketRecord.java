/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables.records;


import cn.vertxup.rbac.domain.tables.SPacket;
import cn.vertxup.rbac.domain.tables.interfaces.ISPacket;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record22;
import org.jooq.Row22;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SPacketRecord extends UpdatableRecordImpl<SPacketRecord> implements VertxPojo, Record22<String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String>, ISPacket {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.KEY</code>. 「key」- 包信息
     */
    @Override
    public SPacketRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.KEY</code>. 「key」- 包信息
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.CODE</code>. 「code」- 关联的 PATH 表对应的
     * code
     */
    @Override
    public SPacketRecord setCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.CODE</code>. 「code」- 关联的 PATH 表对应的
     * code
     */
    @Override
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.RESOURCE</code>. 「resource」-
     * 关联的资源表对应的 code
     */
    @Override
    public SPacketRecord setResource(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.RESOURCE</code>. 「resource」-
     * 关联的资源表对应的 code
     */
    @Override
    public String getResource() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.H_TYPE</code>. 「hType」- 行过滤类型
     */
    @Override
    public SPacketRecord setHType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.H_TYPE</code>. 「hType」- 行过滤类型
     */
    @Override
    public String getHType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.H_MAPPING</code>. 「hMapping」-
     * 字段映射关系，存在转换时必须
     */
    @Override
    public SPacketRecord setHMapping(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.H_MAPPING</code>. 「hMapping」-
     * 字段映射关系，存在转换时必须
     */
    @Override
    public String getHMapping() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.H_CONFIG</code>. 「hConfig」- 字段附加配置
     */
    @Override
    public SPacketRecord setHConfig(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.H_CONFIG</code>. 「hConfig」- 字段附加配置
     */
    @Override
    public String getHConfig() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.V_TYPE</code>. 「vType」- 列过滤类型
     */
    @Override
    public SPacketRecord setVType(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.V_TYPE</code>. 「vType」- 列过滤类型
     */
    @Override
    public String getVType() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.V_MAPPING</code>. 「vMapping」-
     * 列字段映射关系，存在转换时必须
     */
    @Override
    public SPacketRecord setVMapping(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.V_MAPPING</code>. 「vMapping」-
     * 列字段映射关系，存在转换时必须
     */
    @Override
    public String getVMapping() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.V_CONFIG</code>. 「vConfig」- 列配置
     */
    @Override
    public SPacketRecord setVConfig(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.V_CONFIG</code>. 「vConfig」- 列配置
     */
    @Override
    public String getVConfig() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.Q_TYPE</code>. 「qType」- 条件模板
     */
    @Override
    public SPacketRecord setQType(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.Q_TYPE</code>. 「qType」- 条件模板
     */
    @Override
    public String getQType() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.Q_MAPPING</code>. 「qMapping」-
     * 查询条件映射关系
     */
    @Override
    public SPacketRecord setQMapping(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.Q_MAPPING</code>. 「qMapping」-
     * 查询条件映射关系
     */
    @Override
    public String getQMapping() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.Q_CONFIG</code>. 「qConfig」-
     * 条件配置（界面配置相关）
     */
    @Override
    public SPacketRecord setQConfig(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.Q_CONFIG</code>. 「qConfig」-
     * 条件配置（界面配置相关）
     */
    @Override
    public String getQConfig() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.RUN_COMPONENT</code>.
     * 「runComponent」- 自定义模式下的组件
     */
    @Override
    public SPacketRecord setRunComponent(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.RUN_COMPONENT</code>.
     * 「runComponent」- 自定义模式下的组件
     */
    @Override
    public String getRunComponent() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.RUN_CONFIG</code>. 「runConfig」-
     * 运行专用配置
     */
    @Override
    public SPacketRecord setRunConfig(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.RUN_CONFIG</code>. 「runConfig」-
     * 运行专用配置
     */
    @Override
    public String getRunConfig() {
        return (String) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public SPacketRecord setSigma(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public SPacketRecord setLanguage(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public SPacketRecord setActive(Boolean value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(16);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public SPacketRecord setMetadata(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(17);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public SPacketRecord setCreatedAt(LocalDateTime value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(18);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public SPacketRecord setCreatedBy(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(19);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public SPacketRecord setUpdatedAt(LocalDateTime value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(20);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public SPacketRecord setUpdatedBy(String value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(21);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record22 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row22<String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row22) super.fieldsRow();
    }

    @Override
    public Row22<String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row22) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return SPacket.S_PACKET.KEY;
    }

    @Override
    public Field<String> field2() {
        return SPacket.S_PACKET.CODE;
    }

    @Override
    public Field<String> field3() {
        return SPacket.S_PACKET.RESOURCE;
    }

    @Override
    public Field<String> field4() {
        return SPacket.S_PACKET.H_TYPE;
    }

    @Override
    public Field<String> field5() {
        return SPacket.S_PACKET.H_MAPPING;
    }

    @Override
    public Field<String> field6() {
        return SPacket.S_PACKET.H_CONFIG;
    }

    @Override
    public Field<String> field7() {
        return SPacket.S_PACKET.V_TYPE;
    }

    @Override
    public Field<String> field8() {
        return SPacket.S_PACKET.V_MAPPING;
    }

    @Override
    public Field<String> field9() {
        return SPacket.S_PACKET.V_CONFIG;
    }

    @Override
    public Field<String> field10() {
        return SPacket.S_PACKET.Q_TYPE;
    }

    @Override
    public Field<String> field11() {
        return SPacket.S_PACKET.Q_MAPPING;
    }

    @Override
    public Field<String> field12() {
        return SPacket.S_PACKET.Q_CONFIG;
    }

    @Override
    public Field<String> field13() {
        return SPacket.S_PACKET.RUN_COMPONENT;
    }

    @Override
    public Field<String> field14() {
        return SPacket.S_PACKET.RUN_CONFIG;
    }

    @Override
    public Field<String> field15() {
        return SPacket.S_PACKET.SIGMA;
    }

    @Override
    public Field<String> field16() {
        return SPacket.S_PACKET.LANGUAGE;
    }

    @Override
    public Field<Boolean> field17() {
        return SPacket.S_PACKET.ACTIVE;
    }

    @Override
    public Field<String> field18() {
        return SPacket.S_PACKET.METADATA;
    }

    @Override
    public Field<LocalDateTime> field19() {
        return SPacket.S_PACKET.CREATED_AT;
    }

    @Override
    public Field<String> field20() {
        return SPacket.S_PACKET.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field21() {
        return SPacket.S_PACKET.UPDATED_AT;
    }

    @Override
    public Field<String> field22() {
        return SPacket.S_PACKET.UPDATED_BY;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getCode();
    }

    @Override
    public String component3() {
        return getResource();
    }

    @Override
    public String component4() {
        return getHType();
    }

    @Override
    public String component5() {
        return getHMapping();
    }

    @Override
    public String component6() {
        return getHConfig();
    }

    @Override
    public String component7() {
        return getVType();
    }

    @Override
    public String component8() {
        return getVMapping();
    }

    @Override
    public String component9() {
        return getVConfig();
    }

    @Override
    public String component10() {
        return getQType();
    }

    @Override
    public String component11() {
        return getQMapping();
    }

    @Override
    public String component12() {
        return getQConfig();
    }

    @Override
    public String component13() {
        return getRunComponent();
    }

    @Override
    public String component14() {
        return getRunConfig();
    }

    @Override
    public String component15() {
        return getSigma();
    }

    @Override
    public String component16() {
        return getLanguage();
    }

    @Override
    public Boolean component17() {
        return getActive();
    }

    @Override
    public String component18() {
        return getMetadata();
    }

    @Override
    public LocalDateTime component19() {
        return getCreatedAt();
    }

    @Override
    public String component20() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component21() {
        return getUpdatedAt();
    }

    @Override
    public String component22() {
        return getUpdatedBy();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getCode();
    }

    @Override
    public String value3() {
        return getResource();
    }

    @Override
    public String value4() {
        return getHType();
    }

    @Override
    public String value5() {
        return getHMapping();
    }

    @Override
    public String value6() {
        return getHConfig();
    }

    @Override
    public String value7() {
        return getVType();
    }

    @Override
    public String value8() {
        return getVMapping();
    }

    @Override
    public String value9() {
        return getVConfig();
    }

    @Override
    public String value10() {
        return getQType();
    }

    @Override
    public String value11() {
        return getQMapping();
    }

    @Override
    public String value12() {
        return getQConfig();
    }

    @Override
    public String value13() {
        return getRunComponent();
    }

    @Override
    public String value14() {
        return getRunConfig();
    }

    @Override
    public String value15() {
        return getSigma();
    }

    @Override
    public String value16() {
        return getLanguage();
    }

    @Override
    public Boolean value17() {
        return getActive();
    }

    @Override
    public String value18() {
        return getMetadata();
    }

    @Override
    public LocalDateTime value19() {
        return getCreatedAt();
    }

    @Override
    public String value20() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value21() {
        return getUpdatedAt();
    }

    @Override
    public String value22() {
        return getUpdatedBy();
    }

    @Override
    public SPacketRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public SPacketRecord value2(String value) {
        setCode(value);
        return this;
    }

    @Override
    public SPacketRecord value3(String value) {
        setResource(value);
        return this;
    }

    @Override
    public SPacketRecord value4(String value) {
        setHType(value);
        return this;
    }

    @Override
    public SPacketRecord value5(String value) {
        setHMapping(value);
        return this;
    }

    @Override
    public SPacketRecord value6(String value) {
        setHConfig(value);
        return this;
    }

    @Override
    public SPacketRecord value7(String value) {
        setVType(value);
        return this;
    }

    @Override
    public SPacketRecord value8(String value) {
        setVMapping(value);
        return this;
    }

    @Override
    public SPacketRecord value9(String value) {
        setVConfig(value);
        return this;
    }

    @Override
    public SPacketRecord value10(String value) {
        setQType(value);
        return this;
    }

    @Override
    public SPacketRecord value11(String value) {
        setQMapping(value);
        return this;
    }

    @Override
    public SPacketRecord value12(String value) {
        setQConfig(value);
        return this;
    }

    @Override
    public SPacketRecord value13(String value) {
        setRunComponent(value);
        return this;
    }

    @Override
    public SPacketRecord value14(String value) {
        setRunConfig(value);
        return this;
    }

    @Override
    public SPacketRecord value15(String value) {
        setSigma(value);
        return this;
    }

    @Override
    public SPacketRecord value16(String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public SPacketRecord value17(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public SPacketRecord value18(String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public SPacketRecord value19(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public SPacketRecord value20(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SPacketRecord value21(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public SPacketRecord value22(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public SPacketRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, String value9, String value10, String value11, String value12, String value13, String value14, String value15, String value16, Boolean value17, String value18, LocalDateTime value19, String value20, LocalDateTime value21, String value22) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        value20(value20);
        value21(value21);
        value22(value22);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ISPacket from) {
        setKey(from.getKey());
        setCode(from.getCode());
        setResource(from.getResource());
        setHType(from.getHType());
        setHMapping(from.getHMapping());
        setHConfig(from.getHConfig());
        setVType(from.getVType());
        setVMapping(from.getVMapping());
        setVConfig(from.getVConfig());
        setQType(from.getQType());
        setQMapping(from.getQMapping());
        setQConfig(from.getQConfig());
        setRunComponent(from.getRunComponent());
        setRunConfig(from.getRunConfig());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends ISPacket> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SPacketRecord
     */
    public SPacketRecord() {
        super(SPacket.S_PACKET);
    }

    /**
     * Create a detached, initialised SPacketRecord
     */
    public SPacketRecord(String key, String code, String resource, String hType, String hMapping, String hConfig, String vType, String vMapping, String vConfig, String qType, String qMapping, String qConfig, String runComponent, String runConfig, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(SPacket.S_PACKET);

        setKey(key);
        setCode(code);
        setResource(resource);
        setHType(hType);
        setHMapping(hMapping);
        setHConfig(hConfig);
        setVType(vType);
        setVMapping(vMapping);
        setVConfig(vConfig);
        setQType(qType);
        setQMapping(qMapping);
        setQConfig(qConfig);
        setRunComponent(runComponent);
        setRunConfig(runConfig);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
    }

    /**
     * Create a detached, initialised SPacketRecord
     */
    public SPacketRecord(cn.vertxup.rbac.domain.tables.pojos.SPacket value) {
        super(SPacket.S_PACKET);

        if (value != null) {
            setKey(value.getKey());
            setCode(value.getCode());
            setResource(value.getResource());
            setHType(value.getHType());
            setHMapping(value.getHMapping());
            setHConfig(value.getHConfig());
            setVType(value.getVType());
            setVMapping(value.getVMapping());
            setVConfig(value.getVConfig());
            setQType(value.getQType());
            setQMapping(value.getQMapping());
            setQConfig(value.getQConfig());
            setRunComponent(value.getRunComponent());
            setRunConfig(value.getRunConfig());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
        }
    }

        public SPacketRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
