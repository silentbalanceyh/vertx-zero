/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables.daos;


import cn.vertxup.rbac.domain.tables.SPacket;
import cn.vertxup.rbac.domain.tables.records.SPacketRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SPacketDao extends AbstractVertxDAO<SPacketRecord, cn.vertxup.rbac.domain.tables.pojos.SPacket, String, Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>>, Future<cn.vertxup.rbac.domain.tables.pojos.SPacket>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<SPacketRecord,cn.vertxup.rbac.domain.tables.pojos.SPacket,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public SPacketDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(SPacket.S_PACKET, cn.vertxup.rbac.domain.tables.pojos.SPacket.class, new JDBCClassicQueryExecutor<SPacketRecord,cn.vertxup.rbac.domain.tables.pojos.SPacket,String>(configuration,cn.vertxup.rbac.domain.tables.pojos.SPacket.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.rbac.domain.tables.pojos.SPacket object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByCode(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>RESOURCE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByResource(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.RESOURCE.in(values));
        }

        /**
     * Find records that have <code>RESOURCE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByResource(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.RESOURCE.in(values),limit);
        }

        /**
     * Find records that have <code>H_TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByHType(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.H_TYPE.in(values));
        }

        /**
     * Find records that have <code>H_TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByHType(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.H_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>H_MAPPING IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByHMapping(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.H_MAPPING.in(values));
        }

        /**
     * Find records that have <code>H_MAPPING IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByHMapping(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.H_MAPPING.in(values),limit);
        }

        /**
     * Find records that have <code>H_CONFIG IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByHConfig(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.H_CONFIG.in(values));
        }

        /**
     * Find records that have <code>H_CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByHConfig(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.H_CONFIG.in(values),limit);
        }

        /**
     * Find records that have <code>V_TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByVType(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.V_TYPE.in(values));
        }

        /**
     * Find records that have <code>V_TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByVType(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.V_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>V_MAPPING IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByVMapping(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.V_MAPPING.in(values));
        }

        /**
     * Find records that have <code>V_MAPPING IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByVMapping(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.V_MAPPING.in(values),limit);
        }

        /**
     * Find records that have <code>V_CONFIG IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByVConfig(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.V_CONFIG.in(values));
        }

        /**
     * Find records that have <code>V_CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByVConfig(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.V_CONFIG.in(values),limit);
        }

        /**
     * Find records that have <code>Q_TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByQType(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.Q_TYPE.in(values));
        }

        /**
     * Find records that have <code>Q_TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByQType(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.Q_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>Q_MAPPING IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByQMapping(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.Q_MAPPING.in(values));
        }

        /**
     * Find records that have <code>Q_MAPPING IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByQMapping(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.Q_MAPPING.in(values),limit);
        }

        /**
     * Find records that have <code>Q_CONFIG IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByQConfig(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.Q_CONFIG.in(values));
        }

        /**
     * Find records that have <code>Q_CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByQConfig(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.Q_CONFIG.in(values),limit);
        }

        /**
     * Find records that have <code>RUN_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByRunComponent(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.RUN_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>RUN_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByRunComponent(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.RUN_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>RUN_CONFIG IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByRunConfig(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.RUN_CONFIG.in(values));
        }

        /**
     * Find records that have <code>RUN_CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByRunConfig(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.RUN_CONFIG.in(values),limit);
        }

        /**
     * Find records that have <code>SEEK_SYNTAX IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyBySeekSyntax(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.SEEK_SYNTAX.in(values));
        }

        /**
     * Find records that have <code>SEEK_SYNTAX IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyBySeekSyntax(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.SEEK_SYNTAX.in(values),limit);
        }

        /**
     * Find records that have <code>SEEK_CONFIG IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyBySeekConfig(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.SEEK_CONFIG.in(values));
        }

        /**
     * Find records that have <code>SEEK_CONFIG IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyBySeekConfig(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.SEEK_CONFIG.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(SPacket.S_PACKET.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(SPacket.S_PACKET.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(SPacket.S_PACKET.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(SPacket.S_PACKET.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPacket>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(SPacket.S_PACKET.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<SPacketRecord,cn.vertxup.rbac.domain.tables.pojos.SPacket,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<SPacketRecord,cn.vertxup.rbac.domain.tables.pojos.SPacket,String>) super.queryExecutor();
        }
}
