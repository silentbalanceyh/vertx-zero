/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain;


import cn.vertxup.rbac.domain.tables.OAccessToken;
import cn.vertxup.rbac.domain.tables.OUser;
import cn.vertxup.rbac.domain.tables.RGroupRole;
import cn.vertxup.rbac.domain.tables.RRolePerm;
import cn.vertxup.rbac.domain.tables.RUserGroup;
import cn.vertxup.rbac.domain.tables.RUserRole;
import cn.vertxup.rbac.domain.tables.SAction;
import cn.vertxup.rbac.domain.tables.SGroup;
import cn.vertxup.rbac.domain.tables.SPacket;
import cn.vertxup.rbac.domain.tables.SPath;
import cn.vertxup.rbac.domain.tables.SPermSet;
import cn.vertxup.rbac.domain.tables.SPermission;
import cn.vertxup.rbac.domain.tables.SResource;
import cn.vertxup.rbac.domain.tables.SRole;
import cn.vertxup.rbac.domain.tables.SUser;
import cn.vertxup.rbac.domain.tables.SView;
import cn.vertxup.rbac.domain.tables.SVisitant;
import cn.vertxup.rbac.domain.tables.records.OAccessTokenRecord;
import cn.vertxup.rbac.domain.tables.records.OUserRecord;
import cn.vertxup.rbac.domain.tables.records.RGroupRoleRecord;
import cn.vertxup.rbac.domain.tables.records.RRolePermRecord;
import cn.vertxup.rbac.domain.tables.records.RUserGroupRecord;
import cn.vertxup.rbac.domain.tables.records.RUserRoleRecord;
import cn.vertxup.rbac.domain.tables.records.SActionRecord;
import cn.vertxup.rbac.domain.tables.records.SGroupRecord;
import cn.vertxup.rbac.domain.tables.records.SPacketRecord;
import cn.vertxup.rbac.domain.tables.records.SPathRecord;
import cn.vertxup.rbac.domain.tables.records.SPermSetRecord;
import cn.vertxup.rbac.domain.tables.records.SPermissionRecord;
import cn.vertxup.rbac.domain.tables.records.SResourceRecord;
import cn.vertxup.rbac.domain.tables.records.SRoleRecord;
import cn.vertxup.rbac.domain.tables.records.SUserRecord;
import cn.vertxup.rbac.domain.tables.records.SViewRecord;
import cn.vertxup.rbac.domain.tables.records.SVisitantRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * DB_ETERNAL.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<OAccessTokenRecord> KEY_O_ACCESS_TOKEN_PRIMARY = Internal.createUniqueKey(OAccessToken.O_ACCESS_TOKEN, DSL.name("KEY_O_ACCESS_TOKEN_PRIMARY"), new TableField[] { OAccessToken.O_ACCESS_TOKEN.KEY }, true);
    public static final UniqueKey<OUserRecord> KEY_O_USER_CLIENT_ID = Internal.createUniqueKey(OUser.O_USER, DSL.name("KEY_O_USER_CLIENT_ID"), new TableField[] { OUser.O_USER.CLIENT_ID }, true);
    public static final UniqueKey<OUserRecord> KEY_O_USER_CLIENT_SECRET = Internal.createUniqueKey(OUser.O_USER, DSL.name("KEY_O_USER_CLIENT_SECRET"), new TableField[] { OUser.O_USER.CLIENT_SECRET }, true);
    public static final UniqueKey<OUserRecord> KEY_O_USER_PRIMARY = Internal.createUniqueKey(OUser.O_USER, DSL.name("KEY_O_USER_PRIMARY"), new TableField[] { OUser.O_USER.KEY }, true);
    public static final UniqueKey<RGroupRoleRecord> KEY_R_GROUP_ROLE_PRIMARY = Internal.createUniqueKey(RGroupRole.R_GROUP_ROLE, DSL.name("KEY_R_GROUP_ROLE_PRIMARY"), new TableField[] { RGroupRole.R_GROUP_ROLE.GROUP_ID, RGroupRole.R_GROUP_ROLE.ROLE_ID }, true);
    public static final UniqueKey<RRolePermRecord> KEY_R_ROLE_PERM_PRIMARY = Internal.createUniqueKey(RRolePerm.R_ROLE_PERM, DSL.name("KEY_R_ROLE_PERM_PRIMARY"), new TableField[] { RRolePerm.R_ROLE_PERM.PERM_ID, RRolePerm.R_ROLE_PERM.ROLE_ID }, true);
    public static final UniqueKey<RUserGroupRecord> KEY_R_USER_GROUP_PRIMARY = Internal.createUniqueKey(RUserGroup.R_USER_GROUP, DSL.name("KEY_R_USER_GROUP_PRIMARY"), new TableField[] { RUserGroup.R_USER_GROUP.GROUP_ID, RUserGroup.R_USER_GROUP.USER_ID }, true);
    public static final UniqueKey<RUserRoleRecord> KEY_R_USER_ROLE_PRIMARY = Internal.createUniqueKey(RUserRole.R_USER_ROLE, DSL.name("KEY_R_USER_ROLE_PRIMARY"), new TableField[] { RUserRole.R_USER_ROLE.USER_ID, RUserRole.R_USER_ROLE.ROLE_ID }, true);
    public static final UniqueKey<SActionRecord> KEY_S_ACTION_CODE = Internal.createUniqueKey(SAction.S_ACTION, DSL.name("KEY_S_ACTION_CODE"), new TableField[] { SAction.S_ACTION.CODE, SAction.S_ACTION.SIGMA }, true);
    public static final UniqueKey<SActionRecord> KEY_S_ACTION_PRIMARY = Internal.createUniqueKey(SAction.S_ACTION, DSL.name("KEY_S_ACTION_PRIMARY"), new TableField[] { SAction.S_ACTION.KEY }, true);
    public static final UniqueKey<SActionRecord> KEY_S_ACTION_RESOURCE_ID = Internal.createUniqueKey(SAction.S_ACTION, DSL.name("KEY_S_ACTION_RESOURCE_ID"), new TableField[] { SAction.S_ACTION.RESOURCE_ID }, true);
    public static final UniqueKey<SActionRecord> KEY_S_ACTION_URI = Internal.createUniqueKey(SAction.S_ACTION, DSL.name("KEY_S_ACTION_URI"), new TableField[] { SAction.S_ACTION.URI, SAction.S_ACTION.METHOD, SAction.S_ACTION.SIGMA }, true);
    public static final UniqueKey<SGroupRecord> KEY_S_GROUP_CODE = Internal.createUniqueKey(SGroup.S_GROUP, DSL.name("KEY_S_GROUP_CODE"), new TableField[] { SGroup.S_GROUP.CODE, SGroup.S_GROUP.SIGMA }, true);
    public static final UniqueKey<SGroupRecord> KEY_S_GROUP_PRIMARY = Internal.createUniqueKey(SGroup.S_GROUP, DSL.name("KEY_S_GROUP_PRIMARY"), new TableField[] { SGroup.S_GROUP.KEY }, true);
    public static final UniqueKey<SPacketRecord> KEY_S_PACKET_PATH_ID = Internal.createUniqueKey(SPacket.S_PACKET, DSL.name("KEY_S_PACKET_PATH_ID"), new TableField[] { SPacket.S_PACKET.PATH_ID, SPacket.S_PACKET.RESOURCE_ID, SPacket.S_PACKET.SIGMA }, true);
    public static final UniqueKey<SPacketRecord> KEY_S_PACKET_PRIMARY = Internal.createUniqueKey(SPacket.S_PACKET, DSL.name("KEY_S_PACKET_PRIMARY"), new TableField[] { SPacket.S_PACKET.KEY }, true);
    public static final UniqueKey<SPathRecord> KEY_S_PATH_CODE = Internal.createUniqueKey(SPath.S_PATH, DSL.name("KEY_S_PATH_CODE"), new TableField[] { SPath.S_PATH.CODE, SPath.S_PATH.SIGMA }, true);
    public static final UniqueKey<SPathRecord> KEY_S_PATH_PRIMARY = Internal.createUniqueKey(SPath.S_PATH, DSL.name("KEY_S_PATH_PRIMARY"), new TableField[] { SPath.S_PATH.KEY }, true);
    public static final UniqueKey<SPermSetRecord> KEY_S_PERM_SET_NAME = Internal.createUniqueKey(SPermSet.S_PERM_SET, DSL.name("KEY_S_PERM_SET_NAME"), new TableField[] { SPermSet.S_PERM_SET.NAME, SPermSet.S_PERM_SET.CODE, SPermSet.S_PERM_SET.SIGMA }, true);
    public static final UniqueKey<SPermSetRecord> KEY_S_PERM_SET_PRIMARY = Internal.createUniqueKey(SPermSet.S_PERM_SET, DSL.name("KEY_S_PERM_SET_PRIMARY"), new TableField[] { SPermSet.S_PERM_SET.KEY }, true);
    public static final UniqueKey<SPermissionRecord> KEY_S_PERMISSION_CODE = Internal.createUniqueKey(SPermission.S_PERMISSION, DSL.name("KEY_S_PERMISSION_CODE"), new TableField[] { SPermission.S_PERMISSION.CODE, SPermission.S_PERMISSION.SIGMA }, true);
    public static final UniqueKey<SPermissionRecord> KEY_S_PERMISSION_PRIMARY = Internal.createUniqueKey(SPermission.S_PERMISSION, DSL.name("KEY_S_PERMISSION_PRIMARY"), new TableField[] { SPermission.S_PERMISSION.KEY }, true);
    public static final UniqueKey<SResourceRecord> KEY_S_RESOURCE_CODE = Internal.createUniqueKey(SResource.S_RESOURCE, DSL.name("KEY_S_RESOURCE_CODE"), new TableField[] { SResource.S_RESOURCE.CODE, SResource.S_RESOURCE.SIGMA }, true);
    public static final UniqueKey<SResourceRecord> KEY_S_RESOURCE_PRIMARY = Internal.createUniqueKey(SResource.S_RESOURCE, DSL.name("KEY_S_RESOURCE_PRIMARY"), new TableField[] { SResource.S_RESOURCE.KEY }, true);
    public static final UniqueKey<SRoleRecord> KEY_S_ROLE_CODE = Internal.createUniqueKey(SRole.S_ROLE, DSL.name("KEY_S_ROLE_CODE"), new TableField[] { SRole.S_ROLE.CODE, SRole.S_ROLE.SIGMA }, true);
    public static final UniqueKey<SRoleRecord> KEY_S_ROLE_PRIMARY = Internal.createUniqueKey(SRole.S_ROLE, DSL.name("KEY_S_ROLE_PRIMARY"), new TableField[] { SRole.S_ROLE.KEY }, true);
    public static final UniqueKey<SUserRecord> KEY_S_USER_PRIMARY = Internal.createUniqueKey(SUser.S_USER, DSL.name("KEY_S_USER_PRIMARY"), new TableField[] { SUser.S_USER.KEY }, true);
    public static final UniqueKey<SUserRecord> KEY_S_USER_USERNAME = Internal.createUniqueKey(SUser.S_USER, DSL.name("KEY_S_USER_USERNAME"), new TableField[] { SUser.S_USER.USERNAME, SUser.S_USER.SIGMA }, true);
    public static final UniqueKey<SViewRecord> KEY_S_VIEW_OWNER_TYPE = Internal.createUniqueKey(SView.S_VIEW, DSL.name("KEY_S_VIEW_OWNER_TYPE"), new TableField[] { SView.S_VIEW.OWNER_TYPE, SView.S_VIEW.OWNER, SView.S_VIEW.RESOURCE_ID, SView.S_VIEW.NAME, SView.S_VIEW.POSITION }, true);
    public static final UniqueKey<SViewRecord> KEY_S_VIEW_PRIMARY = Internal.createUniqueKey(SView.S_VIEW, DSL.name("KEY_S_VIEW_PRIMARY"), new TableField[] { SView.S_VIEW.KEY }, true);
    public static final UniqueKey<SVisitantRecord> KEY_S_VISITANT_PRIMARY = Internal.createUniqueKey(SVisitant.S_VISITANT, DSL.name("KEY_S_VISITANT_PRIMARY"), new TableField[] { SVisitant.S_VISITANT.KEY }, true);
    public static final UniqueKey<SVisitantRecord> KEY_S_VISITANT_VIEW_ID = Internal.createUniqueKey(SVisitant.S_VISITANT, DSL.name("KEY_S_VISITANT_VIEW_ID"), new TableField[] { SVisitant.S_VISITANT.VIEW_ID, SVisitant.S_VISITANT.TYPE, SVisitant.S_VISITANT.CONFIG_KEY }, true);
}
