/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;

import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.setOrThrow;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface ISPacket extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.KEY</code>. 「key」- 包信息
     */
    public ISPacket setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.KEY</code>. 「key」- 包信息
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.CODE</code>. 「code」- 关联的 PATH 表对应的
     * code
     */
    public ISPacket setCode(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.CODE</code>. 「code」- 关联的 PATH 表对应的
     * code
     */
    public String getCode();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.RESOURCE</code>. 「resource」-
     * 关联的资源表对应的 code
     */
    public ISPacket setResource(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.RESOURCE</code>. 「resource」-
     * 关联的资源表对应的 code
     */
    public String getResource();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.H_TYPE</code>. 「hType」- 行过滤类型
     */
    public ISPacket setHType(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.H_TYPE</code>. 「hType」- 行过滤类型
     */
    public String getHType();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.H_MAPPING</code>. 「hMapping」-
     * 字段映射关系，存在转换时必须
     */
    public ISPacket setHMapping(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.H_MAPPING</code>. 「hMapping」-
     * 字段映射关系，存在转换时必须
     */
    public String getHMapping();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.H_CONFIG</code>. 「hConfig」- 字段附加配置
     */
    public ISPacket setHConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.H_CONFIG</code>. 「hConfig」- 字段附加配置
     */
    public String getHConfig();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.V_TYPE</code>. 「vType」- 列过滤类型
     */
    public ISPacket setVType(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.V_TYPE</code>. 「vType」- 列过滤类型
     */
    public String getVType();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.V_MAPPING</code>. 「vMapping」-
     * 列字段映射关系，存在转换时必须
     */
    public ISPacket setVMapping(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.V_MAPPING</code>. 「vMapping」-
     * 列字段映射关系，存在转换时必须
     */
    public String getVMapping();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.V_CONFIG</code>. 「vConfig」- 列配置
     */
    public ISPacket setVConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.V_CONFIG</code>. 「vConfig」- 列配置
     */
    public String getVConfig();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.Q_TYPE</code>. 「qType」- 条件模板
     */
    public ISPacket setQType(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.Q_TYPE</code>. 「qType」- 条件模板
     */
    public String getQType();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.Q_MAPPING</code>. 「qMapping」-
     * 查询条件映射关系
     */
    public ISPacket setQMapping(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.Q_MAPPING</code>. 「qMapping」-
     * 查询条件映射关系
     */
    public String getQMapping();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.Q_CONFIG</code>. 「qConfig」-
     * 条件配置（界面配置相关）
     */
    public ISPacket setQConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.Q_CONFIG</code>. 「qConfig」-
     * 条件配置（界面配置相关）
     */
    public String getQConfig();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.RUN_COMPONENT</code>.
     * 「runComponent」- 自定义模式下的组件
     */
    public ISPacket setRunComponent(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.RUN_COMPONENT</code>.
     * 「runComponent」- 自定义模式下的组件
     */
    public String getRunComponent();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.RUN_CONFIG</code>. 「runConfig」-
     * 运行专用配置
     */
    public ISPacket setRunConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.RUN_CONFIG</code>. 「runConfig」-
     * 运行专用配置
     */
    public String getRunConfig();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.SEEK_SYNTAX</code>. 「seekSyntax」-
     * 访问者语法
     */
    public ISPacket setSeekSyntax(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.SEEK_SYNTAX</code>. 「seekSyntax」-
     * 访问者语法
     */
    public String getSeekSyntax();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.SEEK_CONFIG</code>. 「seekConfig」-
     * 访问者配置
     */
    public ISPacket setSeekConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.SEEK_CONFIG</code>. 「seekConfig」-
     * 访问者配置
     */
    public String getSeekConfig();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.SIGMA</code>. 「sigma」- 统一标识
     */
    public ISPacket setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.LANGUAGE</code>. 「language」- 使用的语言
     */
    public ISPacket setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.ACTIVE</code>. 「active」- 是否启用
     */
    public ISPacket setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.METADATA</code>. 「metadata」- 附加配置数据
     */
    public ISPacket setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.METADATA</code>. 「metadata」- 附加配置数据
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public ISPacket setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public ISPacket setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public ISPacket setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public ISPacket setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface ISPacket
     */
    public void from(ISPacket from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface ISPacket
     */
    public <E extends ISPacket> E into(E into);

        @Override
        public default ISPacket fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setCode,json::getString,"CODE","java.lang.String");
                setOrThrow(this::setResource,json::getString,"RESOURCE","java.lang.String");
                setOrThrow(this::setHType,json::getString,"H_TYPE","java.lang.String");
                setOrThrow(this::setHMapping,json::getString,"H_MAPPING","java.lang.String");
                setOrThrow(this::setHConfig,json::getString,"H_CONFIG","java.lang.String");
                setOrThrow(this::setVType,json::getString,"V_TYPE","java.lang.String");
                setOrThrow(this::setVMapping,json::getString,"V_MAPPING","java.lang.String");
                setOrThrow(this::setVConfig,json::getString,"V_CONFIG","java.lang.String");
                setOrThrow(this::setQType,json::getString,"Q_TYPE","java.lang.String");
                setOrThrow(this::setQMapping,json::getString,"Q_MAPPING","java.lang.String");
                setOrThrow(this::setQConfig,json::getString,"Q_CONFIG","java.lang.String");
                setOrThrow(this::setRunComponent,json::getString,"RUN_COMPONENT","java.lang.String");
                setOrThrow(this::setRunConfig,json::getString,"RUN_CONFIG","java.lang.String");
                setOrThrow(this::setSeekSyntax,json::getString,"SEEK_SYNTAX","java.lang.String");
                setOrThrow(this::setSeekConfig,json::getString,"SEEK_CONFIG","java.lang.String");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                setOrThrow(this::setUpdatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"UPDATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setUpdatedBy,json::getString,"UPDATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("CODE",getCode());
                json.put("RESOURCE",getResource());
                json.put("H_TYPE",getHType());
                json.put("H_MAPPING",getHMapping());
                json.put("H_CONFIG",getHConfig());
                json.put("V_TYPE",getVType());
                json.put("V_MAPPING",getVMapping());
                json.put("V_CONFIG",getVConfig());
                json.put("Q_TYPE",getQType());
                json.put("Q_MAPPING",getQMapping());
                json.put("Q_CONFIG",getQConfig());
                json.put("RUN_COMPONENT",getRunComponent());
                json.put("RUN_CONFIG",getRunConfig());
                json.put("SEEK_SYNTAX",getSeekSyntax());
                json.put("SEEK_CONFIG",getSeekConfig());
                json.put("SIGMA",getSigma());
                json.put("LANGUAGE",getLanguage());
                json.put("ACTIVE",getActive());
                json.put("METADATA",getMetadata());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                json.put("UPDATED_AT",getUpdatedAt()==null?null:getUpdatedAt().toString());
                json.put("UPDATED_BY",getUpdatedBy());
                return json;
        }

}
