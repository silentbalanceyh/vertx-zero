/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables.daos;


import cn.vertxup.rbac.domain.tables.SPermission;
import cn.vertxup.rbac.domain.tables.records.SPermissionRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SPermissionDao extends AbstractVertxDAO<SPermissionRecord, cn.vertxup.rbac.domain.tables.pojos.SPermission, String, Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>>, Future<cn.vertxup.rbac.domain.tables.pojos.SPermission>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<SPermissionRecord,cn.vertxup.rbac.domain.tables.pojos.SPermission,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public SPermissionDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(SPermission.S_PERMISSION, cn.vertxup.rbac.domain.tables.pojos.SPermission.class, new JDBCClassicQueryExecutor<SPermissionRecord,cn.vertxup.rbac.domain.tables.pojos.SPermission,String>(configuration,cn.vertxup.rbac.domain.tables.pojos.SPermission.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.rbac.domain.tables.pojos.SPermission object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByName(Collection<String> values) {
                return findManyByCondition(SPermission.S_PERMISSION.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(SPermission.S_PERMISSION.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByCode(Collection<String> values) {
                return findManyByCondition(SPermission.S_PERMISSION.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(SPermission.S_PERMISSION.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByIdentifier(Collection<String> values) {
                return findManyByCondition(SPermission.S_PERMISSION.IDENTIFIER.in(values));
        }

        /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByIdentifier(Collection<String> values, int limit) {
                return findManyByCondition(SPermission.S_PERMISSION.IDENTIFIER.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(SPermission.S_PERMISSION.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(SPermission.S_PERMISSION.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(SPermission.S_PERMISSION.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(SPermission.S_PERMISSION.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(SPermission.S_PERMISSION.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(SPermission.S_PERMISSION.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByComment(Collection<String> values) {
                return findManyByCondition(SPermission.S_PERMISSION.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(SPermission.S_PERMISSION.COMMENT.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(SPermission.S_PERMISSION.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(SPermission.S_PERMISSION.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(SPermission.S_PERMISSION.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(SPermission.S_PERMISSION.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(SPermission.S_PERMISSION.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(SPermission.S_PERMISSION.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(SPermission.S_PERMISSION.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(SPermission.S_PERMISSION.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(SPermission.S_PERMISSION.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SPermission>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(SPermission.S_PERMISSION.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<SPermissionRecord,cn.vertxup.rbac.domain.tables.pojos.SPermission,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<SPermissionRecord,cn.vertxup.rbac.domain.tables.pojos.SPermission,String>) super.queryExecutor();
        }
}
