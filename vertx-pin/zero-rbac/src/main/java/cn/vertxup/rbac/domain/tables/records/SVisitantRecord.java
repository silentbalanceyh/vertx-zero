/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables.records;


import cn.vertxup.rbac.domain.tables.SVisitant;
import cn.vertxup.rbac.domain.tables.interfaces.ISVisitant;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record19;
import org.jooq.Row19;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SVisitantRecord extends UpdatableRecordImpl<SVisitantRecord> implements VertxPojo, Record19<String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String>, ISVisitant {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.KEY</code>. 「key」- 限定记录ID
     */
    @Override
    public SVisitantRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.KEY</code>. 「key」- 限定记录ID
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.VIEW_ID</code>. 「viewId」-
     * 视图访问者的读ID
     */
    @Override
    public SVisitantRecord setViewId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.VIEW_ID</code>. 「viewId」-
     * 视图访问者的读ID
     */
    @Override
    public String getViewId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.PHASE</code>. 「phase」- 作用周期
     */
    @Override
    public SVisitantRecord setPhase(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.PHASE</code>. 「phase」- 作用周期
     */
    @Override
    public String getPhase() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.TYPE</code>. 「type」- 访问者类型
     */
    @Override
    public SVisitantRecord setType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.TYPE</code>. 「type」- 访问者类型
     */
    @Override
    public String getType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.IDENTIFIER</code>. 「identifier」-
     * 动态类型中的模型ID
     */
    @Override
    public SVisitantRecord setIdentifier(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.IDENTIFIER</code>. 「identifier」-
     * 动态类型中的模型ID
     */
    @Override
    public String getIdentifier() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.CONFIG_KEY</code>. 「configKey」-
     * 模型下记录对应的ID，一般是配置的ID
     */
    @Override
    public SVisitantRecord setConfigKey(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.CONFIG_KEY</code>. 「configKey」-
     * 模型下记录对应的ID，一般是配置的ID
     */
    @Override
    public String getConfigKey() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACL_VISIBLE</code>. 「aclVisible」-
     * 可见的属性集
     */
    @Override
    public SVisitantRecord setAclVisible(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACL_VISIBLE</code>. 「aclVisible」-
     * 可见的属性集
     */
    @Override
    public String getAclVisible() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACL_VIEW</code>. 「aclView」- 只读的属性集
     */
    @Override
    public SVisitantRecord setAclView(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACL_VIEW</code>. 「aclView」- 只读的属性集
     */
    @Override
    public String getAclView() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACL_VARIETY</code>. 「aclVariety」-
     * 多样性的属性集，用于控制集合类型的属性
     */
    @Override
    public SVisitantRecord setAclVariety(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACL_VARIETY</code>. 「aclVariety」-
     * 多样性的属性集，用于控制集合类型的属性
     */
    @Override
    public String getAclVariety() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACL_VOW</code>. 「aclVow」- 引用类属性集
     */
    @Override
    public SVisitantRecord setAclVow(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACL_VOW</code>. 「aclVow」- 引用类属性集
     */
    @Override
    public String getAclVow() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACL_VERGE</code>. 「aclVerge」-
     * 依赖属性集
     */
    @Override
    public SVisitantRecord setAclVerge(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACL_VERGE</code>. 「aclVerge」-
     * 依赖属性集
     */
    @Override
    public String getAclVerge() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.SIGMA</code>. 「sigma」- 用户组绑定的统一标识
     */
    @Override
    public SVisitantRecord setSigma(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.SIGMA</code>. 「sigma」- 用户组绑定的统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public SVisitantRecord setLanguage(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public SVisitantRecord setActive(Boolean value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    @Override
    public SVisitantRecord setMetadata(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public SVisitantRecord setCreatedAt(LocalDateTime value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public SVisitantRecord setCreatedBy(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(16);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public SVisitantRecord setUpdatedAt(LocalDateTime value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(17);
    }

    /**
     * Setter for <code>DB_ETERNAL.S_VISITANT.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public SVisitantRecord setUpdatedBy(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_VISITANT.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(18);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record19 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row19<String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    @Override
    public Row19<String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row19) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return SVisitant.S_VISITANT.KEY;
    }

    @Override
    public Field<String> field2() {
        return SVisitant.S_VISITANT.VIEW_ID;
    }

    @Override
    public Field<String> field3() {
        return SVisitant.S_VISITANT.PHASE;
    }

    @Override
    public Field<String> field4() {
        return SVisitant.S_VISITANT.TYPE;
    }

    @Override
    public Field<String> field5() {
        return SVisitant.S_VISITANT.IDENTIFIER;
    }

    @Override
    public Field<String> field6() {
        return SVisitant.S_VISITANT.CONFIG_KEY;
    }

    @Override
    public Field<String> field7() {
        return SVisitant.S_VISITANT.ACL_VISIBLE;
    }

    @Override
    public Field<String> field8() {
        return SVisitant.S_VISITANT.ACL_VIEW;
    }

    @Override
    public Field<String> field9() {
        return SVisitant.S_VISITANT.ACL_VARIETY;
    }

    @Override
    public Field<String> field10() {
        return SVisitant.S_VISITANT.ACL_VOW;
    }

    @Override
    public Field<String> field11() {
        return SVisitant.S_VISITANT.ACL_VERGE;
    }

    @Override
    public Field<String> field12() {
        return SVisitant.S_VISITANT.SIGMA;
    }

    @Override
    public Field<String> field13() {
        return SVisitant.S_VISITANT.LANGUAGE;
    }

    @Override
    public Field<Boolean> field14() {
        return SVisitant.S_VISITANT.ACTIVE;
    }

    @Override
    public Field<String> field15() {
        return SVisitant.S_VISITANT.METADATA;
    }

    @Override
    public Field<LocalDateTime> field16() {
        return SVisitant.S_VISITANT.CREATED_AT;
    }

    @Override
    public Field<String> field17() {
        return SVisitant.S_VISITANT.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field18() {
        return SVisitant.S_VISITANT.UPDATED_AT;
    }

    @Override
    public Field<String> field19() {
        return SVisitant.S_VISITANT.UPDATED_BY;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getViewId();
    }

    @Override
    public String component3() {
        return getPhase();
    }

    @Override
    public String component4() {
        return getType();
    }

    @Override
    public String component5() {
        return getIdentifier();
    }

    @Override
    public String component6() {
        return getConfigKey();
    }

    @Override
    public String component7() {
        return getAclVisible();
    }

    @Override
    public String component8() {
        return getAclView();
    }

    @Override
    public String component9() {
        return getAclVariety();
    }

    @Override
    public String component10() {
        return getAclVow();
    }

    @Override
    public String component11() {
        return getAclVerge();
    }

    @Override
    public String component12() {
        return getSigma();
    }

    @Override
    public String component13() {
        return getLanguage();
    }

    @Override
    public Boolean component14() {
        return getActive();
    }

    @Override
    public String component15() {
        return getMetadata();
    }

    @Override
    public LocalDateTime component16() {
        return getCreatedAt();
    }

    @Override
    public String component17() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component18() {
        return getUpdatedAt();
    }

    @Override
    public String component19() {
        return getUpdatedBy();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getViewId();
    }

    @Override
    public String value3() {
        return getPhase();
    }

    @Override
    public String value4() {
        return getType();
    }

    @Override
    public String value5() {
        return getIdentifier();
    }

    @Override
    public String value6() {
        return getConfigKey();
    }

    @Override
    public String value7() {
        return getAclVisible();
    }

    @Override
    public String value8() {
        return getAclView();
    }

    @Override
    public String value9() {
        return getAclVariety();
    }

    @Override
    public String value10() {
        return getAclVow();
    }

    @Override
    public String value11() {
        return getAclVerge();
    }

    @Override
    public String value12() {
        return getSigma();
    }

    @Override
    public String value13() {
        return getLanguage();
    }

    @Override
    public Boolean value14() {
        return getActive();
    }

    @Override
    public String value15() {
        return getMetadata();
    }

    @Override
    public LocalDateTime value16() {
        return getCreatedAt();
    }

    @Override
    public String value17() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value18() {
        return getUpdatedAt();
    }

    @Override
    public String value19() {
        return getUpdatedBy();
    }

    @Override
    public SVisitantRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public SVisitantRecord value2(String value) {
        setViewId(value);
        return this;
    }

    @Override
    public SVisitantRecord value3(String value) {
        setPhase(value);
        return this;
    }

    @Override
    public SVisitantRecord value4(String value) {
        setType(value);
        return this;
    }

    @Override
    public SVisitantRecord value5(String value) {
        setIdentifier(value);
        return this;
    }

    @Override
    public SVisitantRecord value6(String value) {
        setConfigKey(value);
        return this;
    }

    @Override
    public SVisitantRecord value7(String value) {
        setAclVisible(value);
        return this;
    }

    @Override
    public SVisitantRecord value8(String value) {
        setAclView(value);
        return this;
    }

    @Override
    public SVisitantRecord value9(String value) {
        setAclVariety(value);
        return this;
    }

    @Override
    public SVisitantRecord value10(String value) {
        setAclVow(value);
        return this;
    }

    @Override
    public SVisitantRecord value11(String value) {
        setAclVerge(value);
        return this;
    }

    @Override
    public SVisitantRecord value12(String value) {
        setSigma(value);
        return this;
    }

    @Override
    public SVisitantRecord value13(String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public SVisitantRecord value14(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public SVisitantRecord value15(String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public SVisitantRecord value16(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public SVisitantRecord value17(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SVisitantRecord value18(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public SVisitantRecord value19(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public SVisitantRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, String value9, String value10, String value11, String value12, String value13, Boolean value14, String value15, LocalDateTime value16, String value17, LocalDateTime value18, String value19) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ISVisitant from) {
        setKey(from.getKey());
        setViewId(from.getViewId());
        setPhase(from.getPhase());
        setType(from.getType());
        setIdentifier(from.getIdentifier());
        setConfigKey(from.getConfigKey());
        setAclVisible(from.getAclVisible());
        setAclView(from.getAclView());
        setAclVariety(from.getAclVariety());
        setAclVow(from.getAclVow());
        setAclVerge(from.getAclVerge());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends ISVisitant> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SVisitantRecord
     */
    public SVisitantRecord() {
        super(SVisitant.S_VISITANT);
    }

    /**
     * Create a detached, initialised SVisitantRecord
     */
    public SVisitantRecord(String key, String viewId, String phase, String type, String identifier, String configKey, String aclVisible, String aclView, String aclVariety, String aclVow, String aclVerge, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(SVisitant.S_VISITANT);

        setKey(key);
        setViewId(viewId);
        setPhase(phase);
        setType(type);
        setIdentifier(identifier);
        setConfigKey(configKey);
        setAclVisible(aclVisible);
        setAclView(aclView);
        setAclVariety(aclVariety);
        setAclVow(aclVow);
        setAclVerge(aclVerge);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
    }

    /**
     * Create a detached, initialised SVisitantRecord
     */
    public SVisitantRecord(cn.vertxup.rbac.domain.tables.pojos.SVisitant value) {
        super(SVisitant.S_VISITANT);

        if (value != null) {
            setKey(value.getKey());
            setViewId(value.getViewId());
            setPhase(value.getPhase());
            setType(value.getType());
            setIdentifier(value.getIdentifier());
            setConfigKey(value.getConfigKey());
            setAclVisible(value.getAclVisible());
            setAclView(value.getAclView());
            setAclVariety(value.getAclVariety());
            setAclVow(value.getAclVow());
            setAclVerge(value.getAclVerge());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
        }
    }

        public SVisitantRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
