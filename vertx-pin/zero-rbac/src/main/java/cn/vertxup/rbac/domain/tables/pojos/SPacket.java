/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables.pojos;


import cn.vertxup.rbac.domain.tables.interfaces.ISPacket;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SPacket implements VertxPojo, ISPacket {

    private static final long serialVersionUID = 1L;

    private String key;
    private String code;
    private String resource;
    private String hType;
    private String hMapping;
    private String hConfig;
    private String vType;
    private String vMapping;
    private String vConfig;
    private String qType;
    private String qMapping;
    private String qConfig;
    private String runComponent;
    private String runConfig;
    private String sigma;
    private String language;
    private Boolean active;
    private String metadata;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public SPacket() {}

    public SPacket(ISPacket value) {
        this.key = value.getKey();
        this.code = value.getCode();
        this.resource = value.getResource();
        this.hType = value.getHType();
        this.hMapping = value.getHMapping();
        this.hConfig = value.getHConfig();
        this.vType = value.getVType();
        this.vMapping = value.getVMapping();
        this.vConfig = value.getVConfig();
        this.qType = value.getQType();
        this.qMapping = value.getQMapping();
        this.qConfig = value.getQConfig();
        this.runComponent = value.getRunComponent();
        this.runConfig = value.getRunConfig();
        this.sigma = value.getSigma();
        this.language = value.getLanguage();
        this.active = value.getActive();
        this.metadata = value.getMetadata();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public SPacket(
        String key,
        String code,
        String resource,
        String hType,
        String hMapping,
        String hConfig,
        String vType,
        String vMapping,
        String vConfig,
        String qType,
        String qMapping,
        String qConfig,
        String runComponent,
        String runConfig,
        String sigma,
        String language,
        Boolean active,
        String metadata,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.code = code;
        this.resource = resource;
        this.hType = hType;
        this.hMapping = hMapping;
        this.hConfig = hConfig;
        this.vType = vType;
        this.vMapping = vMapping;
        this.vConfig = vConfig;
        this.qType = qType;
        this.qMapping = qMapping;
        this.qConfig = qConfig;
        this.runComponent = runComponent;
        this.runConfig = runConfig;
        this.sigma = sigma;
        this.language = language;
        this.active = active;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public SPacket(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.KEY</code>. 「key」- 包信息
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.KEY</code>. 「key」- 包信息
     */
    @Override
    public SPacket setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.CODE</code>. 「code」- 关联的 PATH 表对应的
     * code
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.CODE</code>. 「code」- 关联的 PATH 表对应的
     * code
     */
    @Override
    public SPacket setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.RESOURCE</code>. 「resource」-
     * 关联的资源表对应的 code
     */
    @Override
    public String getResource() {
        return this.resource;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.RESOURCE</code>. 「resource」-
     * 关联的资源表对应的 code
     */
    @Override
    public SPacket setResource(String resource) {
        this.resource = resource;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.H_TYPE</code>. 「hType」- 行过滤类型
     */
    @Override
    public String getHType() {
        return this.hType;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.H_TYPE</code>. 「hType」- 行过滤类型
     */
    @Override
    public SPacket setHType(String hType) {
        this.hType = hType;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.H_MAPPING</code>. 「hMapping」-
     * 字段映射关系，存在转换时必须
     */
    @Override
    public String getHMapping() {
        return this.hMapping;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.H_MAPPING</code>. 「hMapping」-
     * 字段映射关系，存在转换时必须
     */
    @Override
    public SPacket setHMapping(String hMapping) {
        this.hMapping = hMapping;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.H_CONFIG</code>. 「hConfig」- 字段附加配置
     */
    @Override
    public String getHConfig() {
        return this.hConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.H_CONFIG</code>. 「hConfig」- 字段附加配置
     */
    @Override
    public SPacket setHConfig(String hConfig) {
        this.hConfig = hConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.V_TYPE</code>. 「vType」- 列过滤类型
     */
    @Override
    public String getVType() {
        return this.vType;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.V_TYPE</code>. 「vType」- 列过滤类型
     */
    @Override
    public SPacket setVType(String vType) {
        this.vType = vType;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.V_MAPPING</code>. 「vMapping」-
     * 列字段映射关系，存在转换时必须
     */
    @Override
    public String getVMapping() {
        return this.vMapping;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.V_MAPPING</code>. 「vMapping」-
     * 列字段映射关系，存在转换时必须
     */
    @Override
    public SPacket setVMapping(String vMapping) {
        this.vMapping = vMapping;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.V_CONFIG</code>. 「vConfig」- 列配置
     */
    @Override
    public String getVConfig() {
        return this.vConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.V_CONFIG</code>. 「vConfig」- 列配置
     */
    @Override
    public SPacket setVConfig(String vConfig) {
        this.vConfig = vConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.Q_TYPE</code>. 「qType」- 条件模板
     */
    @Override
    public String getQType() {
        return this.qType;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.Q_TYPE</code>. 「qType」- 条件模板
     */
    @Override
    public SPacket setQType(String qType) {
        this.qType = qType;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.Q_MAPPING</code>. 「qMapping」-
     * 查询条件映射关系
     */
    @Override
    public String getQMapping() {
        return this.qMapping;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.Q_MAPPING</code>. 「qMapping」-
     * 查询条件映射关系
     */
    @Override
    public SPacket setQMapping(String qMapping) {
        this.qMapping = qMapping;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.Q_CONFIG</code>. 「qConfig」-
     * 条件配置（界面配置相关）
     */
    @Override
    public String getQConfig() {
        return this.qConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.Q_CONFIG</code>. 「qConfig」-
     * 条件配置（界面配置相关）
     */
    @Override
    public SPacket setQConfig(String qConfig) {
        this.qConfig = qConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.RUN_COMPONENT</code>.
     * 「runComponent」- 自定义模式下的组件
     */
    @Override
    public String getRunComponent() {
        return this.runComponent;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.RUN_COMPONENT</code>.
     * 「runComponent」- 自定义模式下的组件
     */
    @Override
    public SPacket setRunComponent(String runComponent) {
        this.runComponent = runComponent;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.RUN_CONFIG</code>. 「runConfig」-
     * 运行专用配置
     */
    @Override
    public String getRunConfig() {
        return this.runConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.RUN_CONFIG</code>. 「runConfig」-
     * 运行专用配置
     */
    @Override
    public SPacket setRunConfig(String runConfig) {
        this.runConfig = runConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public SPacket setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public SPacket setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public SPacket setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public SPacket setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public SPacket setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public SPacket setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public SPacket setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public SPacket setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final SPacket other = (SPacket) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        }
        else if (!this.key.equals(other.key))
            return false;
        if (this.code == null) {
            if (other.code != null)
                return false;
        }
        else if (!this.code.equals(other.code))
            return false;
        if (this.resource == null) {
            if (other.resource != null)
                return false;
        }
        else if (!this.resource.equals(other.resource))
            return false;
        if (this.hType == null) {
            if (other.hType != null)
                return false;
        }
        else if (!this.hType.equals(other.hType))
            return false;
        if (this.hMapping == null) {
            if (other.hMapping != null)
                return false;
        }
        else if (!this.hMapping.equals(other.hMapping))
            return false;
        if (this.hConfig == null) {
            if (other.hConfig != null)
                return false;
        }
        else if (!this.hConfig.equals(other.hConfig))
            return false;
        if (this.vType == null) {
            if (other.vType != null)
                return false;
        }
        else if (!this.vType.equals(other.vType))
            return false;
        if (this.vMapping == null) {
            if (other.vMapping != null)
                return false;
        }
        else if (!this.vMapping.equals(other.vMapping))
            return false;
        if (this.vConfig == null) {
            if (other.vConfig != null)
                return false;
        }
        else if (!this.vConfig.equals(other.vConfig))
            return false;
        if (this.qType == null) {
            if (other.qType != null)
                return false;
        }
        else if (!this.qType.equals(other.qType))
            return false;
        if (this.qMapping == null) {
            if (other.qMapping != null)
                return false;
        }
        else if (!this.qMapping.equals(other.qMapping))
            return false;
        if (this.qConfig == null) {
            if (other.qConfig != null)
                return false;
        }
        else if (!this.qConfig.equals(other.qConfig))
            return false;
        if (this.runComponent == null) {
            if (other.runComponent != null)
                return false;
        }
        else if (!this.runComponent.equals(other.runComponent))
            return false;
        if (this.runConfig == null) {
            if (other.runConfig != null)
                return false;
        }
        else if (!this.runConfig.equals(other.runConfig))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        }
        else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        }
        else if (!this.language.equals(other.language))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        }
        else if (!this.active.equals(other.active))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        }
        else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.resource == null) ? 0 : this.resource.hashCode());
        result = prime * result + ((this.hType == null) ? 0 : this.hType.hashCode());
        result = prime * result + ((this.hMapping == null) ? 0 : this.hMapping.hashCode());
        result = prime * result + ((this.hConfig == null) ? 0 : this.hConfig.hashCode());
        result = prime * result + ((this.vType == null) ? 0 : this.vType.hashCode());
        result = prime * result + ((this.vMapping == null) ? 0 : this.vMapping.hashCode());
        result = prime * result + ((this.vConfig == null) ? 0 : this.vConfig.hashCode());
        result = prime * result + ((this.qType == null) ? 0 : this.qType.hashCode());
        result = prime * result + ((this.qMapping == null) ? 0 : this.qMapping.hashCode());
        result = prime * result + ((this.qConfig == null) ? 0 : this.qConfig.hashCode());
        result = prime * result + ((this.runComponent == null) ? 0 : this.runComponent.hashCode());
        result = prime * result + ((this.runConfig == null) ? 0 : this.runConfig.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SPacket (");

        sb.append(key);
        sb.append(", ").append(code);
        sb.append(", ").append(resource);
        sb.append(", ").append(hType);
        sb.append(", ").append(hMapping);
        sb.append(", ").append(hConfig);
        sb.append(", ").append(vType);
        sb.append(", ").append(vMapping);
        sb.append(", ").append(vConfig);
        sb.append(", ").append(qType);
        sb.append(", ").append(qMapping);
        sb.append(", ").append(qConfig);
        sb.append(", ").append(runComponent);
        sb.append(", ").append(runConfig);
        sb.append(", ").append(sigma);
        sb.append(", ").append(language);
        sb.append(", ").append(active);
        sb.append(", ").append(metadata);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ISPacket from) {
        setKey(from.getKey());
        setCode(from.getCode());
        setResource(from.getResource());
        setHType(from.getHType());
        setHMapping(from.getHMapping());
        setHConfig(from.getHConfig());
        setVType(from.getVType());
        setVMapping(from.getVMapping());
        setVConfig(from.getVConfig());
        setQType(from.getQType());
        setQMapping(from.getQMapping());
        setQConfig(from.getQConfig());
        setRunComponent(from.getRunComponent());
        setRunConfig(from.getRunConfig());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends ISPacket> E into(E into) {
        into.from(this);
        return into;
    }
}
