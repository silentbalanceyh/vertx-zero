/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables.pojos;


import cn.vertxup.rbac.domain.tables.interfaces.ISPacket;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SPacket implements VertxPojo, ISPacket {

    private static final long serialVersionUID = 1L;

    private String        key;
    private String        pathId;
    private String        resourceId;
    private String        rowType;
    private String        rowField;
    private String        rowTpl;
    private String        rowTplMapping;
    private String        colType;
    private String        colConfig;
    private String        condTpl;
    private String        condTplMapping;
    private String        condConfig;
    private String        sigma;
    private String        language;
    private Boolean       active;
    private String        metadata;
    private LocalDateTime createdAt;
    private String        createdBy;
    private LocalDateTime updatedAt;
    private String        updatedBy;

    public SPacket() {}

    public SPacket(ISPacket value) {
        this.key = value.getKey();
        this.pathId = value.getPathId();
        this.resourceId = value.getResourceId();
        this.rowType = value.getRowType();
        this.rowField = value.getRowField();
        this.rowTpl = value.getRowTpl();
        this.rowTplMapping = value.getRowTplMapping();
        this.colType = value.getColType();
        this.colConfig = value.getColConfig();
        this.condTpl = value.getCondTpl();
        this.condTplMapping = value.getCondTplMapping();
        this.condConfig = value.getCondConfig();
        this.sigma = value.getSigma();
        this.language = value.getLanguage();
        this.active = value.getActive();
        this.metadata = value.getMetadata();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public SPacket(
        String        key,
        String        pathId,
        String        resourceId,
        String        rowType,
        String        rowField,
        String        rowTpl,
        String        rowTplMapping,
        String        colType,
        String        colConfig,
        String        condTpl,
        String        condTplMapping,
        String        condConfig,
        String        sigma,
        String        language,
        Boolean       active,
        String        metadata,
        LocalDateTime createdAt,
        String        createdBy,
        LocalDateTime updatedAt,
        String        updatedBy
    ) {
        this.key = key;
        this.pathId = pathId;
        this.resourceId = resourceId;
        this.rowType = rowType;
        this.rowField = rowField;
        this.rowTpl = rowTpl;
        this.rowTplMapping = rowTplMapping;
        this.colType = colType;
        this.colConfig = colConfig;
        this.condTpl = condTpl;
        this.condTplMapping = condTplMapping;
        this.condConfig = condConfig;
        this.sigma = sigma;
        this.language = language;
        this.active = active;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public SPacket(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.KEY</code>. 「key」- 包信息
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.KEY</code>. 「key」- 包信息
     */
    @Override
    public SPacket setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.PATH_ID</code>. 「pathId」- 关联的 path
     * id，包含关系
     */
    @Override
    public String getPathId() {
        return this.pathId;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.PATH_ID</code>. 「pathId」- 关联的 path
     * id，包含关系
     */
    @Override
    public SPacket setPathId(String pathId) {
        this.pathId = pathId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.RESOURCE_ID</code>. 「resourceId」-
     * 关联的资源 id
     */
    @Override
    public String getResourceId() {
        return this.resourceId;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.RESOURCE_ID</code>. 「resourceId」-
     * 关联的资源 id
     */
    @Override
    public SPacket setResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.ROW_TYPE</code>. 「rowType」- 行过滤类型
     */
    @Override
    public String getRowType() {
        return this.rowType;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.ROW_TYPE</code>. 「rowType」- 行过滤类型
     */
    @Override
    public SPacket setRowType(String rowType) {
        this.rowType = rowType;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.ROW_FIELD</code>. 「rowField」- 行输入
     */
    @Override
    public String getRowField() {
        return this.rowField;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.ROW_FIELD</code>. 「rowField」- 行输入
     */
    @Override
    public SPacket setRowField(String rowField) {
        this.rowField = rowField;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.ROW_TPL</code>. 「rowTpl」- 多字段的模板
     */
    @Override
    public String getRowTpl() {
        return this.rowTpl;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.ROW_TPL</code>. 「rowTpl」- 多字段的模板
     */
    @Override
    public SPacket setRowTpl(String rowTpl) {
        this.rowTpl = rowTpl;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.ROW_TPL_MAPPING</code>.
     * 「rowTplMapping」- 多字段的映射关系
     */
    @Override
    public String getRowTplMapping() {
        return this.rowTplMapping;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.ROW_TPL_MAPPING</code>.
     * 「rowTplMapping」- 多字段的映射关系
     */
    @Override
    public SPacket setRowTplMapping(String rowTplMapping) {
        this.rowTplMapping = rowTplMapping;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.COL_TYPE</code>. 「colType」- 列过滤类型
     */
    @Override
    public String getColType() {
        return this.colType;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.COL_TYPE</code>. 「colType」- 列过滤类型
     */
    @Override
    public SPacket setColType(String colType) {
        this.colType = colType;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.COL_CONFIG</code>. 「colConfig」- 列配置
     */
    @Override
    public String getColConfig() {
        return this.colConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.COL_CONFIG</code>. 「colConfig」- 列配置
     */
    @Override
    public SPacket setColConfig(String colConfig) {
        this.colConfig = colConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.COND_TPL</code>. 「condTpl」- 条件模板
     */
    @Override
    public String getCondTpl() {
        return this.condTpl;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.COND_TPL</code>. 「condTpl」- 条件模板
     */
    @Override
    public SPacket setCondTpl(String condTpl) {
        this.condTpl = condTpl;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.COND_TPL_MAPPING</code>.
     * 「condTplMapping」- 查询条件映射关系
     */
    @Override
    public String getCondTplMapping() {
        return this.condTplMapping;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.COND_TPL_MAPPING</code>.
     * 「condTplMapping」- 查询条件映射关系
     */
    @Override
    public SPacket setCondTplMapping(String condTplMapping) {
        this.condTplMapping = condTplMapping;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.COND_CONFIG</code>. 「condConfig」-
     * 条件配置（界面配置相关）
     */
    @Override
    public String getCondConfig() {
        return this.condConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.COND_CONFIG</code>. 「condConfig」-
     * 条件配置（界面配置相关）
     */
    @Override
    public SPacket setCondConfig(String condConfig) {
        this.condConfig = condConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public SPacket setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public SPacket setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public SPacket setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public SPacket setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public SPacket setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public SPacket setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public SPacket setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.S_PACKET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.S_PACKET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public SPacket setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SPacket (");

        sb.append(key);
        sb.append(", ").append(pathId);
        sb.append(", ").append(resourceId);
        sb.append(", ").append(rowType);
        sb.append(", ").append(rowField);
        sb.append(", ").append(rowTpl);
        sb.append(", ").append(rowTplMapping);
        sb.append(", ").append(colType);
        sb.append(", ").append(colConfig);
        sb.append(", ").append(condTpl);
        sb.append(", ").append(condTplMapping);
        sb.append(", ").append(condConfig);
        sb.append(", ").append(sigma);
        sb.append(", ").append(language);
        sb.append(", ").append(active);
        sb.append(", ").append(metadata);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ISPacket from) {
        setKey(from.getKey());
        setPathId(from.getPathId());
        setResourceId(from.getResourceId());
        setRowType(from.getRowType());
        setRowField(from.getRowField());
        setRowTpl(from.getRowTpl());
        setRowTplMapping(from.getRowTplMapping());
        setColType(from.getColType());
        setColConfig(from.getColConfig());
        setCondTpl(from.getCondTpl());
        setCondTplMapping(from.getCondTplMapping());
        setCondConfig(from.getCondConfig());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends ISPacket> E into(E into) {
        into.from(this);
        return into;
    }
}
