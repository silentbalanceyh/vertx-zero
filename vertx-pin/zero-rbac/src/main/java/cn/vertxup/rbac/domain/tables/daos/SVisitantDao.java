/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables.daos;


import cn.vertxup.rbac.domain.tables.SVisitant;
import cn.vertxup.rbac.domain.tables.records.SVisitantRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SVisitantDao extends AbstractVertxDAO<SVisitantRecord, cn.vertxup.rbac.domain.tables.pojos.SVisitant, String, Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>>, Future<cn.vertxup.rbac.domain.tables.pojos.SVisitant>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<SVisitantRecord,cn.vertxup.rbac.domain.tables.pojos.SVisitant,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     *      * @param vertx the vertx instance
     */
        public SVisitantDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(SVisitant.S_VISITANT, cn.vertxup.rbac.domain.tables.pojos.SVisitant.class, new JDBCClassicQueryExecutor<SVisitantRecord,cn.vertxup.rbac.domain.tables.pojos.SVisitant,String>(configuration,cn.vertxup.rbac.domain.tables.pojos.SVisitant.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.rbac.domain.tables.pojos.SVisitant object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>VIEW_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByViewId(Collection<String> values) {
                return findManyByCondition(SVisitant.S_VISITANT.VIEW_ID.in(values));
        }

        /**
     * Find records that have <code>VIEW_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByViewId(Collection<String> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.VIEW_ID.in(values),limit);
        }

        /**
     * Find records that have <code>PHASE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByPhase(Collection<String> values) {
                return findManyByCondition(SVisitant.S_VISITANT.PHASE.in(values));
        }

        /**
     * Find records that have <code>PHASE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByPhase(Collection<String> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.PHASE.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByType(Collection<String> values) {
                return findManyByCondition(SVisitant.S_VISITANT.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByIdentifier(Collection<String> values) {
                return findManyByCondition(SVisitant.S_VISITANT.IDENTIFIER.in(values));
        }

        /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByIdentifier(Collection<String> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.IDENTIFIER.in(values),limit);
        }

        /**
     * Find records that have <code>CONFIG_KEY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByConfigKey(Collection<String> values) {
                return findManyByCondition(SVisitant.S_VISITANT.CONFIG_KEY.in(values));
        }

        /**
     * Find records that have <code>CONFIG_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByConfigKey(Collection<String> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.CONFIG_KEY.in(values),limit);
        }

        /**
     * Find records that have <code>ACL_VISIBLE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByAclVisible(Collection<String> values) {
                return findManyByCondition(SVisitant.S_VISITANT.ACL_VISIBLE.in(values));
        }

        /**
     * Find records that have <code>ACL_VISIBLE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByAclVisible(Collection<String> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.ACL_VISIBLE.in(values),limit);
        }

        /**
     * Find records that have <code>ACL_VIEW IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByAclView(Collection<String> values) {
                return findManyByCondition(SVisitant.S_VISITANT.ACL_VIEW.in(values));
        }

        /**
     * Find records that have <code>ACL_VIEW IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByAclView(Collection<String> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.ACL_VIEW.in(values),limit);
        }

        /**
     * Find records that have <code>ACL_VARIETY IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByAclVariety(Collection<String> values) {
                return findManyByCondition(SVisitant.S_VISITANT.ACL_VARIETY.in(values));
        }

        /**
     * Find records that have <code>ACL_VARIETY IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByAclVariety(Collection<String> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.ACL_VARIETY.in(values),limit);
        }

        /**
     * Find records that have <code>ACL_VOW IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByAclVow(Collection<String> values) {
                return findManyByCondition(SVisitant.S_VISITANT.ACL_VOW.in(values));
        }

        /**
     * Find records that have <code>ACL_VOW IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByAclVow(Collection<String> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.ACL_VOW.in(values),limit);
        }

        /**
     * Find records that have <code>ACL_VERGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByAclVerge(Collection<String> values) {
                return findManyByCondition(SVisitant.S_VISITANT.ACL_VERGE.in(values));
        }

        /**
     * Find records that have <code>ACL_VERGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByAclVerge(Collection<String> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.ACL_VERGE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(SVisitant.S_VISITANT.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(SVisitant.S_VISITANT.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(SVisitant.S_VISITANT.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(SVisitant.S_VISITANT.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(SVisitant.S_VISITANT.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(SVisitant.S_VISITANT.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(SVisitant.S_VISITANT.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(SVisitant.S_VISITANT.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.rbac.domain.tables.pojos.SVisitant>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(SVisitant.S_VISITANT.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<SVisitantRecord,cn.vertxup.rbac.domain.tables.pojos.SVisitant,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<SVisitantRecord,cn.vertxup.rbac.domain.tables.pojos.SVisitant,String>) super.queryExecutor();
        }
}
