/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.rbac.domain.tables;


import cn.vertxup.rbac.domain.Db;
import cn.vertxup.rbac.domain.Indexes;
import cn.vertxup.rbac.domain.Keys;
import cn.vertxup.rbac.domain.tables.records.RUserRoleRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class RUserRole extends TableImpl<RUserRoleRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.R_USER_ROLE</code>
     */
    public static final RUserRole R_USER_ROLE = new RUserRole();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.R_USER_ROLE.USER_ID</code>. 「userId」- 关联用户ID
     */
    public final TableField<RUserRoleRecord, String> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「userId」- 关联用户ID");
    /**
     * The column <code>DB_ETERNAL.R_USER_ROLE.ROLE_ID</code>. 「roleId」- 关联角色ID
     */
    public final TableField<RUserRoleRecord, String> ROLE_ID = createField(DSL.name("ROLE_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「roleId」- 关联角色ID");
    /**
     * The column <code>DB_ETERNAL.R_USER_ROLE.PRIORITY</code>. 「priority」-
     * 角色优先级
     */
    public final TableField<RUserRoleRecord, Integer> PRIORITY = createField(DSL.name("PRIORITY"), SQLDataType.INTEGER, this, "「priority」- 角色优先级");

    private RUserRole(Name alias, Table<RUserRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private RUserRole(Name alias, Table<RUserRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.R_USER_ROLE</code> table reference
     */
    public RUserRole(String alias) {
        this(DSL.name(alias), R_USER_ROLE);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.R_USER_ROLE</code> table reference
     */
    public RUserRole(Name alias) {
        this(alias, R_USER_ROLE);
    }

    /**
     * Create a <code>DB_ETERNAL.R_USER_ROLE</code> table reference
     */
    public RUserRole() {
        this(DSL.name("R_USER_ROLE"), null);
    }

    public <O extends Record> RUserRole(Table<O> child, ForeignKey<O, RUserRoleRecord> key) {
        super(child, key, R_USER_ROLE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RUserRoleRecord> getRecordType() {
        return RUserRoleRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.R_USER_ROLE_IDX_R_USER_ROLE_USER_ID);
    }

    @Override
    public UniqueKey<RUserRoleRecord> getPrimaryKey() {
        return Keys.KEY_R_USER_ROLE_PRIMARY;
    }

    @Override
    public RUserRole as(String alias) {
        return new RUserRole(DSL.name(alias), this);
    }

    @Override
    public RUserRole as(Name alias) {
        return new RUserRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RUserRole rename(String name) {
        return new RUserRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RUserRole rename(Name name) {
        return new RUserRole(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
