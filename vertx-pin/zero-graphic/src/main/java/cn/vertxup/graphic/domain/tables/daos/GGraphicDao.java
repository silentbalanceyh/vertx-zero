/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.graphic.domain.tables.daos;


import cn.vertxup.graphic.domain.tables.GGraphic;
import cn.vertxup.graphic.domain.tables.records.GGraphicRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GGraphicDao extends AbstractVertxDAO<GGraphicRecord, cn.vertxup.graphic.domain.tables.pojos.GGraphic, String, Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>>, Future<cn.vertxup.graphic.domain.tables.pojos.GGraphic>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<GGraphicRecord,cn.vertxup.graphic.domain.tables.pojos.GGraphic,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public GGraphicDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(GGraphic.G_GRAPHIC, cn.vertxup.graphic.domain.tables.pojos.GGraphic.class, new JDBCClassicQueryExecutor<GGraphicRecord,cn.vertxup.graphic.domain.tables.pojos.GGraphic,String>(configuration,cn.vertxup.graphic.domain.tables.pojos.GGraphic.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.graphic.domain.tables.pojos.GGraphic object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByName(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByCode(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>MODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByMode(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.MODE.in(values));
        }

        /**
     * Find records that have <code>MODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByMode(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.MODE.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByType(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENTS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByComments(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.COMMENTS.in(values));
        }

        /**
     * Find records that have <code>COMMENTS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByComments(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.COMMENTS.in(values),limit);
        }

        /**
     * Find records that have <code>OWNER_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByOwnerId(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.OWNER_ID.in(values));
        }

        /**
     * Find records that have <code>OWNER_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByOwnerId(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.OWNER_ID.in(values),limit);
        }

        /**
     * Find records that have <code>UI IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByUi(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.UI.in(values));
        }

        /**
     * Find records that have <code>UI IN (values)</code> asynchronously limited
     * by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByUi(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.UI.in(values),limit);
        }

        /**
     * Find records that have <code>GRAPHIC_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByGraphicId(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.GRAPHIC_ID.in(values));
        }

        /**
     * Find records that have <code>GRAPHIC_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByGraphicId(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.GRAPHIC_ID.in(values),limit);
        }

        /**
     * Find records that have <code>MASTER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByMaster(Collection<Boolean> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.MASTER.in(values));
        }

        /**
     * Find records that have <code>MASTER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByMaster(Collection<Boolean> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.MASTER.in(values),limit);
        }

        /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByModelId(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.MODEL_ID.in(values));
        }

        /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByModelId(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.MODEL_ID.in(values),limit);
        }

        /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByModelKey(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.MODEL_KEY.in(values));
        }

        /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByModelKey(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.MODEL_KEY.in(values),limit);
        }

        /**
     * Find records that have <code>MODEL_CATEGORY IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByModelCategory(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.MODEL_CATEGORY.in(values));
        }

        /**
     * Find records that have <code>MODEL_CATEGORY IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByModelCategory(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.MODEL_CATEGORY.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(GGraphic.G_GRAPHIC.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.graphic.domain.tables.pojos.GGraphic>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(GGraphic.G_GRAPHIC.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<GGraphicRecord,cn.vertxup.graphic.domain.tables.pojos.GGraphic,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<GGraphicRecord,cn.vertxup.graphic.domain.tables.pojos.GGraphic,String>) super.queryExecutor();
        }
}
