/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.graphic.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IGCluster extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.KEY</code>. 「key」- 组ID
     */
    public IGCluster setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.KEY</code>. 「key」- 组ID
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.NAME</code>. 「name」- 组呈现名称
     */
    public IGCluster setName(String value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.NAME</code>. 「name」- 组呈现名称
     */
    public String getName();

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.X</code>. 「x」- 当前组在图上的x坐标
     */
    public IGCluster setX(Integer value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.X</code>. 「x」- 当前组在图上的x坐标
     */
    public Integer getX();

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.Y</code>. 「y」- 当前组在图上的y坐标
     */
    public IGCluster setY(Integer value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.Y</code>. 「y」- 当前组在图上的y坐标
     */
    public Integer getY();

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.GRAPHIC_ID</code>. 「graphicId」-
     * 它所关联的图实例ID
     */
    public IGCluster setGraphicId(String value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.GRAPHIC_ID</code>. 「graphicId」-
     * 它所关联的图实例ID
     */
    public String getGraphicId();

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.UI</code>. 「ui」- ui配置专用
     */
    public IGCluster setUi(String value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.UI</code>. 「ui」- ui配置专用
     */
    public String getUi();

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.RECORD_KEY</code>. 「recordKey」-
     * 记录主键
     */
    public IGCluster setRecordKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.RECORD_KEY</code>. 「recordKey」-
     * 记录主键
     */
    public String getRecordKey();

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.RECORD_DATA</code>. 「recordData」-
     * 组中存储的数据信息
     */
    public IGCluster setRecordData(String value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.RECORD_DATA</code>. 「recordData」-
     * 组中存储的数据信息
     */
    public String getRecordData();

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.SIGMA</code>. 「sigma」- 统一标识
     */
    public IGCluster setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IGCluster setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.ACTIVE</code>. 「active」- 是否启用
     */
    public IGCluster setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.METADATA</code>. 「metadata」- 附加配置数据
     */
    public IGCluster setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.METADATA</code>. 「metadata」- 附加配置数据
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public IGCluster setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IGCluster setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public IGCluster setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.G_CLUSTER.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IGCluster setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.G_CLUSTER.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IGCluster
     */
    public void from(IGCluster from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IGCluster
     */
    public <E extends IGCluster> E into(E into);

        @Override
        public default IGCluster fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setName,json::getString,"NAME","java.lang.String");
                setOrThrow(this::setX,json::getInteger,"X","java.lang.Integer");
                setOrThrow(this::setY,json::getInteger,"Y","java.lang.Integer");
                setOrThrow(this::setGraphicId,json::getString,"GRAPHIC_ID","java.lang.String");
                setOrThrow(this::setUi,json::getString,"UI","java.lang.String");
                setOrThrow(this::setRecordKey,json::getString,"RECORD_KEY","java.lang.String");
                setOrThrow(this::setRecordData,json::getString,"RECORD_DATA","java.lang.String");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                setOrThrow(this::setUpdatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"UPDATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setUpdatedBy,json::getString,"UPDATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("NAME",getName());
                json.put("X",getX());
                json.put("Y",getY());
                json.put("GRAPHIC_ID",getGraphicId());
                json.put("UI",getUi());
                json.put("RECORD_KEY",getRecordKey());
                json.put("RECORD_DATA",getRecordData());
                json.put("SIGMA",getSigma());
                json.put("LANGUAGE",getLanguage());
                json.put("ACTIVE",getActive());
                json.put("METADATA",getMetadata());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                json.put("UPDATED_AT",getUpdatedAt()==null?null:getUpdatedAt().toString());
                json.put("UPDATED_BY",getUpdatedBy());
                return json;
        }

}
