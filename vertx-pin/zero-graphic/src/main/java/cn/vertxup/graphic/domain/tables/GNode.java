/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.graphic.domain.tables;


import cn.vertxup.graphic.domain.Db;
import cn.vertxup.graphic.domain.Keys;
import cn.vertxup.graphic.domain.tables.records.GNodeRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class GNode extends TableImpl<GNodeRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.G_NODE</code>
     */
    public static final GNode G_NODE = new GNode();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.G_NODE.KEY</code>. 「key」- 节点ID
     */
    public final TableField<GNodeRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 节点ID");
    /**
     * The column <code>DB_ETERNAL.G_NODE.NAME</code>. 「name」- 节点呈现名称
     */
    public final TableField<GNodeRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 节点呈现名称");
    /**
     * The column <code>DB_ETERNAL.G_NODE.X</code>. 「x」- 当前节点在图上的x坐标
     */
    public final TableField<GNodeRecord, BigDecimal> X = createField(DSL.name("X"), SQLDataType.DECIMAL(18, 6), this, "「x」- 当前节点在图上的x坐标");
    /**
     * The column <code>DB_ETERNAL.G_NODE.Y</code>. 「y」- 当前节点在图上的y坐标
     */
    public final TableField<GNodeRecord, BigDecimal> Y = createField(DSL.name("Y"), SQLDataType.DECIMAL(18, 6), this, "「y」- 当前节点在图上的y坐标");
    /**
     * The column <code>DB_ETERNAL.G_NODE.UI</code>. 「ui」- ui配置专用
     */
    public final TableField<GNodeRecord, String> UI = createField(DSL.name("UI"), SQLDataType.CLOB, this, "「ui」- ui配置专用");
    /**
     * The column <code>DB_ETERNAL.G_NODE.GRAPHIC_ID</code>. 「graphicId」-
     * 它所关联的图实例ID
     */
    public final TableField<GNodeRecord, String> GRAPHIC_ID = createField(DSL.name("GRAPHIC_ID"), SQLDataType.VARCHAR(36), this, "「graphicId」- 它所关联的图实例ID");
    /**
     * The column <code>DB_ETERNAL.G_NODE.RECORD_DATA</code>. 「recordData」-
     * 该节点存储的数据信息
     */
    public final TableField<GNodeRecord, String> RECORD_DATA = createField(DSL.name("RECORD_DATA"), SQLDataType.CLOB, this, "「recordData」- 该节点存储的数据信息");
    /**
     * The column <code>DB_ETERNAL.G_NODE.RECORD_KEY</code>. 「recordKey」- 记录主键
     */
    public final TableField<GNodeRecord, String> RECORD_KEY = createField(DSL.name("RECORD_KEY"), SQLDataType.VARCHAR(36), this, "「recordKey」- 记录主键");
    /**
     * The column <code>DB_ETERNAL.G_NODE.RECORD_COMPONENT</code>.
     * 「recordComponent」- 记录处理组件
     */
    public final TableField<GNodeRecord, String> RECORD_COMPONENT = createField(DSL.name("RECORD_COMPONENT"), SQLDataType.VARCHAR(255), this, "「recordComponent」- 记录处理组件");
    /**
     * The column <code>DB_ETERNAL.G_NODE.RECORD_CLASS</code>. 「recordClass」-
     * 记录绑定Pojo类型
     */
    public final TableField<GNodeRecord, String> RECORD_CLASS = createField(DSL.name("RECORD_CLASS"), SQLDataType.VARCHAR(255), this, "「recordClass」- 记录绑定Pojo类型");
    /**
     * The column <code>DB_ETERNAL.G_NODE.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<GNodeRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.G_NODE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<GNodeRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.G_NODE.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<GNodeRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.G_NODE.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<GNodeRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>DB_ETERNAL.G_NODE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<GNodeRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.G_NODE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<GNodeRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.G_NODE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<GNodeRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.G_NODE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<GNodeRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private GNode(Name alias, Table<GNodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private GNode(Name alias, Table<GNodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.G_NODE</code> table reference
     */
    public GNode(String alias) {
        this(DSL.name(alias), G_NODE);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.G_NODE</code> table reference
     */
    public GNode(Name alias) {
        this(alias, G_NODE);
    }

    /**
     * Create a <code>DB_ETERNAL.G_NODE</code> table reference
     */
    public GNode() {
        this(DSL.name("G_NODE"), null);
    }

    public <O extends Record> GNode(Table<O> child, ForeignKey<O, GNodeRecord> key) {
        super(child, key, G_NODE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GNodeRecord> getRecordType() {
        return GNodeRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<GNodeRecord> getPrimaryKey() {
        return Keys.KEY_G_NODE_PRIMARY;
    }

    @Override
    public List<UniqueKey<GNodeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_G_NODE_NAME);
    }

    @Override
    public GNode as(String alias) {
        return new GNode(DSL.name(alias), this);
    }

    @Override
    public GNode as(Name alias) {
        return new GNode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GNode rename(String name) {
        return new GNode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GNode rename(Name name) {
        return new GNode(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<String, String, BigDecimal, BigDecimal, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
