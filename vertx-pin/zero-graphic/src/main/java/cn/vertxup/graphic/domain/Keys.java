/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.graphic.domain;


import cn.vertxup.graphic.domain.tables.GCluster;
import cn.vertxup.graphic.domain.tables.GEdge;
import cn.vertxup.graphic.domain.tables.GGraphic;
import cn.vertxup.graphic.domain.tables.GNode;
import cn.vertxup.graphic.domain.tables.records.GClusterRecord;
import cn.vertxup.graphic.domain.tables.records.GEdgeRecord;
import cn.vertxup.graphic.domain.tables.records.GGraphicRecord;
import cn.vertxup.graphic.domain.tables.records.GNodeRecord;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * DB_ETERNAL.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<GClusterRecord> KEY_G_CLUSTER_NAME = Internal.createUniqueKey(GCluster.G_CLUSTER, DSL.name("KEY_G_CLUSTER_NAME"), new TableField[] { GCluster.G_CLUSTER.NAME, GCluster.G_CLUSTER.GRAPHIC_ID }, true);
    public static final UniqueKey<GClusterRecord> KEY_G_CLUSTER_PRIMARY = Internal.createUniqueKey(GCluster.G_CLUSTER, DSL.name("KEY_G_CLUSTER_PRIMARY"), new TableField[] { GCluster.G_CLUSTER.KEY }, true);
    public static final UniqueKey<GEdgeRecord> KEY_G_EDGE_NAME = Internal.createUniqueKey(GEdge.G_EDGE, DSL.name("KEY_G_EDGE_NAME"), new TableField[] { GEdge.G_EDGE.NAME, GEdge.G_EDGE.GRAPHIC_ID }, true);
    public static final UniqueKey<GEdgeRecord> KEY_G_EDGE_PRIMARY = Internal.createUniqueKey(GEdge.G_EDGE, DSL.name("KEY_G_EDGE_PRIMARY"), new TableField[] { GEdge.G_EDGE.KEY }, true);
    public static final UniqueKey<GGraphicRecord> KEY_G_GRAPHIC_CODE = Internal.createUniqueKey(GGraphic.G_GRAPHIC, DSL.name("KEY_G_GRAPHIC_CODE"), new TableField[] { GGraphic.G_GRAPHIC.CODE, GGraphic.G_GRAPHIC.SIGMA }, true);
    public static final UniqueKey<GGraphicRecord> KEY_G_GRAPHIC_PRIMARY = Internal.createUniqueKey(GGraphic.G_GRAPHIC, DSL.name("KEY_G_GRAPHIC_PRIMARY"), new TableField[] { GGraphic.G_GRAPHIC.KEY }, true);
    public static final UniqueKey<GNodeRecord> KEY_G_NODE_NAME = Internal.createUniqueKey(GNode.G_NODE, DSL.name("KEY_G_NODE_NAME"), new TableField[] { GNode.G_NODE.NAME, GNode.G_NODE.GRAPHIC_ID }, true);
    public static final UniqueKey<GNodeRecord> KEY_G_NODE_PRIMARY = Internal.createUniqueKey(GNode.G_NODE, DSL.name("KEY_G_NODE_PRIMARY"), new TableField[] { GNode.G_NODE.KEY }, true);
}
