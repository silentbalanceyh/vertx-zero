/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.graphic.domain.tables;


import cn.vertxup.graphic.domain.Db;
import cn.vertxup.graphic.domain.Keys;
import cn.vertxup.graphic.domain.tables.records.GClusterRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class GCluster extends TableImpl<GClusterRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.G_CLUSTER</code>
     */
    public static final GCluster G_CLUSTER = new GCluster();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.KEY</code>. 「key」- 组ID
     */
    public final TableField<GClusterRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 组ID");
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.NAME</code>. 「name」- 组呈现名称
     */
    public final TableField<GClusterRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 组呈现名称");
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.X</code>. 「x」- 当前组在图上的x坐标
     */
    public final TableField<GClusterRecord, Integer> X = createField(DSL.name("X"), SQLDataType.INTEGER, this, "「x」- 当前组在图上的x坐标");
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.Y</code>. 「y」- 当前组在图上的y坐标
     */
    public final TableField<GClusterRecord, Integer> Y = createField(DSL.name("Y"), SQLDataType.INTEGER, this, "「y」- 当前组在图上的y坐标");
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.GRAPHIC_ID</code>. 「graphicId」-
     * 它所关联的图实例ID
     */
    public final TableField<GClusterRecord, String> GRAPHIC_ID = createField(DSL.name("GRAPHIC_ID"), SQLDataType.VARCHAR(36), this, "「graphicId」- 它所关联的图实例ID");
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.UI</code>. 「ui」- ui配置专用
     */
    public final TableField<GClusterRecord, String> UI = createField(DSL.name("UI"), SQLDataType.CLOB, this, "「ui」- ui配置专用");
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.RECORD_KEY</code>. 「recordKey」-
     * 记录主键
     */
    public final TableField<GClusterRecord, String> RECORD_KEY = createField(DSL.name("RECORD_KEY"), SQLDataType.VARCHAR(36), this, "「recordKey」- 记录主键");
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.RECORD_DATA</code>. 「recordData」-
     * 组中存储的数据信息
     */
    public final TableField<GClusterRecord, String> RECORD_DATA = createField(DSL.name("RECORD_DATA"), SQLDataType.CLOB, this, "「recordData」- 组中存储的数据信息");
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<GClusterRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<GClusterRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<GClusterRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<GClusterRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<GClusterRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<GClusterRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<GClusterRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.G_CLUSTER.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<GClusterRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private GCluster(Name alias, Table<GClusterRecord> aliased) {
        this(alias, aliased, null);
    }

    private GCluster(Name alias, Table<GClusterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.G_CLUSTER</code> table reference
     */
    public GCluster(String alias) {
        this(DSL.name(alias), G_CLUSTER);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.G_CLUSTER</code> table reference
     */
    public GCluster(Name alias) {
        this(alias, G_CLUSTER);
    }

    /**
     * Create a <code>DB_ETERNAL.G_CLUSTER</code> table reference
     */
    public GCluster() {
        this(DSL.name("G_CLUSTER"), null);
    }

    public <O extends Record> GCluster(Table<O> child, ForeignKey<O, GClusterRecord> key) {
        super(child, key, G_CLUSTER);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GClusterRecord> getRecordType() {
        return GClusterRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<GClusterRecord> getPrimaryKey() {
        return Keys.KEY_G_CLUSTER_PRIMARY;
    }

    @Override
    public List<UniqueKey<GClusterRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_G_CLUSTER_NAME);
    }

    @Override
    public GCluster as(String alias) {
        return new GCluster(DSL.name(alias), this);
    }

    @Override
    public GCluster as(Name alias) {
        return new GCluster(alias, this);
    }

    @Override
    public GCluster as(Table<?> alias) {
        return new GCluster(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GCluster rename(String name) {
        return new GCluster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GCluster rename(Name name) {
        return new GCluster(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GCluster rename(Table<?> name) {
        return new GCluster(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, String, Integer, Integer, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super String, ? super String, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super String, ? super String, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
