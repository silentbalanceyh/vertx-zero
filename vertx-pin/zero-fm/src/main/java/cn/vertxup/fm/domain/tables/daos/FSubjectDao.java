/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.fm.domain.tables.daos;


import cn.vertxup.fm.domain.tables.FSubject;
import cn.vertxup.fm.domain.tables.records.FSubjectRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FSubjectDao extends AbstractVertxDAO<FSubjectRecord, cn.vertxup.fm.domain.tables.pojos.FSubject, String, Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>>, Future<cn.vertxup.fm.domain.tables.pojos.FSubject>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<FSubjectRecord,cn.vertxup.fm.domain.tables.pojos.FSubject,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public FSubjectDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(FSubject.F_SUBJECT, cn.vertxup.fm.domain.tables.pojos.FSubject.class, new JDBCClassicQueryExecutor<FSubjectRecord,cn.vertxup.fm.domain.tables.pojos.FSubject,String>(configuration,cn.vertxup.fm.domain.tables.pojos.FSubject.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.fm.domain.tables.pojos.FSubject object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByName(Collection<String> values) {
                return findManyByCondition(FSubject.F_SUBJECT.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByCode(Collection<String> values) {
                return findManyByCondition(FSubject.F_SUBJECT.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyBySerial(Collection<String> values) {
                return findManyByCondition(FSubject.F_SUBJECT.SERIAL.in(values));
        }

        /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyBySerial(Collection<String> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.SERIAL.in(values),limit);
        }

        /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByCategory(Collection<String> values) {
                return findManyByCondition(FSubject.F_SUBJECT.CATEGORY.in(values));
        }

        /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByCategory(Collection<String> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.CATEGORY.in(values),limit);
        }

        /**
     * Find records that have <code>HELP_CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByHelpCode(Collection<String> values) {
                return findManyByCondition(FSubject.F_SUBJECT.HELP_CODE.in(values));
        }

        /**
     * Find records that have <code>HELP_CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByHelpCode(Collection<String> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.HELP_CODE.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByComment(Collection<String> values) {
                return findManyByCondition(FSubject.F_SUBJECT.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.COMMENT.in(values),limit);
        }

        /**
     * Find records that have <code>OWNER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByOwner(Collection<String> values) {
                return findManyByCondition(FSubject.F_SUBJECT.OWNER.in(values));
        }

        /**
     * Find records that have <code>OWNER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByOwner(Collection<String> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.OWNER.in(values),limit);
        }

        /**
     * Find records that have <code>COMPANY_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByCompanyId(Collection<String> values) {
                return findManyByCondition(FSubject.F_SUBJECT.COMPANY_ID.in(values));
        }

        /**
     * Find records that have <code>COMPANY_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByCompanyId(Collection<String> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.COMPANY_ID.in(values),limit);
        }

        /**
     * Find records that have <code>PARENT_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByParentId(Collection<String> values) {
                return findManyByCondition(FSubject.F_SUBJECT.PARENT_ID.in(values));
        }

        /**
     * Find records that have <code>PARENT_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByParentId(Collection<String> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.PARENT_ID.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(FSubject.F_SUBJECT.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(FSubject.F_SUBJECT.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(FSubject.F_SUBJECT.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(FSubject.F_SUBJECT.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FSubject.F_SUBJECT.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(FSubject.F_SUBJECT.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FSubject.F_SUBJECT.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(FSubject.F_SUBJECT.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FSubject>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FSubject.F_SUBJECT.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<FSubjectRecord,cn.vertxup.fm.domain.tables.pojos.FSubject,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<FSubjectRecord,cn.vertxup.fm.domain.tables.pojos.FSubject,String>) super.queryExecutor();
        }
}
