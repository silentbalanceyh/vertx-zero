/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.fm.domain.tables.pojos;


import cn.vertxup.fm.domain.tables.interfaces.IFPayTerm;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FPayTerm implements VertxPojo, IFPayTerm {

    private static final long serialVersionUID = 1L;

    private String key;
    private String name;
    private String code;
    private String type;
    private String category;
    private String helpCode;
    private Boolean leaf;
    private String comment;
    private String parentId;
    private String subjectId;
    private Boolean locked;
    private String sigma;
    private String language;
    private Boolean active;
    private String metadata;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public FPayTerm() {}

    public FPayTerm(IFPayTerm value) {
        this.key = value.getKey();
        this.name = value.getName();
        this.code = value.getCode();
        this.type = value.getType();
        this.category = value.getCategory();
        this.helpCode = value.getHelpCode();
        this.leaf = value.getLeaf();
        this.comment = value.getComment();
        this.parentId = value.getParentId();
        this.subjectId = value.getSubjectId();
        this.locked = value.getLocked();
        this.sigma = value.getSigma();
        this.language = value.getLanguage();
        this.active = value.getActive();
        this.metadata = value.getMetadata();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public FPayTerm(
        String key,
        String name,
        String code,
        String type,
        String category,
        String helpCode,
        Boolean leaf,
        String comment,
        String parentId,
        String subjectId,
        Boolean locked,
        String sigma,
        String language,
        Boolean active,
        String metadata,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.name = name;
        this.code = code;
        this.type = type;
        this.category = category;
        this.helpCode = helpCode;
        this.leaf = leaf;
        this.comment = comment;
        this.parentId = parentId;
        this.subjectId = subjectId;
        this.locked = locked;
        this.sigma = sigma;
        this.language = language;
        this.active = active;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public FPayTerm(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.KEY</code>. 「key」- 账单项
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.KEY</code>. 「key」- 账单项
     */
    @Override
    public FPayTerm setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.NAME</code>. 「name」- 账单项名称
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.NAME</code>. 「name」- 账单项名称
     */
    @Override
    public FPayTerm setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.CODE</code>. 「code」- 账单项编号
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.CODE</code>. 「code」- 账单项编号
     */
    @Override
    public FPayTerm setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.TYPE</code>. 「type」- 账单项类型：付款类/消费类
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.TYPE</code>. 「type」- 账单项类型：付款类/消费类
     */
    @Override
    public FPayTerm setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.CATEGORY</code>. 「category」- 账单项类别
     */
    @Override
    public String getCategory() {
        return this.category;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.CATEGORY</code>. 「category」- 账单项类别
     */
    @Override
    public FPayTerm setCategory(String category) {
        this.category = category;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.HELP_CODE</code>. 「helpCode」- 助记码
     */
    @Override
    public String getHelpCode() {
        return this.helpCode;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.HELP_CODE</code>. 「helpCode」- 助记码
     */
    @Override
    public FPayTerm setHelpCode(String helpCode) {
        this.helpCode = helpCode;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.LEAF</code>. 「leaf」- 是否明细
     */
    @Override
    public Boolean getLeaf() {
        return this.leaf;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.LEAF</code>. 「leaf」- 是否明细
     */
    @Override
    public FPayTerm setLeaf(Boolean leaf) {
        this.leaf = leaf;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.COMMENT</code>. 「comment」 - 账单项备注
     */
    @Override
    public String getComment() {
        return this.comment;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.COMMENT</code>. 「comment」 - 账单项备注
     */
    @Override
    public FPayTerm setComment(String comment) {
        this.comment = comment;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.PARENT_ID</code>. 「parentId」- 父账单项
     */
    @Override
    public String getParentId() {
        return this.parentId;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.PARENT_ID</code>. 「parentId」- 父账单项
     */
    @Override
    public FPayTerm setParentId(String parentId) {
        this.parentId = parentId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.SUBJECT_ID</code>. 「subjectId」-
     * 会计科目关联ID
     */
    @Override
    public String getSubjectId() {
        return this.subjectId;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.SUBJECT_ID</code>. 「subjectId」-
     * 会计科目关联ID
     */
    @Override
    public FPayTerm setSubjectId(String subjectId) {
        this.subjectId = subjectId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.LOCKED</code>. 「locked」- 是否锁定
     */
    @Override
    public Boolean getLocked() {
        return this.locked;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.LOCKED</code>. 「locked」- 是否锁定
     */
    @Override
    public FPayTerm setLocked(Boolean locked) {
        this.locked = locked;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public FPayTerm setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public FPayTerm setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public FPayTerm setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    @Override
    public FPayTerm setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public FPayTerm setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public FPayTerm setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public FPayTerm setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_PAY_TERM.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.F_PAY_TERM.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public FPayTerm setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final FPayTerm other = (FPayTerm) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        }
        else if (!this.key.equals(other.key))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.code == null) {
            if (other.code != null)
                return false;
        }
        else if (!this.code.equals(other.code))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        if (this.category == null) {
            if (other.category != null)
                return false;
        }
        else if (!this.category.equals(other.category))
            return false;
        if (this.helpCode == null) {
            if (other.helpCode != null)
                return false;
        }
        else if (!this.helpCode.equals(other.helpCode))
            return false;
        if (this.leaf == null) {
            if (other.leaf != null)
                return false;
        }
        else if (!this.leaf.equals(other.leaf))
            return false;
        if (this.comment == null) {
            if (other.comment != null)
                return false;
        }
        else if (!this.comment.equals(other.comment))
            return false;
        if (this.parentId == null) {
            if (other.parentId != null)
                return false;
        }
        else if (!this.parentId.equals(other.parentId))
            return false;
        if (this.subjectId == null) {
            if (other.subjectId != null)
                return false;
        }
        else if (!this.subjectId.equals(other.subjectId))
            return false;
        if (this.locked == null) {
            if (other.locked != null)
                return false;
        }
        else if (!this.locked.equals(other.locked))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        }
        else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        }
        else if (!this.language.equals(other.language))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        }
        else if (!this.active.equals(other.active))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        }
        else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.category == null) ? 0 : this.category.hashCode());
        result = prime * result + ((this.helpCode == null) ? 0 : this.helpCode.hashCode());
        result = prime * result + ((this.leaf == null) ? 0 : this.leaf.hashCode());
        result = prime * result + ((this.comment == null) ? 0 : this.comment.hashCode());
        result = prime * result + ((this.parentId == null) ? 0 : this.parentId.hashCode());
        result = prime * result + ((this.subjectId == null) ? 0 : this.subjectId.hashCode());
        result = prime * result + ((this.locked == null) ? 0 : this.locked.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("FPayTerm (");

        sb.append(key);
        sb.append(", ").append(name);
        sb.append(", ").append(code);
        sb.append(", ").append(type);
        sb.append(", ").append(category);
        sb.append(", ").append(helpCode);
        sb.append(", ").append(leaf);
        sb.append(", ").append(comment);
        sb.append(", ").append(parentId);
        sb.append(", ").append(subjectId);
        sb.append(", ").append(locked);
        sb.append(", ").append(sigma);
        sb.append(", ").append(language);
        sb.append(", ").append(active);
        sb.append(", ").append(metadata);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IFPayTerm from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setType(from.getType());
        setCategory(from.getCategory());
        setHelpCode(from.getHelpCode());
        setLeaf(from.getLeaf());
        setComment(from.getComment());
        setParentId(from.getParentId());
        setSubjectId(from.getSubjectId());
        setLocked(from.getLocked());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IFPayTerm> E into(E into) {
        into.from(this);
        return into;
    }
}
