/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.fm.domain.tables.daos;


import cn.vertxup.fm.domain.tables.FCurrency;
import cn.vertxup.fm.domain.tables.records.FCurrencyRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FCurrencyDao extends AbstractVertxDAO<FCurrencyRecord, cn.vertxup.fm.domain.tables.pojos.FCurrency, String, Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>>, Future<cn.vertxup.fm.domain.tables.pojos.FCurrency>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<FCurrencyRecord,cn.vertxup.fm.domain.tables.pojos.FCurrency,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public FCurrencyDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(FCurrency.F_CURRENCY, cn.vertxup.fm.domain.tables.pojos.FCurrency.class, new JDBCClassicQueryExecutor<FCurrencyRecord,cn.vertxup.fm.domain.tables.pojos.FCurrency,String>(configuration,cn.vertxup.fm.domain.tables.pojos.FCurrency.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.fm.domain.tables.pojos.FCurrency object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByName(Collection<String> values) {
                return findManyByCondition(FCurrency.F_CURRENCY.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(FCurrency.F_CURRENCY.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByCode(Collection<String> values) {
                return findManyByCondition(FCurrency.F_CURRENCY.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(FCurrency.F_CURRENCY.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByComment(Collection<String> values) {
                return findManyByCondition(FCurrency.F_CURRENCY.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(FCurrency.F_CURRENCY.COMMENT.in(values),limit);
        }

        /**
     * Find records that have <code>DIGIT_AMOUNT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByDigitAmount(Collection<Integer> values) {
                return findManyByCondition(FCurrency.F_CURRENCY.DIGIT_AMOUNT.in(values));
        }

        /**
     * Find records that have <code>DIGIT_AMOUNT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByDigitAmount(Collection<Integer> values, int limit) {
                return findManyByCondition(FCurrency.F_CURRENCY.DIGIT_AMOUNT.in(values),limit);
        }

        /**
     * Find records that have <code>DIGIT_PRICE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByDigitPrice(Collection<Integer> values) {
                return findManyByCondition(FCurrency.F_CURRENCY.DIGIT_PRICE.in(values));
        }

        /**
     * Find records that have <code>DIGIT_PRICE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByDigitPrice(Collection<Integer> values, int limit) {
                return findManyByCondition(FCurrency.F_CURRENCY.DIGIT_PRICE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(FCurrency.F_CURRENCY.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(FCurrency.F_CURRENCY.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(FCurrency.F_CURRENCY.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(FCurrency.F_CURRENCY.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(FCurrency.F_CURRENCY.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(FCurrency.F_CURRENCY.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(FCurrency.F_CURRENCY.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(FCurrency.F_CURRENCY.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FCurrency.F_CURRENCY.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FCurrency.F_CURRENCY.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(FCurrency.F_CURRENCY.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FCurrency.F_CURRENCY.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FCurrency.F_CURRENCY.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FCurrency.F_CURRENCY.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(FCurrency.F_CURRENCY.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FCurrency>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FCurrency.F_CURRENCY.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<FCurrencyRecord,cn.vertxup.fm.domain.tables.pojos.FCurrency,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<FCurrencyRecord,cn.vertxup.fm.domain.tables.pojos.FCurrency,String>) super.queryExecutor();
        }
}
