/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.fm.domain.tables.daos;


import cn.vertxup.fm.domain.tables.FInvoice;
import cn.vertxup.fm.domain.tables.records.FInvoiceRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FInvoiceDao extends AbstractVertxDAO<FInvoiceRecord, cn.vertxup.fm.domain.tables.pojos.FInvoice, String, Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>>, Future<cn.vertxup.fm.domain.tables.pojos.FInvoice>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<FInvoiceRecord,cn.vertxup.fm.domain.tables.pojos.FInvoice,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public FInvoiceDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(FInvoice.F_INVOICE, cn.vertxup.fm.domain.tables.pojos.FInvoice.class, new JDBCClassicQueryExecutor<FInvoiceRecord,cn.vertxup.fm.domain.tables.pojos.FInvoice,String>(configuration,cn.vertxup.fm.domain.tables.pojos.FInvoice.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.fm.domain.tables.pojos.FInvoice object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByName(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByCode(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByType(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>AMOUNT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByAmount(Collection<BigDecimal> values) {
                return findManyByCondition(FInvoice.F_INVOICE.AMOUNT.in(values));
        }

        /**
     * Find records that have <code>AMOUNT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByAmount(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.AMOUNT.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByComment(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.COMMENT.in(values),limit);
        }

        /**
     * Find records that have <code>INVOICE_TITLE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByInvoiceTitle(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.INVOICE_TITLE.in(values));
        }

        /**
     * Find records that have <code>INVOICE_TITLE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByInvoiceTitle(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.INVOICE_TITLE.in(values),limit);
        }

        /**
     * Find records that have <code>INVOICE_NUMBER IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByInvoiceNumber(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.INVOICE_NUMBER.in(values));
        }

        /**
     * Find records that have <code>INVOICE_NUMBER IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByInvoiceNumber(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.INVOICE_NUMBER.in(values),limit);
        }

        /**
     * Find records that have <code>INVOICE_SERIAL IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByInvoiceSerial(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.INVOICE_SERIAL.in(values));
        }

        /**
     * Find records that have <code>INVOICE_SERIAL IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByInvoiceSerial(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.INVOICE_SERIAL.in(values),limit);
        }

        /**
     * Find records that have <code>TIN IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByTin(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.TIN.in(values));
        }

        /**
     * Find records that have <code>TIN IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByTin(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.TIN.in(values),limit);
        }

        /**
     * Find records that have <code>TIN_NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByTinName(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.TIN_NAME.in(values));
        }

        /**
     * Find records that have <code>TIN_NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByTinName(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.TIN_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>PERSONAL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByPersonal(Collection<Boolean> values) {
                return findManyByCondition(FInvoice.F_INVOICE.PERSONAL.in(values));
        }

        /**
     * Find records that have <code>PERSONAL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByPersonal(Collection<Boolean> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.PERSONAL.in(values),limit);
        }

        /**
     * Find records that have <code>DESC_BANK IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByDescBank(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.DESC_BANK.in(values));
        }

        /**
     * Find records that have <code>DESC_BANK IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByDescBank(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.DESC_BANK.in(values),limit);
        }

        /**
     * Find records that have <code>DESC_COMPANY IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByDescCompany(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.DESC_COMPANY.in(values));
        }

        /**
     * Find records that have <code>DESC_COMPANY IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByDescCompany(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.DESC_COMPANY.in(values),limit);
        }

        /**
     * Find records that have <code>DESC_LOCATION IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByDescLocation(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.DESC_LOCATION.in(values));
        }

        /**
     * Find records that have <code>DESC_LOCATION IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByDescLocation(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.DESC_LOCATION.in(values),limit);
        }

        /**
     * Find records that have <code>DESC_USER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByDescUser(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.DESC_USER.in(values));
        }

        /**
     * Find records that have <code>DESC_USER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByDescUser(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.DESC_USER.in(values),limit);
        }

        /**
     * Find records that have <code>NAME_RECEIPT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByNameReceipt(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.NAME_RECEIPT.in(values));
        }

        /**
     * Find records that have <code>NAME_RECEIPT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByNameReceipt(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.NAME_RECEIPT.in(values),limit);
        }

        /**
     * Find records that have <code>NAME_RECHECK IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByNameRecheck(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.NAME_RECHECK.in(values));
        }

        /**
     * Find records that have <code>NAME_RECHECK IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByNameRecheck(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.NAME_RECHECK.in(values),limit);
        }

        /**
     * Find records that have <code>NAME_BILLING IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByNameBilling(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.NAME_BILLING.in(values));
        }

        /**
     * Find records that have <code>NAME_BILLING IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByNameBilling(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.NAME_BILLING.in(values),limit);
        }

        /**
     * Find records that have <code>NAME_SELLING IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByNameSelling(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.NAME_SELLING.in(values));
        }

        /**
     * Find records that have <code>NAME_SELLING IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByNameSelling(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.NAME_SELLING.in(values),limit);
        }

        /**
     * Find records that have <code>ORDER_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByOrderId(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.ORDER_ID.in(values));
        }

        /**
     * Find records that have <code>ORDER_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByOrderId(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.ORDER_ID.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(FInvoice.F_INVOICE.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FInvoice.F_INVOICE.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FInvoice.F_INVOICE.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(FInvoice.F_INVOICE.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FInvoice>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FInvoice.F_INVOICE.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<FInvoiceRecord,cn.vertxup.fm.domain.tables.pojos.FInvoice,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<FInvoiceRecord,cn.vertxup.fm.domain.tables.pojos.FInvoice,String>) super.queryExecutor();
        }
}
