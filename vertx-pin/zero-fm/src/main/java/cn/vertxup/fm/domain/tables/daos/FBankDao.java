/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.fm.domain.tables.daos;


import cn.vertxup.fm.domain.tables.FBank;
import cn.vertxup.fm.domain.tables.records.FBankRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FBankDao extends AbstractVertxDAO<FBankRecord, cn.vertxup.fm.domain.tables.pojos.FBank, String, Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>>, Future<cn.vertxup.fm.domain.tables.pojos.FBank>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<FBankRecord,cn.vertxup.fm.domain.tables.pojos.FBank,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public FBankDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(FBank.F_BANK, cn.vertxup.fm.domain.tables.pojos.FBank.class, new JDBCClassicQueryExecutor<FBankRecord,cn.vertxup.fm.domain.tables.pojos.FBank,String>(configuration,cn.vertxup.fm.domain.tables.pojos.FBank.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.fm.domain.tables.pojos.FBank object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByName(Collection<String> values) {
                return findManyByCondition(FBank.F_BANK.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(FBank.F_BANK.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByCode(Collection<String> values) {
                return findManyByCondition(FBank.F_BANK.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(FBank.F_BANK.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>ALIAS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByAlias(Collection<String> values) {
                return findManyByCondition(FBank.F_BANK.ALIAS.in(values));
        }

        /**
     * Find records that have <code>ALIAS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByAlias(Collection<String> values, int limit) {
                return findManyByCondition(FBank.F_BANK.ALIAS.in(values),limit);
        }

        /**
     * Find records that have <code>LOGO IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByLogo(Collection<String> values) {
                return findManyByCondition(FBank.F_BANK.LOGO.in(values));
        }

        /**
     * Find records that have <code>LOGO IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByLogo(Collection<String> values, int limit) {
                return findManyByCondition(FBank.F_BANK.LOGO.in(values),limit);
        }

        /**
     * Find records that have <code>WEBSITE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByWebsite(Collection<String> values) {
                return findManyByCondition(FBank.F_BANK.WEBSITE.in(values));
        }

        /**
     * Find records that have <code>WEBSITE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByWebsite(Collection<String> values, int limit) {
                return findManyByCondition(FBank.F_BANK.WEBSITE.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByComment(Collection<String> values) {
                return findManyByCondition(FBank.F_BANK.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(FBank.F_BANK.COMMENT.in(values),limit);
        }

        /**
     * Find records that have <code>BRANCH_NAME IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByBranchName(Collection<String> values) {
                return findManyByCondition(FBank.F_BANK.BRANCH_NAME.in(values));
        }

        /**
     * Find records that have <code>BRANCH_NAME IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByBranchName(Collection<String> values, int limit) {
                return findManyByCondition(FBank.F_BANK.BRANCH_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>BRANCH_CODE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByBranchCode(Collection<String> values) {
                return findManyByCondition(FBank.F_BANK.BRANCH_CODE.in(values));
        }

        /**
     * Find records that have <code>BRANCH_CODE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByBranchCode(Collection<String> values, int limit) {
                return findManyByCondition(FBank.F_BANK.BRANCH_CODE.in(values),limit);
        }

        /**
     * Find records that have <code>BRANCH IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByBranch(Collection<Boolean> values) {
                return findManyByCondition(FBank.F_BANK.BRANCH.in(values));
        }

        /**
     * Find records that have <code>BRANCH IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByBranch(Collection<Boolean> values, int limit) {
                return findManyByCondition(FBank.F_BANK.BRANCH.in(values),limit);
        }

        /**
     * Find records that have <code>BANK_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByBankId(Collection<String> values) {
                return findManyByCondition(FBank.F_BANK.BANK_ID.in(values));
        }

        /**
     * Find records that have <code>BANK_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByBankId(Collection<String> values, int limit) {
                return findManyByCondition(FBank.F_BANK.BANK_ID.in(values),limit);
        }

        /**
     * Find records that have <code>LOCATION_ID IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByLocationId(Collection<String> values) {
                return findManyByCondition(FBank.F_BANK.LOCATION_ID.in(values));
        }

        /**
     * Find records that have <code>LOCATION_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByLocationId(Collection<String> values, int limit) {
                return findManyByCondition(FBank.F_BANK.LOCATION_ID.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(FBank.F_BANK.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(FBank.F_BANK.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(FBank.F_BANK.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(FBank.F_BANK.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(FBank.F_BANK.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(FBank.F_BANK.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(FBank.F_BANK.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(FBank.F_BANK.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FBank.F_BANK.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FBank.F_BANK.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(FBank.F_BANK.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FBank.F_BANK.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FBank.F_BANK.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FBank.F_BANK.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(FBank.F_BANK.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FBank>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FBank.F_BANK.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<FBankRecord,cn.vertxup.fm.domain.tables.pojos.FBank,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<FBankRecord,cn.vertxup.fm.domain.tables.pojos.FBank,String>) super.queryExecutor();
        }
}
