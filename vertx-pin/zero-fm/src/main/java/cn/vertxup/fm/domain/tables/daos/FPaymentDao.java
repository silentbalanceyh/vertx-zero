/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.fm.domain.tables.daos;


import cn.vertxup.fm.domain.tables.FPayment;
import cn.vertxup.fm.domain.tables.records.FPaymentRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FPaymentDao extends AbstractVertxDAO<FPaymentRecord, cn.vertxup.fm.domain.tables.pojos.FPayment, String, Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>>, Future<cn.vertxup.fm.domain.tables.pojos.FPayment>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<FPaymentRecord,cn.vertxup.fm.domain.tables.pojos.FPayment,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public FPaymentDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(FPayment.F_PAYMENT, cn.vertxup.fm.domain.tables.pojos.FPayment.class, new JDBCClassicQueryExecutor<FPaymentRecord,cn.vertxup.fm.domain.tables.pojos.FPayment,String>(configuration,cn.vertxup.fm.domain.tables.pojos.FPayment.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.fm.domain.tables.pojos.FPayment object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByName(Collection<String> values) {
                return findManyByCondition(FPayment.F_PAYMENT.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByCode(Collection<String> values) {
                return findManyByCondition(FPayment.F_PAYMENT.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyBySerial(Collection<String> values) {
                return findManyByCondition(FPayment.F_PAYMENT.SERIAL.in(values));
        }

        /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyBySerial(Collection<String> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.SERIAL.in(values),limit);
        }

        /**
     * Find records that have <code>AMOUNT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByAmount(Collection<BigDecimal> values) {
                return findManyByCondition(FPayment.F_PAYMENT.AMOUNT.in(values));
        }

        /**
     * Find records that have <code>AMOUNT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByAmount(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.AMOUNT.in(values),limit);
        }

        /**
     * Find records that have <code>PAY_NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByPayName(Collection<String> values) {
                return findManyByCondition(FPayment.F_PAYMENT.PAY_NAME.in(values));
        }

        /**
     * Find records that have <code>PAY_NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByPayName(Collection<String> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.PAY_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>PAY_MOBILE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByPayMobile(Collection<String> values) {
                return findManyByCondition(FPayment.F_PAYMENT.PAY_MOBILE.in(values));
        }

        /**
     * Find records that have <code>PAY_MOBILE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByPayMobile(Collection<String> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.PAY_MOBILE.in(values),limit);
        }

        /**
     * Find records that have <code>PAY_METHOD IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByPayMethod(Collection<String> values) {
                return findManyByCondition(FPayment.F_PAYMENT.PAY_METHOD.in(values));
        }

        /**
     * Find records that have <code>PAY_METHOD IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByPayMethod(Collection<String> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.PAY_METHOD.in(values),limit);
        }

        /**
     * Find records that have <code>PAY_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByPayId(Collection<String> values) {
                return findManyByCondition(FPayment.F_PAYMENT.PAY_ID.in(values));
        }

        /**
     * Find records that have <code>PAY_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByPayId(Collection<String> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.PAY_ID.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByComment(Collection<String> values) {
                return findManyByCondition(FPayment.F_PAYMENT.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.COMMENT.in(values),limit);
        }

        /**
     * Find records that have <code>PREPAY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByPrepay(Collection<Boolean> values) {
                return findManyByCondition(FPayment.F_PAYMENT.PREPAY.in(values));
        }

        /**
     * Find records that have <code>PREPAY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByPrepay(Collection<Boolean> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.PREPAY.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(FPayment.F_PAYMENT.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(FPayment.F_PAYMENT.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(FPayment.F_PAYMENT.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(FPayment.F_PAYMENT.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FPayment.F_PAYMENT.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(FPayment.F_PAYMENT.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FPayment.F_PAYMENT.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(FPayment.F_PAYMENT.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayment>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FPayment.F_PAYMENT.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<FPaymentRecord,cn.vertxup.fm.domain.tables.pojos.FPayment,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<FPaymentRecord,cn.vertxup.fm.domain.tables.pojos.FPayment,String>) super.queryExecutor();
        }
}
