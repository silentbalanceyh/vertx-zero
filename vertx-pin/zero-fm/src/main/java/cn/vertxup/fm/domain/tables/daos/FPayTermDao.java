/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.fm.domain.tables.daos;


import cn.vertxup.fm.domain.tables.FPayTerm;
import cn.vertxup.fm.domain.tables.records.FPayTermRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FPayTermDao extends AbstractVertxDAO<FPayTermRecord, cn.vertxup.fm.domain.tables.pojos.FPayTerm, String, Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>>, Future<cn.vertxup.fm.domain.tables.pojos.FPayTerm>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<FPayTermRecord,cn.vertxup.fm.domain.tables.pojos.FPayTerm,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public FPayTermDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(FPayTerm.F_PAY_TERM, cn.vertxup.fm.domain.tables.pojos.FPayTerm.class, new JDBCClassicQueryExecutor<FPayTermRecord,cn.vertxup.fm.domain.tables.pojos.FPayTerm,String>(configuration,cn.vertxup.fm.domain.tables.pojos.FPayTerm.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.fm.domain.tables.pojos.FPayTerm object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByName(Collection<String> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByCode(Collection<String> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByType(Collection<String> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByCategory(Collection<String> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.CATEGORY.in(values));
        }

        /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByCategory(Collection<String> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.CATEGORY.in(values),limit);
        }

        /**
     * Find records that have <code>HELP_CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByHelpCode(Collection<String> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.HELP_CODE.in(values));
        }

        /**
     * Find records that have <code>HELP_CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByHelpCode(Collection<String> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.HELP_CODE.in(values),limit);
        }

        /**
     * Find records that have <code>LEAF IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByLeaf(Collection<Boolean> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.LEAF.in(values));
        }

        /**
     * Find records that have <code>LEAF IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByLeaf(Collection<Boolean> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.LEAF.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByComment(Collection<String> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.COMMENT.in(values),limit);
        }

        /**
     * Find records that have <code>PARENT_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByParentId(Collection<String> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.PARENT_ID.in(values));
        }

        /**
     * Find records that have <code>PARENT_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByParentId(Collection<String> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.PARENT_ID.in(values),limit);
        }

        /**
     * Find records that have <code>SUBJECT_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyBySubjectId(Collection<String> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.SUBJECT_ID.in(values));
        }

        /**
     * Find records that have <code>SUBJECT_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyBySubjectId(Collection<String> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.SUBJECT_ID.in(values),limit);
        }

        /**
     * Find records that have <code>LOCKED IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByLocked(Collection<Boolean> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.LOCKED.in(values));
        }

        /**
     * Find records that have <code>LOCKED IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByLocked(Collection<Boolean> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.LOCKED.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.fm.domain.tables.pojos.FPayTerm>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FPayTerm.F_PAY_TERM.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<FPayTermRecord,cn.vertxup.fm.domain.tables.pojos.FPayTerm,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<FPayTermRecord,cn.vertxup.fm.domain.tables.pojos.FPayTerm,String>) super.queryExecutor();
        }
}
