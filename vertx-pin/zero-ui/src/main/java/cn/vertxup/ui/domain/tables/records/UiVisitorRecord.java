/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables.records;


import cn.vertxup.ui.domain.tables.UiVisitor;
import cn.vertxup.ui.domain.tables.interfaces.IUiVisitor;
import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import org.jooq.Field;
import org.jooq.Record5;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UiVisitorRecord extends UpdatableRecordImpl<UiVisitorRecord> implements VertxPojo, Record9<String, String, String, String, String, String, String, String, String>, IUiVisitor {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.UI_VISITOR.IDENTIFIER</code>. 「identifier」-
     * 维度1：标识模型
     */
    @Override
    public UiVisitorRecord setIdentifier(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VISITOR.IDENTIFIER</code>. 「identifier」-
     * 维度1：标识模型
     */
    @Override
    public String getIdentifier() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VISITOR.PAGE</code>. 「page」- 维度2：页面ID
     */
    @Override
    public UiVisitorRecord setPage(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VISITOR.PAGE</code>. 「page」- 维度2：页面ID
     */
    @Override
    public String getPage() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VISITOR.PATH</code>. 「path」- 维度3：路径信息，view
     * + position
     */
    @Override
    public UiVisitorRecord setPath(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VISITOR.PATH</code>. 「path」- 维度3：路径信息，view
     * + position
     */
    @Override
    public String getPath() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VISITOR.TYPE</code>. 「type」- 维度4：操作类型：List
     * / Form 或其他
     */
    @Override
    public UiVisitorRecord setType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VISITOR.TYPE</code>. 「type」- 维度4：操作类型：List
     * / Form 或其他
     */
    @Override
    public String getType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VISITOR.CONTROL_ID</code>. 「controlId」-
     * 挂载专用的ID：List / Form 都可用
     */
    @Override
    public UiVisitorRecord setControlId(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VISITOR.CONTROL_ID</code>. 「controlId」-
     * 挂载专用的ID：List / Form 都可用
     */
    @Override
    public String getControlId() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VISITOR.RESOURCE_ID</code>. 「resourceId」-
     * 关联资源ID
     */
    @Override
    public UiVisitorRecord setResourceId(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VISITOR.RESOURCE_ID</code>. 「resourceId」-
     * 关联资源ID
     */
    @Override
    public String getResourceId() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VISITOR.SIGMA</code>. 「sigma」- 高维度：统一标识符
     */
    @Override
    public UiVisitorRecord setSigma(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VISITOR.SIGMA</code>. 「sigma」- 高维度：统一标识符
     */
    @Override
    public String getSigma() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VISITOR.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    @Override
    public UiVisitorRecord setMetadata(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VISITOR.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VISITOR.RUN_COMPONENT</code>.
     * 「runComponent」- 执行组件，扩展时专用
     */
    @Override
    public UiVisitorRecord setRunComponent(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VISITOR.RUN_COMPONENT</code>.
     * 「runComponent」- 执行组件，扩展时专用
     */
    @Override
    public String getRunComponent() {
        return (String) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record5<String, String, String, String, String> key() {
        return (Record5) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<String, String, String, String, String, String, String, String, String> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return UiVisitor.UI_VISITOR.IDENTIFIER;
    }

    @Override
    public Field<String> field2() {
        return UiVisitor.UI_VISITOR.PAGE;
    }

    @Override
    public Field<String> field3() {
        return UiVisitor.UI_VISITOR.PATH;
    }

    @Override
    public Field<String> field4() {
        return UiVisitor.UI_VISITOR.TYPE;
    }

    @Override
    public Field<String> field5() {
        return UiVisitor.UI_VISITOR.CONTROL_ID;
    }

    @Override
    public Field<String> field6() {
        return UiVisitor.UI_VISITOR.RESOURCE_ID;
    }

    @Override
    public Field<String> field7() {
        return UiVisitor.UI_VISITOR.SIGMA;
    }

    @Override
    public Field<String> field8() {
        return UiVisitor.UI_VISITOR.METADATA;
    }

    @Override
    public Field<String> field9() {
        return UiVisitor.UI_VISITOR.RUN_COMPONENT;
    }

    @Override
    public String component1() {
        return getIdentifier();
    }

    @Override
    public String component2() {
        return getPage();
    }

    @Override
    public String component3() {
        return getPath();
    }

    @Override
    public String component4() {
        return getType();
    }

    @Override
    public String component5() {
        return getControlId();
    }

    @Override
    public String component6() {
        return getResourceId();
    }

    @Override
    public String component7() {
        return getSigma();
    }

    @Override
    public String component8() {
        return getMetadata();
    }

    @Override
    public String component9() {
        return getRunComponent();
    }

    @Override
    public String value1() {
        return getIdentifier();
    }

    @Override
    public String value2() {
        return getPage();
    }

    @Override
    public String value3() {
        return getPath();
    }

    @Override
    public String value4() {
        return getType();
    }

    @Override
    public String value5() {
        return getControlId();
    }

    @Override
    public String value6() {
        return getResourceId();
    }

    @Override
    public String value7() {
        return getSigma();
    }

    @Override
    public String value8() {
        return getMetadata();
    }

    @Override
    public String value9() {
        return getRunComponent();
    }

    @Override
    public UiVisitorRecord value1(String value) {
        setIdentifier(value);
        return this;
    }

    @Override
    public UiVisitorRecord value2(String value) {
        setPage(value);
        return this;
    }

    @Override
    public UiVisitorRecord value3(String value) {
        setPath(value);
        return this;
    }

    @Override
    public UiVisitorRecord value4(String value) {
        setType(value);
        return this;
    }

    @Override
    public UiVisitorRecord value5(String value) {
        setControlId(value);
        return this;
    }

    @Override
    public UiVisitorRecord value6(String value) {
        setResourceId(value);
        return this;
    }

    @Override
    public UiVisitorRecord value7(String value) {
        setSigma(value);
        return this;
    }

    @Override
    public UiVisitorRecord value8(String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public UiVisitorRecord value9(String value) {
        setRunComponent(value);
        return this;
    }

    @Override
    public UiVisitorRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, String value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUiVisitor from) {
        setIdentifier(from.getIdentifier());
        setPage(from.getPage());
        setPath(from.getPath());
        setType(from.getType());
        setControlId(from.getControlId());
        setResourceId(from.getResourceId());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setRunComponent(from.getRunComponent());
    }

    @Override
    public <E extends IUiVisitor> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UiVisitorRecord
     */
    public UiVisitorRecord() {
        super(UiVisitor.UI_VISITOR);
    }

    /**
     * Create a detached, initialised UiVisitorRecord
     */
    public UiVisitorRecord(String identifier, String page, String path, String type, String controlId, String resourceId, String sigma, String metadata, String runComponent) {
        super(UiVisitor.UI_VISITOR);

        setIdentifier(identifier);
        setPage(page);
        setPath(path);
        setType(type);
        setControlId(controlId);
        setResourceId(resourceId);
        setSigma(sigma);
        setMetadata(metadata);
        setRunComponent(runComponent);
    }

    /**
     * Create a detached, initialised UiVisitorRecord
     */
    public UiVisitorRecord(cn.vertxup.ui.domain.tables.pojos.UiVisitor value) {
        super(UiVisitor.UI_VISITOR);

        if (value != null) {
            setIdentifier(value.getIdentifier());
            setPage(value.getPage());
            setPath(value.getPath());
            setType(value.getType());
            setControlId(value.getControlId());
            setResourceId(value.getResourceId());
            setSigma(value.getSigma());
            setMetadata(value.getMetadata());
            setRunComponent(value.getRunComponent());
        }
    }

        public UiVisitorRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
