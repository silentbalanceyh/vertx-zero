/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables.daos;


import cn.vertxup.ui.domain.tables.VFragment;
import cn.vertxup.ui.domain.tables.records.VFragmentRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VFragmentDao extends AbstractVertxDAO<VFragmentRecord, cn.vertxup.ui.domain.tables.pojos.VFragment, String, Future<List<cn.vertxup.ui.domain.tables.pojos.VFragment>>, Future<cn.vertxup.ui.domain.tables.pojos.VFragment>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<VFragmentRecord,cn.vertxup.ui.domain.tables.pojos.VFragment,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     *      * @param vertx the vertx instance
     */
        public VFragmentDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(VFragment.V_FRAGMENT, cn.vertxup.ui.domain.tables.pojos.VFragment.class, new JDBCClassicQueryExecutor<VFragmentRecord,cn.vertxup.ui.domain.tables.pojos.VFragment,String>(configuration,cn.vertxup.ui.domain.tables.pojos.VFragment.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.ui.domain.tables.pojos.VFragment object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>CONTAINER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VFragment>> findManyByContainer(Collection<String> values) {
                return findManyByCondition(VFragment.V_FRAGMENT.CONTAINER.in(values));
        }

        /**
     * Find records that have <code>CONTAINER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VFragment>> findManyByContainer(Collection<String> values, int limit) {
                return findManyByCondition(VFragment.V_FRAGMENT.CONTAINER.in(values),limit);
        }

        /**
     * Find records that have <code>NOTICE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VFragment>> findManyByNotice(Collection<String> values) {
                return findManyByCondition(VFragment.V_FRAGMENT.NOTICE.in(values));
        }

        /**
     * Find records that have <code>NOTICE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VFragment>> findManyByNotice(Collection<String> values, int limit) {
                return findManyByCondition(VFragment.V_FRAGMENT.NOTICE.in(values),limit);
        }

        /**
     * Find records that have <code>BUTTON_CONNECT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VFragment>> findManyByButtonConnect(Collection<String> values) {
                return findManyByCondition(VFragment.V_FRAGMENT.BUTTON_CONNECT.in(values));
        }

        /**
     * Find records that have <code>BUTTON_CONNECT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VFragment>> findManyByButtonConnect(Collection<String> values, int limit) {
                return findManyByCondition(VFragment.V_FRAGMENT.BUTTON_CONNECT.in(values),limit);
        }

        /**
     * Find records that have <code>BUTTON_GROUP IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VFragment>> findManyByButtonGroup(Collection<String> values) {
                return findManyByCondition(VFragment.V_FRAGMENT.BUTTON_GROUP.in(values));
        }

        /**
     * Find records that have <code>BUTTON_GROUP IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VFragment>> findManyByButtonGroup(Collection<String> values, int limit) {
                return findManyByCondition(VFragment.V_FRAGMENT.BUTTON_GROUP.in(values),limit);
        }

        /**
     * Find records that have <code>MODAL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VFragment>> findManyByModal(Collection<String> values) {
                return findManyByCondition(VFragment.V_FRAGMENT.MODAL.in(values));
        }

        /**
     * Find records that have <code>MODAL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VFragment>> findManyByModal(Collection<String> values, int limit) {
                return findManyByCondition(VFragment.V_FRAGMENT.MODAL.in(values),limit);
        }

        /**
     * Find records that have <code>GRID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VFragment>> findManyByGrid(Collection<Integer> values) {
                return findManyByCondition(VFragment.V_FRAGMENT.GRID.in(values));
        }

        /**
     * Find records that have <code>GRID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VFragment>> findManyByGrid(Collection<Integer> values, int limit) {
                return findManyByCondition(VFragment.V_FRAGMENT.GRID.in(values),limit);
        }

        /**
     * Find records that have <code>CONFIG IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VFragment>> findManyByConfig(Collection<String> values) {
                return findManyByCondition(VFragment.V_FRAGMENT.CONFIG.in(values));
        }

        /**
     * Find records that have <code>CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VFragment>> findManyByConfig(Collection<String> values, int limit) {
                return findManyByCondition(VFragment.V_FRAGMENT.CONFIG.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<VFragmentRecord,cn.vertxup.ui.domain.tables.pojos.VFragment,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<VFragmentRecord,cn.vertxup.ui.domain.tables.pojos.VFragment,String>) super.queryExecutor();
        }
}
