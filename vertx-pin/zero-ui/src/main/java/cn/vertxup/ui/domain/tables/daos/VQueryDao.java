/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables.daos;


import cn.vertxup.ui.domain.tables.VQuery;
import cn.vertxup.ui.domain.tables.records.VQueryRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;

import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VQueryDao extends AbstractVertxDAO<VQueryRecord, cn.vertxup.ui.domain.tables.pojos.VQuery, String, Future<List<cn.vertxup.ui.domain.tables.pojos.VQuery>>, Future<cn.vertxup.ui.domain.tables.pojos.VQuery>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<VQueryRecord,cn.vertxup.ui.domain.tables.pojos.VQuery,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public VQueryDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(VQuery.V_QUERY, cn.vertxup.ui.domain.tables.pojos.VQuery.class, new JDBCClassicQueryExecutor<VQueryRecord,cn.vertxup.ui.domain.tables.pojos.VQuery,String>(configuration,cn.vertxup.ui.domain.tables.pojos.VQuery.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.ui.domain.tables.pojos.VQuery object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>PROJECTION IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VQuery>> findManyByProjection(Collection<String> values) {
                return findManyByCondition(VQuery.V_QUERY.PROJECTION.in(values));
        }

        /**
     * Find records that have <code>PROJECTION IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VQuery>> findManyByProjection(Collection<String> values, int limit) {
                return findManyByCondition(VQuery.V_QUERY.PROJECTION.in(values),limit);
        }

        /**
     * Find records that have <code>PAGER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VQuery>> findManyByPager(Collection<String> values) {
                return findManyByCondition(VQuery.V_QUERY.PAGER.in(values));
        }

        /**
     * Find records that have <code>PAGER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VQuery>> findManyByPager(Collection<String> values, int limit) {
                return findManyByCondition(VQuery.V_QUERY.PAGER.in(values),limit);
        }

        /**
     * Find records that have <code>SORTER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VQuery>> findManyBySorter(Collection<String> values) {
                return findManyByCondition(VQuery.V_QUERY.SORTER.in(values));
        }

        /**
     * Find records that have <code>SORTER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VQuery>> findManyBySorter(Collection<String> values, int limit) {
                return findManyByCondition(VQuery.V_QUERY.SORTER.in(values),limit);
        }

        /**
     * Find records that have <code>CRITERIA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VQuery>> findManyByCriteria(Collection<String> values) {
                return findManyByCondition(VQuery.V_QUERY.CRITERIA.in(values));
        }

        /**
     * Find records that have <code>CRITERIA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.VQuery>> findManyByCriteria(Collection<String> values, int limit) {
                return findManyByCondition(VQuery.V_QUERY.CRITERIA.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<VQueryRecord,cn.vertxup.ui.domain.tables.pojos.VQuery,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<VQueryRecord,cn.vertxup.ui.domain.tables.pojos.VQuery,String>) super.queryExecutor();
        }
}
