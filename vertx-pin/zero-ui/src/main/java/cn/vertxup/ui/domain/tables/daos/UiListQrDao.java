/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables.daos;


import cn.vertxup.ui.domain.tables.UiListQr;
import cn.vertxup.ui.domain.tables.records.UiListQrRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UiListQrDao extends AbstractVertxDAO<UiListQrRecord, cn.vertxup.ui.domain.tables.pojos.UiListQr, String, Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>>, Future<cn.vertxup.ui.domain.tables.pojos.UiListQr>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<UiListQrRecord,cn.vertxup.ui.domain.tables.pojos.UiListQr,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public UiListQrDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(UiListQr.UI_LIST_QR, cn.vertxup.ui.domain.tables.pojos.UiListQr.class, new JDBCClassicQueryExecutor<UiListQrRecord,cn.vertxup.ui.domain.tables.pojos.UiListQr,String>(configuration,cn.vertxup.ui.domain.tables.pojos.UiListQr.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.ui.domain.tables.pojos.UiListQr object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByName(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByCode(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>SORT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyBySort(Collection<Integer> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.SORT.in(values));
        }

        /**
     * Find records that have <code>SORT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyBySort(Collection<Integer> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.SORT.in(values),limit);
        }

        /**
     * Find records that have <code>VIEW IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByView(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.VIEW.in(values));
        }

        /**
     * Find records that have <code>VIEW IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByView(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.VIEW.in(values),limit);
        }

        /**
     * Find records that have <code>POSITION IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByPosition(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.POSITION.in(values));
        }

        /**
     * Find records that have <code>POSITION IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByPosition(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.POSITION.in(values),limit);
        }

        /**
     * Find records that have <code>TITLE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByTitle(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.TITLE.in(values));
        }

        /**
     * Find records that have <code>TITLE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByTitle(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.TITLE.in(values),limit);
        }

        /**
     * Find records that have <code>PROJECTION IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByProjection(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.PROJECTION.in(values));
        }

        /**
     * Find records that have <code>PROJECTION IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByProjection(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.PROJECTION.in(values),limit);
        }

        /**
     * Find records that have <code>CRITERIA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByCriteria(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.CRITERIA.in(values));
        }

        /**
     * Find records that have <code>CRITERIA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByCriteria(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.CRITERIA.in(values),limit);
        }

        /**
     * Find records that have <code>ROWS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByRows(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.ROWS.in(values));
        }

        /**
     * Find records that have <code>ROWS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByRows(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.ROWS.in(values),limit);
        }

        /**
     * Find records that have <code>UI_CONFIG IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByUiConfig(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.UI_CONFIG.in(values));
        }

        /**
     * Find records that have <code>UI_CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByUiConfig(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.UI_CONFIG.in(values),limit);
        }

        /**
     * Find records that have <code>QR_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByQrComponent(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.QR_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>QR_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByQrComponent(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.QR_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>QR_CONFIG IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByQrConfig(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.QR_CONFIG.in(values));
        }

        /**
     * Find records that have <code>QR_CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByQrConfig(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.QR_CONFIG.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(UiListQr.UI_LIST_QR.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiListQr>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(UiListQr.UI_LIST_QR.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<UiListQrRecord,cn.vertxup.ui.domain.tables.pojos.UiListQr,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<UiListQrRecord,cn.vertxup.ui.domain.tables.pojos.UiListQr,String>) super.queryExecutor();
        }
}
