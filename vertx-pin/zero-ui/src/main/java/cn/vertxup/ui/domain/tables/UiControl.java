/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables;


import cn.vertxup.ui.domain.Db;
import cn.vertxup.ui.domain.Keys;
import cn.vertxup.ui.domain.tables.records.UiControlRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UiControl extends TableImpl<UiControlRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.UI_CONTROL</code>
     */
    public static final UiControl UI_CONTROL = new UiControl();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.KEY</code>. 「key」- 主键
     */
    public final TableField<UiControlRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 主键");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.SIGN</code>. 「sign」- 控件使用的签名基本信息
     */
    public final TableField<UiControlRecord, String> SIGN = createField(DSL.name("SIGN"), SQLDataType.VARCHAR(64), this, "「sign」- 控件使用的签名基本信息");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.PAGE_ID</code>. 「pageId」-
     * 当前控件所在的页面ID
     */
    public final TableField<UiControlRecord, String> PAGE_ID = createField(DSL.name("PAGE_ID"), SQLDataType.VARCHAR(36), this, "「pageId」- 当前控件所在的页面ID");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.TYPE</code>. 「type」-
     * 当前控件的类型：CONTAINER / COMPONENT / FORM / LIST，其中 FORM / LIST 需要访问子表
     */
    public final TableField<UiControlRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(32), this, "「type」- 当前控件的类型：CONTAINER / COMPONENT / FORM / LIST，其中 FORM / LIST 需要访问子表");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.CONTAINER_NAME</code>.
     * 「containerName」- 当前控件使用的容器名
     */
    public final TableField<UiControlRecord, String> CONTAINER_NAME = createField(DSL.name("CONTAINER_NAME"), SQLDataType.VARCHAR(64), this, "「containerName」- 当前控件使用的容器名");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.CONTAINER_CONFIG</code>.
     * 「containerConfig」- 当前控件使用的容器配置
     */
    public final TableField<UiControlRecord, String> CONTAINER_CONFIG = createField(DSL.name("CONTAINER_CONFIG"), SQLDataType.CLOB, this, "「containerConfig」- 当前控件使用的容器配置");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.ASSIST</code>. 「assist」 -
     * 辅助数据（容器专用）
     */
    public final TableField<UiControlRecord, String> ASSIST = createField(DSL.name("ASSIST"), SQLDataType.CLOB, this, "「assist」 - 辅助数据（容器专用）");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.GRID</code>. 「grid」 - 容器专用
     */
    public final TableField<UiControlRecord, String> GRID = createField(DSL.name("GRID"), SQLDataType.CLOB, this, "「grid」 - 容器专用");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.COMPONENT_NAME</code>.
     * 「componentName」- 当前控件使用的组件名
     */
    public final TableField<UiControlRecord, String> COMPONENT_NAME = createField(DSL.name("COMPONENT_NAME"), SQLDataType.VARCHAR(64), this, "「componentName」- 当前控件使用的组件名");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.COMPONENT_CONFIG</code>.
     * 「componentConfig」- 当前控件使用的配置
     */
    public final TableField<UiControlRecord, String> COMPONENT_CONFIG = createField(DSL.name("COMPONENT_CONFIG"), SQLDataType.CLOB, this, "「componentConfig」- 当前控件使用的配置");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.COMPONENT_DATA</code>.
     * 「componentData」- 当前控件使用的数据，使用表达式结构
     */
    public final TableField<UiControlRecord, String> COMPONENT_DATA = createField(DSL.name("COMPONENT_DATA"), SQLDataType.VARCHAR(255), this, "「componentData」- 当前控件使用的数据，使用表达式结构");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<UiControlRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<UiControlRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<UiControlRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<UiControlRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<UiControlRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public final TableField<UiControlRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<UiControlRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public final TableField<UiControlRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private UiControl(Name alias, Table<UiControlRecord> aliased) {
        this(alias, aliased, null);
    }

    private UiControl(Name alias, Table<UiControlRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_CONTROL</code> table reference
     */
    public UiControl(String alias) {
        this(DSL.name(alias), UI_CONTROL);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_CONTROL</code> table reference
     */
    public UiControl(Name alias) {
        this(alias, UI_CONTROL);
    }

    /**
     * Create a <code>DB_ETERNAL.UI_CONTROL</code> table reference
     */
    public UiControl() {
        this(DSL.name("UI_CONTROL"), null);
    }

    public <O extends Record> UiControl(Table<O> child, ForeignKey<O, UiControlRecord> key) {
        super(child, key, UI_CONTROL);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UiControlRecord> getRecordType() {
        return UiControlRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<UiControlRecord> getPrimaryKey() {
        return Keys.KEY_UI_CONTROL_PRIMARY;
    }

    @Override
    public List<UniqueKey<UiControlRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_UI_CONTROL_SIGN);
    }

    @Override
    public UiControl as(String alias) {
        return new UiControl(DSL.name(alias), this);
    }

    @Override
    public UiControl as(Name alias) {
        return new UiControl(alias, this);
    }

    @Override
    public UiControl as(Table<?> alias) {
        return new UiControl(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UiControl rename(String name) {
        return new UiControl(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UiControl rename(Name name) {
        return new UiControl(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UiControl rename(Table<?> name) {
        return new UiControl(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<String, String, String, String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function19<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function19<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
