/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables;


import cn.vertxup.ui.domain.Db;
import cn.vertxup.ui.domain.Keys;
import cn.vertxup.ui.domain.tables.records.VQueryRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class VQuery extends TableImpl<VQueryRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.V_QUERY</code>
     */
    public static final VQuery V_QUERY = new VQuery();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.V_QUERY.KEY</code>. 「key」- 选项主键
     */
    public final TableField<VQueryRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 选项主键");
    /**
     * The column <code>DB_ETERNAL.V_QUERY.PROJECTION</code>. 「projection」-
     * query/projection:[], 默认列过滤项
     */
    public final TableField<VQueryRecord, String> PROJECTION = createField(DSL.name("PROJECTION"), SQLDataType.CLOB, this, "「projection」- query/projection:[], 默认列过滤项");
    /**
     * The column <code>DB_ETERNAL.V_QUERY.PAGER</code>. 「pager」-
     * query/pager:{}, 分页选项
     */
    public final TableField<VQueryRecord, String> PAGER = createField(DSL.name("PAGER"), SQLDataType.CLOB, this, "「pager」- query/pager:{}, 分页选项");
    /**
     * The column <code>DB_ETERNAL.V_QUERY.SORTER</code>. 「sorter」-
     * query/sorter:[], 排序选项
     */
    public final TableField<VQueryRecord, String> SORTER = createField(DSL.name("SORTER"), SQLDataType.CLOB, this, "「sorter」- query/sorter:[], 排序选项");
    /**
     * The column <code>DB_ETERNAL.V_QUERY.CRITERIA</code>. 「criteria」-
     * query/criteria:{}, 查询条件选项
     */
    public final TableField<VQueryRecord, String> CRITERIA = createField(DSL.name("CRITERIA"), SQLDataType.CLOB, this, "「criteria」- query/criteria:{}, 查询条件选项");

    private VQuery(Name alias, Table<VQueryRecord> aliased) {
        this(alias, aliased, null);
    }

    private VQuery(Name alias, Table<VQueryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.V_QUERY</code> table reference
     */
    public VQuery(String alias) {
        this(DSL.name(alias), V_QUERY);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.V_QUERY</code> table reference
     */
    public VQuery(Name alias) {
        this(alias, V_QUERY);
    }

    /**
     * Create a <code>DB_ETERNAL.V_QUERY</code> table reference
     */
    public VQuery() {
        this(DSL.name("V_QUERY"), null);
    }

    public <O extends Record> VQuery(Table<O> child, ForeignKey<O, VQueryRecord> key) {
        super(child, key, V_QUERY);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VQueryRecord> getRecordType() {
        return VQueryRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<VQueryRecord> getPrimaryKey() {
        return Keys.KEY_V_QUERY_PRIMARY;
    }

    @Override
    public VQuery as(String alias) {
        return new VQuery(DSL.name(alias), this);
    }

    @Override
    public VQuery as(Name alias) {
        return new VQuery(alias, this);
    }

    @Override
    public VQuery as(Table<?> alias) {
        return new VQuery(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VQuery rename(String name) {
        return new VQuery(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VQuery rename(Name name) {
        return new VQuery(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VQuery rename(Table<?> name) {
        return new VQuery(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
