/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables;


import cn.vertxup.ui.domain.Db;
import cn.vertxup.ui.domain.Keys;
import cn.vertxup.ui.domain.tables.records.VTableRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class VTable extends TableImpl<VTableRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.V_TABLE</code>
     */
    public static final VTable V_TABLE = new VTable();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.V_TABLE.KEY</code>. 「key」- 表选项主键
     */
    public final TableField<VTableRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 表选项主键");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.BORDERED</code>. 「bordered」- 是否带表框
     */
    public final TableField<VTableRecord, Boolean> BORDERED = createField(DSL.name("BORDERED"), SQLDataType.BIT, this, "「bordered」- 是否带表框");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.SIZE</code>. 「size」- 表格尺寸
     */
    public final TableField<VTableRecord, String> SIZE = createField(DSL.name("SIZE"), SQLDataType.VARCHAR(16), this, "「size」- 表格尺寸");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.CLASS_NAME</code>. 「className」- CSS属性
     */
    public final TableField<VTableRecord, String> CLASS_NAME = createField(DSL.name("CLASS_NAME"), SQLDataType.VARCHAR(128), this, "「className」- CSS属性");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.TOTAL_REPORT</code>. 「totalReport」-
     * total.report - 文字: 总共多少条统计
     */
    public final TableField<VTableRecord, String> TOTAL_REPORT = createField(DSL.name("TOTAL_REPORT"), SQLDataType.VARCHAR(128), this, "「totalReport」- total.report - 文字: 总共多少条统计");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.TOTAL_SELECTED</code>.
     * 「totalSelected」- total.selected - 文字: 选择了多少条
     */
    public final TableField<VTableRecord, String> TOTAL_SELECTED = createField(DSL.name("TOTAL_SELECTED"), SQLDataType.VARCHAR(128), this, "「totalSelected」- total.selected - 文字: 选择了多少条");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.ROW_DOUBLE_CLICK</code>.
     * 「rowDoubleClick」- row.onDoubleClick - 双击事件名
     */
    public final TableField<VTableRecord, String> ROW_DOUBLE_CLICK = createField(DSL.name("ROW_DOUBLE_CLICK"), SQLDataType.VARCHAR(64), this, "「rowDoubleClick」- row.onDoubleClick - 双击事件名");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.ROW_CLICK</code>. 「rowClick」-
     * row.onClick - 单击事件名
     */
    public final TableField<VTableRecord, String> ROW_CLICK = createField(DSL.name("ROW_CLICK"), SQLDataType.VARCHAR(64), this, "「rowClick」- row.onClick - 单击事件名");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.ROW_CONTEXT_MENU</code>.
     * 「rowContextMenu」- row.onContextMenu - 右键菜单事件名
     */
    public final TableField<VTableRecord, String> ROW_CONTEXT_MENU = createField(DSL.name("ROW_CONTEXT_MENU"), SQLDataType.VARCHAR(64), this, "「rowContextMenu」- row.onContextMenu - 右键菜单事件名");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.ROW_MOUSE_ENTER</code>.
     * 「rowMouseEnter」- row.onMouseEnter - 鼠标左键事件名
     */
    public final TableField<VTableRecord, String> ROW_MOUSE_ENTER = createField(DSL.name("ROW_MOUSE_ENTER"), SQLDataType.VARCHAR(64), this, "「rowMouseEnter」- row.onMouseEnter - 鼠标左键事件名");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.ROW_MOUSE_LEAVE</code>.
     * 「rowMouseLeave」- row.onMouseLeave - 鼠标移开事件名
     */
    public final TableField<VTableRecord, String> ROW_MOUSE_LEAVE = createField(DSL.name("ROW_MOUSE_LEAVE"), SQLDataType.VARCHAR(64), this, "「rowMouseLeave」- row.onMouseLeave - 鼠标移开事件名");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.OP_TITLE</code>. 「opTitle」-
     * columns/[0]/title, 执行列标题
     */
    public final TableField<VTableRecord, String> OP_TITLE = createField(DSL.name("OP_TITLE"), SQLDataType.VARCHAR(255), this, "「opTitle」- columns/[0]/title, 执行列标题");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.OP_DATA_INDEX</code>. 「opDataIndex」-
     * columns/[0]/dataIndex, 执行列标题
     */
    public final TableField<VTableRecord, String> OP_DATA_INDEX = createField(DSL.name("OP_DATA_INDEX"), SQLDataType.VARCHAR(255), this, "「opDataIndex」- columns/[0]/dataIndex, 执行列标题");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.OP_FIXED</code>. 「opFixed」-
     * columns/[0]/fixed，执行列左还是右
     */
    public final TableField<VTableRecord, Boolean> OP_FIXED = createField(DSL.name("OP_FIXED"), SQLDataType.BIT.defaultValue(DSL.inline("b'0'", SQLDataType.BIT)), this, "「opFixed」- columns/[0]/fixed，执行列左还是右");
    /**
     * The column <code>DB_ETERNAL.V_TABLE.OP_CONFIG</code>. 「opConfig」-
     * columns/[0]/$option, 执行类对应配置，配置按钮
     */
    public final TableField<VTableRecord, String> OP_CONFIG = createField(DSL.name("OP_CONFIG"), SQLDataType.CLOB, this, "「opConfig」- columns/[0]/$option, 执行类对应配置，配置按钮");

    private VTable(Name alias, Table<VTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private VTable(Name alias, Table<VTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.V_TABLE</code> table reference
     */
    public VTable(String alias) {
        this(DSL.name(alias), V_TABLE);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.V_TABLE</code> table reference
     */
    public VTable(Name alias) {
        this(alias, V_TABLE);
    }

    /**
     * Create a <code>DB_ETERNAL.V_TABLE</code> table reference
     */
    public VTable() {
        this(DSL.name("V_TABLE"), null);
    }

    public <O extends Record> VTable(Table<O> child, ForeignKey<O, VTableRecord> key) {
        super(child, key, V_TABLE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VTableRecord> getRecordType() {
        return VTableRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<VTableRecord> getPrimaryKey() {
        return Keys.KEY_V_TABLE_PRIMARY;
    }

    @Override
    public VTable as(String alias) {
        return new VTable(DSL.name(alias), this);
    }

    @Override
    public VTable as(Name alias) {
        return new VTable(alias, this);
    }

    @Override
    public VTable as(Table<?> alias) {
        return new VTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VTable rename(String name) {
        return new VTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VTable rename(Name name) {
        return new VTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VTable rename(Table<?> name) {
        return new VTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, Boolean, String, String, String, String, String, String, String, String, String, String, String, Boolean, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function15<? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function15<? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
