/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables.pojos;


import cn.vertxup.ui.domain.tables.interfaces.IUiPage;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UiPage implements VertxPojo, IUiPage {

    private static final long serialVersionUID = 1L;

    private String        key;
    private String        app;
    private String        module;
    private String        page;
    private String        layoutId;
    private Boolean       secure;
    private String        paramMap;
    private String        containerName;
    private String        containerConfig;
    private String        state;
    private String        grid;
    private String        assist;
    private Boolean       active;
    private String        sigma;
    private String        metadata;
    private String        language;
    private LocalDateTime createdAt;
    private String        createdBy;
    private LocalDateTime updatedAt;
    private String        updatedBy;

    public UiPage() {}

    public UiPage(IUiPage value) {
        this.key = value.getKey();
        this.app = value.getApp();
        this.module = value.getModule();
        this.page = value.getPage();
        this.layoutId = value.getLayoutId();
        this.secure = value.getSecure();
        this.paramMap = value.getParamMap();
        this.containerName = value.getContainerName();
        this.containerConfig = value.getContainerConfig();
        this.state = value.getState();
        this.grid = value.getGrid();
        this.assist = value.getAssist();
        this.active = value.getActive();
        this.sigma = value.getSigma();
        this.metadata = value.getMetadata();
        this.language = value.getLanguage();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public UiPage(
        String        key,
        String        app,
        String        module,
        String        page,
        String        layoutId,
        Boolean       secure,
        String        paramMap,
        String        containerName,
        String        containerConfig,
        String        state,
        String        grid,
        String        assist,
        Boolean       active,
        String        sigma,
        String        metadata,
        String        language,
        LocalDateTime createdAt,
        String        createdBy,
        LocalDateTime updatedAt,
        String        updatedBy
    ) {
        this.key = key;
        this.app = app;
        this.module = module;
        this.page = page;
        this.layoutId = layoutId;
        this.secure = secure;
        this.paramMap = paramMap;
        this.containerName = containerName;
        this.containerConfig = containerConfig;
        this.state = state;
        this.grid = grid;
        this.assist = assist;
        this.active = active;
        this.sigma = sigma;
        this.metadata = metadata;
        this.language = language;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public UiPage(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.KEY</code>. 「key」- 页面唯一主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.KEY</code>. 「key」- 页面唯一主键
     */
    @Override
    public UiPage setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.APP</code>. 「app」- 入口APP名称，APP中的path
     */
    @Override
    public String getApp() {
        return this.app;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.APP</code>. 「app」- 入口APP名称，APP中的path
     */
    @Override
    public UiPage setApp(String app) {
        this.app = app;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.MODULE</code>. 「module」- 模块相关信息
     */
    @Override
    public String getModule() {
        return this.module;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.MODULE</code>. 「module」- 模块相关信息
     */
    @Override
    public UiPage setModule(String module) {
        this.module = module;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.PAGE</code>. 「page」- 页面路径信息
     */
    @Override
    public String getPage() {
        return this.page;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.PAGE</code>. 「page」- 页面路径信息
     */
    @Override
    public UiPage setPage(String page) {
        this.page = page;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.LAYOUT_ID</code>. 「layoutId」-
     * 使用的模板ID，最终生成 layout 顶层节点数据
     */
    @Override
    public String getLayoutId() {
        return this.layoutId;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.LAYOUT_ID</code>. 「layoutId」-
     * 使用的模板ID，最终生成 layout 顶层节点数据
     */
    @Override
    public UiPage setLayoutId(String layoutId) {
        this.layoutId = layoutId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.SECURE</code>. 「secure」-
     * 是否执行安全检查（安全检查才会被权限系统捕捉）
     */
    @Override
    public Boolean getSecure() {
        return this.secure;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.SECURE</code>. 「secure」-
     * 是否执行安全检查（安全检查才会被权限系统捕捉）
     */
    @Override
    public UiPage setSecure(Boolean secure) {
        this.secure = secure;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.PARAM_MAP</code>. 「paramMap」-
     * URL地址中的配置key=value
     */
    @Override
    public String getParamMap() {
        return this.paramMap;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.PARAM_MAP</code>. 「paramMap」-
     * URL地址中的配置key=value
     */
    @Override
    public UiPage setParamMap(String paramMap) {
        this.paramMap = paramMap;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.CONTAINER_NAME</code>.
     * 「containerName」- 当前页面是否存在容器，如果有容器，那么设置容器名称
     */
    @Override
    public String getContainerName() {
        return this.containerName;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.CONTAINER_NAME</code>.
     * 「containerName」- 当前页面是否存在容器，如果有容器，那么设置容器名称
     */
    @Override
    public UiPage setContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.CONTAINER_CONFIG</code>.
     * 「containerConfig」- 当前页面容器相关配置
     */
    @Override
    public String getContainerConfig() {
        return this.containerConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.CONTAINER_CONFIG</code>.
     * 「containerConfig」- 当前页面容器相关配置
     */
    @Override
    public UiPage setContainerConfig(String containerConfig) {
        this.containerConfig = containerConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.STATE</code>. 「state」- 当前页面的初始化状态信息
     */
    @Override
    public String getState() {
        return this.state;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.STATE</code>. 「state」- 当前页面的初始化状态信息
     */
    @Override
    public UiPage setState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.GRID</code>. 「grid」-
     * 当前页面的布局信息，Grid布局格式
     */
    @Override
    public String getGrid() {
        return this.grid;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.GRID</code>. 「grid」-
     * 当前页面的布局信息，Grid布局格式
     */
    @Override
    public UiPage setGrid(String grid) {
        this.grid = grid;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.ASSIST</code>. 「assist」-
     * 当前页面的辅助数据Ajax配置
     */
    @Override
    public String getAssist() {
        return this.assist;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.ASSIST</code>. 「assist」-
     * 当前页面的辅助数据Ajax配置
     */
    @Override
    public UiPage setAssist(String assist) {
        this.assist = assist;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public UiPage setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public UiPage setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public UiPage setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public UiPage setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public UiPage setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public UiPage setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public UiPage setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public UiPage setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UiPage (");

        sb.append(key);
        sb.append(", ").append(app);
        sb.append(", ").append(module);
        sb.append(", ").append(page);
        sb.append(", ").append(layoutId);
        sb.append(", ").append(secure);
        sb.append(", ").append(paramMap);
        sb.append(", ").append(containerName);
        sb.append(", ").append(containerConfig);
        sb.append(", ").append(state);
        sb.append(", ").append(grid);
        sb.append(", ").append(assist);
        sb.append(", ").append(active);
        sb.append(", ").append(sigma);
        sb.append(", ").append(metadata);
        sb.append(", ").append(language);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUiPage from) {
        setKey(from.getKey());
        setApp(from.getApp());
        setModule(from.getModule());
        setPage(from.getPage());
        setLayoutId(from.getLayoutId());
        setSecure(from.getSecure());
        setParamMap(from.getParamMap());
        setContainerName(from.getContainerName());
        setContainerConfig(from.getContainerConfig());
        setState(from.getState());
        setGrid(from.getGrid());
        setAssist(from.getAssist());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IUiPage> E into(E into) {
        into.from(this);
        return into;
    }
}
