/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables.daos;


import cn.vertxup.ui.domain.tables.UiForm;
import cn.vertxup.ui.domain.tables.records.UiFormRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UiFormDao extends AbstractVertxDAO<UiFormRecord, cn.vertxup.ui.domain.tables.pojos.UiForm, String, Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>>, Future<cn.vertxup.ui.domain.tables.pojos.UiForm>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<UiFormRecord,cn.vertxup.ui.domain.tables.pojos.UiForm,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public UiFormDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(UiForm.UI_FORM, cn.vertxup.ui.domain.tables.pojos.UiForm.class, new JDBCClassicQueryExecutor<UiFormRecord,cn.vertxup.ui.domain.tables.pojos.UiForm,String>(configuration,cn.vertxup.ui.domain.tables.pojos.UiForm.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.ui.domain.tables.pojos.UiForm object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByName(Collection<String> values) {
                return findManyByCondition(UiForm.UI_FORM.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(UiForm.UI_FORM.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByCode(Collection<String> values) {
                return findManyByCondition(UiForm.UI_FORM.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(UiForm.UI_FORM.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>WINDOW IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByWindow(Collection<BigDecimal> values) {
                return findManyByCondition(UiForm.UI_FORM.WINDOW.in(values));
        }

        /**
     * Find records that have <code>WINDOW IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByWindow(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(UiForm.UI_FORM.WINDOW.in(values),limit);
        }

        /**
     * Find records that have <code>COLUMNS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByColumns(Collection<Integer> values) {
                return findManyByCondition(UiForm.UI_FORM.COLUMNS.in(values));
        }

        /**
     * Find records that have <code>COLUMNS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByColumns(Collection<Integer> values, int limit) {
                return findManyByCondition(UiForm.UI_FORM.COLUMNS.in(values),limit);
        }

        /**
     * Find records that have <code>HIDDEN IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByHidden(Collection<String> values) {
                return findManyByCondition(UiForm.UI_FORM.HIDDEN.in(values));
        }

        /**
     * Find records that have <code>HIDDEN IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByHidden(Collection<String> values, int limit) {
                return findManyByCondition(UiForm.UI_FORM.HIDDEN.in(values),limit);
        }

        /**
     * Find records that have <code>ROW IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByRow(Collection<String> values) {
                return findManyByCondition(UiForm.UI_FORM.ROW.in(values));
        }

        /**
     * Find records that have <code>ROW IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByRow(Collection<String> values, int limit) {
                return findManyByCondition(UiForm.UI_FORM.ROW.in(values),limit);
        }

        /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByIdentifier(Collection<String> values) {
                return findManyByCondition(UiForm.UI_FORM.IDENTIFIER.in(values));
        }

        /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByIdentifier(Collection<String> values, int limit) {
                return findManyByCondition(UiForm.UI_FORM.IDENTIFIER.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(UiForm.UI_FORM.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(UiForm.UI_FORM.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(UiForm.UI_FORM.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(UiForm.UI_FORM.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(UiForm.UI_FORM.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(UiForm.UI_FORM.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(UiForm.UI_FORM.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(UiForm.UI_FORM.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(UiForm.UI_FORM.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(UiForm.UI_FORM.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(UiForm.UI_FORM.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(UiForm.UI_FORM.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(UiForm.UI_FORM.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(UiForm.UI_FORM.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(UiForm.UI_FORM.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiForm>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(UiForm.UI_FORM.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<UiFormRecord,cn.vertxup.ui.domain.tables.pojos.UiForm,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<UiFormRecord,cn.vertxup.ui.domain.tables.pojos.UiForm,String>) super.queryExecutor();
        }
}
