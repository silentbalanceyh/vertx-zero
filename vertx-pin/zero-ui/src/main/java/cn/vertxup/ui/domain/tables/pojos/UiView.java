/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables.pojos;


import cn.vertxup.ui.domain.tables.interfaces.IUiView;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UiView implements VertxPojo, IUiView {

    private static final long serialVersionUID = 1L;

    private String key;
    private String name;
    private String code;
    private Integer sort;
    private String identifier;
    private String workflow;
    private String view;
    private String position;
    private String title;
    private String projection;
    private String criteria;
    private String rows;
    private String uiConfig;
    private String qrComponent;
    private String qrConfig;
    private String sigma;
    private String language;
    private Boolean active;
    private String metadata;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public UiView() {}

    public UiView(IUiView value) {
        this.key = value.getKey();
        this.name = value.getName();
        this.code = value.getCode();
        this.sort = value.getSort();
        this.identifier = value.getIdentifier();
        this.workflow = value.getWorkflow();
        this.view = value.getView();
        this.position = value.getPosition();
        this.title = value.getTitle();
        this.projection = value.getProjection();
        this.criteria = value.getCriteria();
        this.rows = value.getRows();
        this.uiConfig = value.getUiConfig();
        this.qrComponent = value.getQrComponent();
        this.qrConfig = value.getQrConfig();
        this.sigma = value.getSigma();
        this.language = value.getLanguage();
        this.active = value.getActive();
        this.metadata = value.getMetadata();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public UiView(
        String key,
        String name,
        String code,
        Integer sort,
        String identifier,
        String workflow,
        String view,
        String position,
        String title,
        String projection,
        String criteria,
        String rows,
        String uiConfig,
        String qrComponent,
        String qrConfig,
        String sigma,
        String language,
        Boolean active,
        String metadata,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.name = name;
        this.code = code;
        this.sort = sort;
        this.identifier = identifier;
        this.workflow = workflow;
        this.view = view;
        this.position = position;
        this.title = title;
        this.projection = projection;
        this.criteria = criteria;
        this.rows = rows;
        this.uiConfig = uiConfig;
        this.qrComponent = qrComponent;
        this.qrConfig = qrConfig;
        this.sigma = sigma;
        this.language = language;
        this.active = active;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public UiView(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.KEY</code>. 「key」- 查询记录ID
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.KEY</code>. 「key」- 查询记录ID
     */
    @Override
    public UiView setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.NAME</code>. 「name」- 视图名称，每个 MATRIX
     * 对应一个视图
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.NAME</code>. 「name」- 视图名称，每个 MATRIX
     * 对应一个视图
     */
    @Override
    public UiView setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.CODE</code>. 「code」- 系统编码
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.CODE</code>. 「code」- 系统编码
     */
    @Override
    public UiView setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.SORT</code>. 「sort」- QR的顺序
     */
    @Override
    public Integer getSort() {
        return this.sort;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.SORT</code>. 「sort」- QR的顺序
     */
    @Override
    public UiView setSort(Integer sort) {
        this.sort = sort;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.IDENTIFIER</code>. 「identifier」-
     * 模型标识符
     */
    @Override
    public String getIdentifier() {
        return this.identifier;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.IDENTIFIER</code>. 「identifier」-
     * 模型标识符
     */
    @Override
    public UiView setIdentifier(String identifier) {
        this.identifier = identifier;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.WORKFLOW</code>. 「workflow」- 工作流名称
     */
    @Override
    public String getWorkflow() {
        return this.workflow;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.WORKFLOW</code>. 「workflow」- 工作流名称
     */
    @Override
    public UiView setWorkflow(String workflow) {
        this.workflow = workflow;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.VIEW</code>. 「view」- 视图名
     */
    @Override
    public String getView() {
        return this.view;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.VIEW</code>. 「view」- 视图名
     */
    @Override
    public UiView setView(String view) {
        this.view = view;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.POSITION</code>. 「position」-
     * 当前视图的模块位置，比页面低一个维度
     */
    @Override
    public String getPosition() {
        return this.position;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.POSITION</code>. 「position」-
     * 当前视图的模块位置，比页面低一个维度
     */
    @Override
    public UiView setPosition(String position) {
        this.position = position;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.TITLE</code>. 「title」- 视图标题，用户输入，可选择
     */
    @Override
    public String getTitle() {
        return this.title;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.TITLE</code>. 「title」- 视图标题，用户输入，可选择
     */
    @Override
    public UiView setTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.PROJECTION</code>. 「projection」-
     * 该资源的列定义
     */
    @Override
    public String getProjection() {
        return this.projection;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.PROJECTION</code>. 「projection」-
     * 该资源的列定义
     */
    @Override
    public UiView setProjection(String projection) {
        this.projection = projection;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.CRITERIA</code>. 「criteria」- 该资源的行查询
     */
    @Override
    public String getCriteria() {
        return this.criteria;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.CRITERIA</code>. 「criteria」- 该资源的行查询
     */
    @Override
    public UiView setCriteria(String criteria) {
        this.criteria = criteria;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.ROWS</code>. 「rows」- 该资源针对保存的行进行过滤
     */
    @Override
    public String getRows() {
        return this.rows;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.ROWS</code>. 「rows」- 该资源针对保存的行进行过滤
     */
    @Override
    public UiView setRows(String rows) {
        this.rows = rows;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.UI_CONFIG</code>. 「uiConfig」- 界面配置
     */
    @Override
    public String getUiConfig() {
        return this.uiConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.UI_CONFIG</code>. 「uiConfig」- 界面配置
     */
    @Override
    public UiView setUiConfig(String uiConfig) {
        this.uiConfig = uiConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.QR_COMPONENT</code>. 「qrComponent」-
     * 查询条件专用组件
     */
    @Override
    public String getQrComponent() {
        return this.qrComponent;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.QR_COMPONENT</code>. 「qrComponent」-
     * 查询条件专用组件
     */
    @Override
    public UiView setQrComponent(String qrComponent) {
        this.qrComponent = qrComponent;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.QR_CONFIG</code>. 「qrConfig」-
     * 查询组件专用配置
     */
    @Override
    public String getQrConfig() {
        return this.qrConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.QR_CONFIG</code>. 「qrConfig」-
     * 查询组件专用配置
     */
    @Override
    public UiView setQrConfig(String qrConfig) {
        this.qrConfig = qrConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.SIGMA</code>. 「sigma」- 用户组绑定的统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.SIGMA</code>. 「sigma」- 用户组绑定的统一标识
     */
    @Override
    public UiView setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public UiView setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public UiView setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public UiView setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public UiView setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public UiView setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public UiView setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_VIEW.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_VIEW.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public UiView setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final UiView other = (UiView) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        }
        else if (!this.key.equals(other.key))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.code == null) {
            if (other.code != null)
                return false;
        }
        else if (!this.code.equals(other.code))
            return false;
        if (this.sort == null) {
            if (other.sort != null)
                return false;
        }
        else if (!this.sort.equals(other.sort))
            return false;
        if (this.identifier == null) {
            if (other.identifier != null)
                return false;
        }
        else if (!this.identifier.equals(other.identifier))
            return false;
        if (this.workflow == null) {
            if (other.workflow != null)
                return false;
        }
        else if (!this.workflow.equals(other.workflow))
            return false;
        if (this.view == null) {
            if (other.view != null)
                return false;
        }
        else if (!this.view.equals(other.view))
            return false;
        if (this.position == null) {
            if (other.position != null)
                return false;
        }
        else if (!this.position.equals(other.position))
            return false;
        if (this.title == null) {
            if (other.title != null)
                return false;
        }
        else if (!this.title.equals(other.title))
            return false;
        if (this.projection == null) {
            if (other.projection != null)
                return false;
        }
        else if (!this.projection.equals(other.projection))
            return false;
        if (this.criteria == null) {
            if (other.criteria != null)
                return false;
        }
        else if (!this.criteria.equals(other.criteria))
            return false;
        if (this.rows == null) {
            if (other.rows != null)
                return false;
        }
        else if (!this.rows.equals(other.rows))
            return false;
        if (this.uiConfig == null) {
            if (other.uiConfig != null)
                return false;
        }
        else if (!this.uiConfig.equals(other.uiConfig))
            return false;
        if (this.qrComponent == null) {
            if (other.qrComponent != null)
                return false;
        }
        else if (!this.qrComponent.equals(other.qrComponent))
            return false;
        if (this.qrConfig == null) {
            if (other.qrConfig != null)
                return false;
        }
        else if (!this.qrConfig.equals(other.qrConfig))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        }
        else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        }
        else if (!this.language.equals(other.language))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        }
        else if (!this.active.equals(other.active))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        }
        else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.sort == null) ? 0 : this.sort.hashCode());
        result = prime * result + ((this.identifier == null) ? 0 : this.identifier.hashCode());
        result = prime * result + ((this.workflow == null) ? 0 : this.workflow.hashCode());
        result = prime * result + ((this.view == null) ? 0 : this.view.hashCode());
        result = prime * result + ((this.position == null) ? 0 : this.position.hashCode());
        result = prime * result + ((this.title == null) ? 0 : this.title.hashCode());
        result = prime * result + ((this.projection == null) ? 0 : this.projection.hashCode());
        result = prime * result + ((this.criteria == null) ? 0 : this.criteria.hashCode());
        result = prime * result + ((this.rows == null) ? 0 : this.rows.hashCode());
        result = prime * result + ((this.uiConfig == null) ? 0 : this.uiConfig.hashCode());
        result = prime * result + ((this.qrComponent == null) ? 0 : this.qrComponent.hashCode());
        result = prime * result + ((this.qrConfig == null) ? 0 : this.qrConfig.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UiView (");

        sb.append(key);
        sb.append(", ").append(name);
        sb.append(", ").append(code);
        sb.append(", ").append(sort);
        sb.append(", ").append(identifier);
        sb.append(", ").append(workflow);
        sb.append(", ").append(view);
        sb.append(", ").append(position);
        sb.append(", ").append(title);
        sb.append(", ").append(projection);
        sb.append(", ").append(criteria);
        sb.append(", ").append(rows);
        sb.append(", ").append(uiConfig);
        sb.append(", ").append(qrComponent);
        sb.append(", ").append(qrConfig);
        sb.append(", ").append(sigma);
        sb.append(", ").append(language);
        sb.append(", ").append(active);
        sb.append(", ").append(metadata);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUiView from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setSort(from.getSort());
        setIdentifier(from.getIdentifier());
        setWorkflow(from.getWorkflow());
        setView(from.getView());
        setPosition(from.getPosition());
        setTitle(from.getTitle());
        setProjection(from.getProjection());
        setCriteria(from.getCriteria());
        setRows(from.getRows());
        setUiConfig(from.getUiConfig());
        setQrComponent(from.getQrComponent());
        setQrConfig(from.getQrConfig());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IUiView> E into(E into) {
        into.from(this);
        return into;
    }
}
