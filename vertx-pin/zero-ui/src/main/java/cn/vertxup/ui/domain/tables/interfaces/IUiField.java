/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IUiField extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.KEY</code>. 「key」- 字段主键
     */
    public IUiField setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.KEY</code>. 「key」- 字段主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.X_POINT</code>. 「xPoint] - 字段的X坐标（列）
     */
    public IUiField setXPoint(Integer value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.X_POINT</code>. 「xPoint] - 字段的X坐标（列）
     */
    public Integer getXPoint();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.Y_POINT</code>. 「yPoint」- 字段的Y坐标（行）
     */
    public IUiField setYPoint(Integer value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.Y_POINT</code>. 「yPoint」- 字段的Y坐标（行）
     */
    public Integer getYPoint();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.LABEL</code>. 「label」- 字段标签
     */
    public IUiField setLabel(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.LABEL</code>. 「label」- 字段标签
     */
    public String getLabel();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.NAME</code>. 「name」- 字段名称
     */
    public IUiField setName(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.NAME</code>. 「name」- 字段名称
     */
    public String getName();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.SPAN</code>. 「span」- 字段宽度
     */
    public IUiField setSpan(Integer value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.SPAN</code>. 「span」- 字段宽度
     */
    public Integer getSpan();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.HIDDEN</code>. 「hidden」- button专用
     */
    public IUiField setHidden(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.HIDDEN</code>. 「hidden」- button专用
     */
    public Boolean getHidden();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.RENDER</code>. 「render」- 使用的Render函数
     */
    public IUiField setRender(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.RENDER</code>. 「render」- 使用的Render函数
     */
    public String getRender();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.CONTAINER</code>. 「container」-
     * 容器字段专用容器信息，映射到 name 中
     */
    public IUiField setContainer(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.CONTAINER</code>. 「container」-
     * 容器字段专用容器信息，映射到 name 中
     */
    public String getContainer();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.OPTION_JSX</code>. 「optionJsx」-
     * 字段专用配置
     */
    public IUiField setOptionJsx(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.OPTION_JSX</code>. 「optionJsx」-
     * 字段专用配置
     */
    public String getOptionJsx();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.OPTION_CONFIG</code>.
     * 「optionConfig」- 字段专用配置
     */
    public IUiField setOptionConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.OPTION_CONFIG</code>.
     * 「optionConfig」- 字段专用配置
     */
    public String getOptionConfig();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.OPTION_ITEM</code>. 「optionItem」-
     * 字段专用配置
     */
    public IUiField setOptionItem(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.OPTION_ITEM</code>. 「optionItem」-
     * 字段专用配置
     */
    public String getOptionItem();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.RULES</code>. 「rules」-
     * optionConfig.rules 验证专用的配置，描述规则
     */
    public IUiField setRules(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.RULES</code>. 「rules」-
     * optionConfig.rules 验证专用的配置，描述规则
     */
    public String getRules();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.CONTROL_ID</code>. 「controlId」-
     * 关联的表单ID
     */
    public IUiField setControlId(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.CONTROL_ID</code>. 「controlId」-
     * 关联的表单ID
     */
    public String getControlId();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.ROW_TYPE</code>. 「rowType」- 行类型
     */
    public IUiField setRowType(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.ROW_TYPE</code>. 「rowType」- 行类型
     */
    public String getRowType();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.ACTIVE</code>. 「active」- 是否启用
     */
    public IUiField setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.SIGMA</code>. 「sigma」- 统一标识
     */
    public IUiField setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.METADATA</code>. 「metadata」- 附加配置
     */
    public IUiField setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IUiField setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IUiField setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IUiField setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public IUiField setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IUiField setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IUiField
     */
    public void from(IUiField from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IUiField
     */
    public <E extends IUiField> E into(E into);

        @Override
        public default IUiField fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setXPoint,json::getInteger,"X_POINT","java.lang.Integer");
                setOrThrow(this::setYPoint,json::getInteger,"Y_POINT","java.lang.Integer");
                setOrThrow(this::setLabel,json::getString,"LABEL","java.lang.String");
                setOrThrow(this::setName,json::getString,"NAME","java.lang.String");
                setOrThrow(this::setSpan,json::getInteger,"SPAN","java.lang.Integer");
                setOrThrow(this::setHidden,json::getBoolean,"HIDDEN","java.lang.Boolean");
                setOrThrow(this::setRender,json::getString,"RENDER","java.lang.String");
                setOrThrow(this::setContainer,json::getString,"CONTAINER","java.lang.String");
                setOrThrow(this::setOptionJsx,json::getString,"OPTION_JSX","java.lang.String");
                setOrThrow(this::setOptionConfig,json::getString,"OPTION_CONFIG","java.lang.String");
                setOrThrow(this::setOptionItem,json::getString,"OPTION_ITEM","java.lang.String");
                setOrThrow(this::setRules,json::getString,"RULES","java.lang.String");
                setOrThrow(this::setControlId,json::getString,"CONTROL_ID","java.lang.String");
                setOrThrow(this::setRowType,json::getString,"ROW_TYPE","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                setOrThrow(this::setUpdatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"UPDATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setUpdatedBy,json::getString,"UPDATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("X_POINT",getXPoint());
                json.put("Y_POINT",getYPoint());
                json.put("LABEL",getLabel());
                json.put("NAME",getName());
                json.put("SPAN",getSpan());
                json.put("HIDDEN",getHidden());
                json.put("RENDER",getRender());
                json.put("CONTAINER",getContainer());
                json.put("OPTION_JSX",getOptionJsx());
                json.put("OPTION_CONFIG",getOptionConfig());
                json.put("OPTION_ITEM",getOptionItem());
                json.put("RULES",getRules());
                json.put("CONTROL_ID",getControlId());
                json.put("ROW_TYPE",getRowType());
                json.put("ACTIVE",getActive());
                json.put("SIGMA",getSigma());
                json.put("METADATA",getMetadata());
                json.put("LANGUAGE",getLanguage());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                json.put("UPDATED_AT",getUpdatedAt()==null?null:getUpdatedAt().toString());
                json.put("UPDATED_BY",getUpdatedBy());
                return json;
        }

}
