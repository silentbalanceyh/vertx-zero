/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables.pojos;


import cn.vertxup.ui.domain.tables.interfaces.IUiField;
import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UiField implements VertxPojo, IUiField {

    private static final long serialVersionUID = 1L;

    private String key;
    private Integer xPoint;
    private Integer yPoint;
    private String label;
    private String name;
    private Integer span;
    private Boolean hidden;
    private String render;
    private String container;
    private String optionJsx;
    private String optionConfig;
    private String optionItem;
    private String rules;
    private String controlId;
    private String rowType;
    private Boolean active;
    private String sigma;
    private String metadata;
    private String language;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public UiField() {}

    public UiField(IUiField value) {
        this.key = value.getKey();
        this.xPoint = value.getXPoint();
        this.yPoint = value.getYPoint();
        this.label = value.getLabel();
        this.name = value.getName();
        this.span = value.getSpan();
        this.hidden = value.getHidden();
        this.render = value.getRender();
        this.container = value.getContainer();
        this.optionJsx = value.getOptionJsx();
        this.optionConfig = value.getOptionConfig();
        this.optionItem = value.getOptionItem();
        this.rules = value.getRules();
        this.controlId = value.getControlId();
        this.rowType = value.getRowType();
        this.active = value.getActive();
        this.sigma = value.getSigma();
        this.metadata = value.getMetadata();
        this.language = value.getLanguage();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public UiField(
        String key,
        Integer xPoint,
        Integer yPoint,
        String label,
        String name,
        Integer span,
        Boolean hidden,
        String render,
        String container,
        String optionJsx,
        String optionConfig,
        String optionItem,
        String rules,
        String controlId,
        String rowType,
        Boolean active,
        String sigma,
        String metadata,
        String language,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.xPoint = xPoint;
        this.yPoint = yPoint;
        this.label = label;
        this.name = name;
        this.span = span;
        this.hidden = hidden;
        this.render = render;
        this.container = container;
        this.optionJsx = optionJsx;
        this.optionConfig = optionConfig;
        this.optionItem = optionItem;
        this.rules = rules;
        this.controlId = controlId;
        this.rowType = rowType;
        this.active = active;
        this.sigma = sigma;
        this.metadata = metadata;
        this.language = language;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public UiField(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.KEY</code>. 「key」- 字段主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.KEY</code>. 「key」- 字段主键
     */
    @Override
    public UiField setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.X_POINT</code>. 「xPoint] - 字段的X坐标（列）
     */
    @Override
    public Integer getXPoint() {
        return this.xPoint;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.X_POINT</code>. 「xPoint] - 字段的X坐标（列）
     */
    @Override
    public UiField setXPoint(Integer xPoint) {
        this.xPoint = xPoint;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.Y_POINT</code>. 「yPoint」- 字段的Y坐标（行）
     */
    @Override
    public Integer getYPoint() {
        return this.yPoint;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.Y_POINT</code>. 「yPoint」- 字段的Y坐标（行）
     */
    @Override
    public UiField setYPoint(Integer yPoint) {
        this.yPoint = yPoint;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.LABEL</code>. 「label」- 字段标签
     */
    @Override
    public String getLabel() {
        return this.label;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.LABEL</code>. 「label」- 字段标签
     */
    @Override
    public UiField setLabel(String label) {
        this.label = label;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.NAME</code>. 「name」- 字段名称
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.NAME</code>. 「name」- 字段名称
     */
    @Override
    public UiField setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.SPAN</code>. 「span」- 字段宽度
     */
    @Override
    public Integer getSpan() {
        return this.span;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.SPAN</code>. 「span」- 字段宽度
     */
    @Override
    public UiField setSpan(Integer span) {
        this.span = span;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.HIDDEN</code>. 「hidden」- button专用
     */
    @Override
    public Boolean getHidden() {
        return this.hidden;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.HIDDEN</code>. 「hidden」- button专用
     */
    @Override
    public UiField setHidden(Boolean hidden) {
        this.hidden = hidden;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.RENDER</code>. 「render」- 使用的Render函数
     */
    @Override
    public String getRender() {
        return this.render;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.RENDER</code>. 「render」- 使用的Render函数
     */
    @Override
    public UiField setRender(String render) {
        this.render = render;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.CONTAINER</code>. 「container」-
     * 容器字段专用容器信息，映射到 name 中
     */
    @Override
    public String getContainer() {
        return this.container;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.CONTAINER</code>. 「container」-
     * 容器字段专用容器信息，映射到 name 中
     */
    @Override
    public UiField setContainer(String container) {
        this.container = container;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.OPTION_JSX</code>. 「optionJsx」-
     * 字段专用配置
     */
    @Override
    public String getOptionJsx() {
        return this.optionJsx;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.OPTION_JSX</code>. 「optionJsx」-
     * 字段专用配置
     */
    @Override
    public UiField setOptionJsx(String optionJsx) {
        this.optionJsx = optionJsx;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.OPTION_CONFIG</code>.
     * 「optionConfig」- 字段专用配置
     */
    @Override
    public String getOptionConfig() {
        return this.optionConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.OPTION_CONFIG</code>.
     * 「optionConfig」- 字段专用配置
     */
    @Override
    public UiField setOptionConfig(String optionConfig) {
        this.optionConfig = optionConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.OPTION_ITEM</code>. 「optionItem」-
     * 字段专用配置
     */
    @Override
    public String getOptionItem() {
        return this.optionItem;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.OPTION_ITEM</code>. 「optionItem」-
     * 字段专用配置
     */
    @Override
    public UiField setOptionItem(String optionItem) {
        this.optionItem = optionItem;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.RULES</code>. 「rules」-
     * optionConfig.rules 验证专用的配置，描述规则
     */
    @Override
    public String getRules() {
        return this.rules;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.RULES</code>. 「rules」-
     * optionConfig.rules 验证专用的配置，描述规则
     */
    @Override
    public UiField setRules(String rules) {
        this.rules = rules;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.CONTROL_ID</code>. 「controlId」-
     * 关联的表单ID
     */
    @Override
    public String getControlId() {
        return this.controlId;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.CONTROL_ID</code>. 「controlId」-
     * 关联的表单ID
     */
    @Override
    public UiField setControlId(String controlId) {
        this.controlId = controlId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.ROW_TYPE</code>. 「rowType」- 行类型
     */
    @Override
    public String getRowType() {
        return this.rowType;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.ROW_TYPE</code>. 「rowType」- 行类型
     */
    @Override
    public UiField setRowType(String rowType) {
        this.rowType = rowType;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public UiField setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public UiField setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public UiField setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public UiField setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public UiField setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public UiField setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public UiField setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_FIELD.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_FIELD.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public UiField setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final UiField other = (UiField) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        }
        else if (!this.key.equals(other.key))
            return false;
        if (this.xPoint == null) {
            if (other.xPoint != null)
                return false;
        }
        else if (!this.xPoint.equals(other.xPoint))
            return false;
        if (this.yPoint == null) {
            if (other.yPoint != null)
                return false;
        }
        else if (!this.yPoint.equals(other.yPoint))
            return false;
        if (this.label == null) {
            if (other.label != null)
                return false;
        }
        else if (!this.label.equals(other.label))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.span == null) {
            if (other.span != null)
                return false;
        }
        else if (!this.span.equals(other.span))
            return false;
        if (this.hidden == null) {
            if (other.hidden != null)
                return false;
        }
        else if (!this.hidden.equals(other.hidden))
            return false;
        if (this.render == null) {
            if (other.render != null)
                return false;
        }
        else if (!this.render.equals(other.render))
            return false;
        if (this.container == null) {
            if (other.container != null)
                return false;
        }
        else if (!this.container.equals(other.container))
            return false;
        if (this.optionJsx == null) {
            if (other.optionJsx != null)
                return false;
        }
        else if (!this.optionJsx.equals(other.optionJsx))
            return false;
        if (this.optionConfig == null) {
            if (other.optionConfig != null)
                return false;
        }
        else if (!this.optionConfig.equals(other.optionConfig))
            return false;
        if (this.optionItem == null) {
            if (other.optionItem != null)
                return false;
        }
        else if (!this.optionItem.equals(other.optionItem))
            return false;
        if (this.rules == null) {
            if (other.rules != null)
                return false;
        }
        else if (!this.rules.equals(other.rules))
            return false;
        if (this.controlId == null) {
            if (other.controlId != null)
                return false;
        }
        else if (!this.controlId.equals(other.controlId))
            return false;
        if (this.rowType == null) {
            if (other.rowType != null)
                return false;
        }
        else if (!this.rowType.equals(other.rowType))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        }
        else if (!this.active.equals(other.active))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        }
        else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        }
        else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        }
        else if (!this.language.equals(other.language))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.xPoint == null) ? 0 : this.xPoint.hashCode());
        result = prime * result + ((this.yPoint == null) ? 0 : this.yPoint.hashCode());
        result = prime * result + ((this.label == null) ? 0 : this.label.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.span == null) ? 0 : this.span.hashCode());
        result = prime * result + ((this.hidden == null) ? 0 : this.hidden.hashCode());
        result = prime * result + ((this.render == null) ? 0 : this.render.hashCode());
        result = prime * result + ((this.container == null) ? 0 : this.container.hashCode());
        result = prime * result + ((this.optionJsx == null) ? 0 : this.optionJsx.hashCode());
        result = prime * result + ((this.optionConfig == null) ? 0 : this.optionConfig.hashCode());
        result = prime * result + ((this.optionItem == null) ? 0 : this.optionItem.hashCode());
        result = prime * result + ((this.rules == null) ? 0 : this.rules.hashCode());
        result = prime * result + ((this.controlId == null) ? 0 : this.controlId.hashCode());
        result = prime * result + ((this.rowType == null) ? 0 : this.rowType.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UiField (");

        sb.append(key);
        sb.append(", ").append(xPoint);
        sb.append(", ").append(yPoint);
        sb.append(", ").append(label);
        sb.append(", ").append(name);
        sb.append(", ").append(span);
        sb.append(", ").append(hidden);
        sb.append(", ").append(render);
        sb.append(", ").append(container);
        sb.append(", ").append(optionJsx);
        sb.append(", ").append(optionConfig);
        sb.append(", ").append(optionItem);
        sb.append(", ").append(rules);
        sb.append(", ").append(controlId);
        sb.append(", ").append(rowType);
        sb.append(", ").append(active);
        sb.append(", ").append(sigma);
        sb.append(", ").append(metadata);
        sb.append(", ").append(language);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUiField from) {
        setKey(from.getKey());
        setXPoint(from.getXPoint());
        setYPoint(from.getYPoint());
        setLabel(from.getLabel());
        setName(from.getName());
        setSpan(from.getSpan());
        setHidden(from.getHidden());
        setRender(from.getRender());
        setContainer(from.getContainer());
        setOptionJsx(from.getOptionJsx());
        setOptionConfig(from.getOptionConfig());
        setOptionItem(from.getOptionItem());
        setRules(from.getRules());
        setControlId(from.getControlId());
        setRowType(from.getRowType());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IUiField> E into(E into) {
        into.from(this);
        return into;
    }
}
