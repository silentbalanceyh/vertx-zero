/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables;


import cn.vertxup.ui.domain.Db;
import cn.vertxup.ui.domain.Keys;
import cn.vertxup.ui.domain.tables.records.UiListQrRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UiListQr extends TableImpl<UiListQrRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.UI_LIST_QR</code>
     */
    public static final UiListQr UI_LIST_QR = new UiListQr();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.KEY</code>. 「key」- 查询记录ID
     */
    public final TableField<UiListQrRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 查询记录ID");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.NAME</code>. 「name」- 视图名称，每个
     * MATRIX 对应一个视图
     */
    public final TableField<UiListQrRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 视图名称，每个 MATRIX 对应一个视图");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.CODE</code>. 「code」- 系统编码
     */
    public final TableField<UiListQrRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 系统编码");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.SORT</code>. 「sort」- QR的顺序
     */
    public final TableField<UiListQrRecord, Integer> SORT = createField(DSL.name("SORT"), SQLDataType.INTEGER, this, "「sort」- QR的顺序");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.VIEW</code>. 「view」- 视图名
     */
    public final TableField<UiListQrRecord, String> VIEW = createField(DSL.name("VIEW"), SQLDataType.VARCHAR(96), this, "「view」- 视图名");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.POSITION</code>. 「position」-
     * 当前视图的模块位置，比页面低一个维度
     */
    public final TableField<UiListQrRecord, String> POSITION = createField(DSL.name("POSITION"), SQLDataType.VARCHAR(96), this, "「position」- 当前视图的模块位置，比页面低一个维度");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.TITLE</code>. 「title」-
     * 视图标题，用户输入，可选择
     */
    public final TableField<UiListQrRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(255), this, "「title」- 视图标题，用户输入，可选择");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.PROJECTION</code>. 「projection」-
     * 该资源的列定义
     */
    public final TableField<UiListQrRecord, String> PROJECTION = createField(DSL.name("PROJECTION"), SQLDataType.CLOB, this, "「projection」- 该资源的列定义");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.CRITERIA</code>. 「criteria」-
     * 该资源的行查询
     */
    public final TableField<UiListQrRecord, String> CRITERIA = createField(DSL.name("CRITERIA"), SQLDataType.CLOB, this, "「criteria」- 该资源的行查询");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.ROWS</code>. 「rows」- 该资源针对保存的行进行过滤
     */
    public final TableField<UiListQrRecord, String> ROWS = createField(DSL.name("ROWS"), SQLDataType.CLOB, this, "「rows」- 该资源针对保存的行进行过滤");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.UI_CONFIG</code>. 「uiConfig」- 界面配置
     */
    public final TableField<UiListQrRecord, String> UI_CONFIG = createField(DSL.name("UI_CONFIG"), SQLDataType.CLOB, this, "「uiConfig」- 界面配置");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.QR_COMPONENT</code>.
     * 「qrComponent」- 查询条件专用组件
     */
    public final TableField<UiListQrRecord, String> QR_COMPONENT = createField(DSL.name("QR_COMPONENT"), SQLDataType.VARCHAR(255), this, "「qrComponent」- 查询条件专用组件");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.QR_CONFIG</code>. 「qrConfig」-
     * 查询组件专用配置
     */
    public final TableField<UiListQrRecord, String> QR_CONFIG = createField(DSL.name("QR_CONFIG"), SQLDataType.CLOB, this, "「qrConfig」- 查询组件专用配置");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.SIGMA</code>. 「sigma」- 用户组绑定的统一标识
     */
    public final TableField<UiListQrRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(128), this, "「sigma」- 用户组绑定的统一标识");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<UiListQrRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<UiListQrRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    public final TableField<UiListQrRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<UiListQrRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public final TableField<UiListQrRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<UiListQrRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.UI_LIST_QR.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public final TableField<UiListQrRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private UiListQr(Name alias, Table<UiListQrRecord> aliased) {
        this(alias, aliased, null);
    }

    private UiListQr(Name alias, Table<UiListQrRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_LIST_QR</code> table reference
     */
    public UiListQr(String alias) {
        this(DSL.name(alias), UI_LIST_QR);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_LIST_QR</code> table reference
     */
    public UiListQr(Name alias) {
        this(alias, UI_LIST_QR);
    }

    /**
     * Create a <code>DB_ETERNAL.UI_LIST_QR</code> table reference
     */
    public UiListQr() {
        this(DSL.name("UI_LIST_QR"), null);
    }

    public <O extends Record> UiListQr(Table<O> child, ForeignKey<O, UiListQrRecord> key) {
        super(child, key, UI_LIST_QR);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UiListQrRecord> getRecordType() {
        return UiListQrRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<UiListQrRecord> getPrimaryKey() {
        return Keys.KEY_UI_LIST_QR_PRIMARY;
    }

    @Override
    public List<UniqueKey<UiListQrRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_UI_LIST_QR_SIGMA, Keys.KEY_UI_LIST_QR_SIGMA_2);
    }

    @Override
    public UiListQr as(String alias) {
        return new UiListQr(DSL.name(alias), this);
    }

    @Override
    public UiListQr as(Name alias) {
        return new UiListQr(alias, this);
    }

    @Override
    public UiListQr as(Table<?> alias) {
        return new UiListQr(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UiListQr rename(String name) {
        return new UiListQr(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UiListQr rename(Name name) {
        return new UiListQr(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UiListQr rename(Table<?> name) {
        return new UiListQr(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<String, String, String, Integer, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row21) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function21<? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function21<? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
