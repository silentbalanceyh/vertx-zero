/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IUiListQr extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.KEY</code>. 「key」- 查询记录ID
     */
    public IUiListQr setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.KEY</code>. 「key」- 查询记录ID
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.NAME</code>. 「name」- 视图名称，每个
     * MATRIX 对应一个视图
     */
    public IUiListQr setName(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.NAME</code>. 「name」- 视图名称，每个
     * MATRIX 对应一个视图
     */
    public String getName();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.CODE</code>. 「code」- 系统编码
     */
    public IUiListQr setCode(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.CODE</code>. 「code」- 系统编码
     */
    public String getCode();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.SORT</code>. 「sort」- QR的顺序
     */
    public IUiListQr setSort(Integer value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.SORT</code>. 「sort」- QR的顺序
     */
    public Integer getSort();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.VIEW</code>. 「view」- 视图名
     */
    public IUiListQr setView(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.VIEW</code>. 「view」- 视图名
     */
    public String getView();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.POSITION</code>. 「position」-
     * 当前视图的模块位置，比页面低一个维度
     */
    public IUiListQr setPosition(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.POSITION</code>. 「position」-
     * 当前视图的模块位置，比页面低一个维度
     */
    public String getPosition();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.TITLE</code>. 「title」-
     * 视图标题，用户输入，可选择
     */
    public IUiListQr setTitle(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.TITLE</code>. 「title」-
     * 视图标题，用户输入，可选择
     */
    public String getTitle();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.PROJECTION</code>. 「projection」-
     * 该资源的列定义
     */
    public IUiListQr setProjection(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.PROJECTION</code>. 「projection」-
     * 该资源的列定义
     */
    public String getProjection();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.CRITERIA</code>. 「criteria」-
     * 该资源的行查询
     */
    public IUiListQr setCriteria(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.CRITERIA</code>. 「criteria」-
     * 该资源的行查询
     */
    public String getCriteria();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.ROWS</code>. 「rows」- 该资源针对保存的行进行过滤
     */
    public IUiListQr setRows(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.ROWS</code>. 「rows」- 该资源针对保存的行进行过滤
     */
    public String getRows();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.UI_CONFIG</code>. 「uiConfig」- 界面配置
     */
    public IUiListQr setUiConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.UI_CONFIG</code>. 「uiConfig」- 界面配置
     */
    public String getUiConfig();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.QR_COMPONENT</code>.
     * 「qrComponent」- 查询条件专用组件
     */
    public IUiListQr setQrComponent(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.QR_COMPONENT</code>.
     * 「qrComponent」- 查询条件专用组件
     */
    public String getQrComponent();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.QR_CONFIG</code>. 「qrConfig」-
     * 查询组件专用配置
     */
    public IUiListQr setQrConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.QR_CONFIG</code>. 「qrConfig」-
     * 查询组件专用配置
     */
    public String getQrConfig();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.SIGMA</code>. 「sigma」- 用户组绑定的统一标识
     */
    public IUiListQr setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.SIGMA</code>. 「sigma」- 用户组绑定的统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IUiListQr setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.ACTIVE</code>. 「active」- 是否启用
     */
    public IUiListQr setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    public IUiListQr setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public IUiListQr setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public IUiListQr setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public IUiListQr setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_LIST_QR.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public IUiListQr setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_LIST_QR.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IUiListQr
     */
    public void from(IUiListQr from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IUiListQr
     */
    public <E extends IUiListQr> E into(E into);

        @Override
        public default IUiListQr fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setName,json::getString,"NAME","java.lang.String");
                setOrThrow(this::setCode,json::getString,"CODE","java.lang.String");
                setOrThrow(this::setSort,json::getInteger,"SORT","java.lang.Integer");
                setOrThrow(this::setView,json::getString,"VIEW","java.lang.String");
                setOrThrow(this::setPosition,json::getString,"POSITION","java.lang.String");
                setOrThrow(this::setTitle,json::getString,"TITLE","java.lang.String");
                setOrThrow(this::setProjection,json::getString,"PROJECTION","java.lang.String");
                setOrThrow(this::setCriteria,json::getString,"CRITERIA","java.lang.String");
                setOrThrow(this::setRows,json::getString,"ROWS","java.lang.String");
                setOrThrow(this::setUiConfig,json::getString,"UI_CONFIG","java.lang.String");
                setOrThrow(this::setQrComponent,json::getString,"QR_COMPONENT","java.lang.String");
                setOrThrow(this::setQrConfig,json::getString,"QR_CONFIG","java.lang.String");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                setOrThrow(this::setUpdatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"UPDATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setUpdatedBy,json::getString,"UPDATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("NAME",getName());
                json.put("CODE",getCode());
                json.put("SORT",getSort());
                json.put("VIEW",getView());
                json.put("POSITION",getPosition());
                json.put("TITLE",getTitle());
                json.put("PROJECTION",getProjection());
                json.put("CRITERIA",getCriteria());
                json.put("ROWS",getRows());
                json.put("UI_CONFIG",getUiConfig());
                json.put("QR_COMPONENT",getQrComponent());
                json.put("QR_CONFIG",getQrConfig());
                json.put("SIGMA",getSigma());
                json.put("LANGUAGE",getLanguage());
                json.put("ACTIVE",getActive());
                json.put("METADATA",getMetadata());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                json.put("UPDATED_AT",getUpdatedAt()==null?null:getUpdatedAt().toString());
                json.put("UPDATED_BY",getUpdatedBy());
                return json;
        }

}
