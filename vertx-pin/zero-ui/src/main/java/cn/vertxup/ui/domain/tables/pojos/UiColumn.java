/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables.pojos;


import cn.vertxup.ui.domain.tables.interfaces.IUiColumn;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UiColumn implements VertxPojo, IUiColumn {

    private static final long serialVersionUID = 1L;

    private String key;
    private String title;
    private String dataIndex;
    private Integer position;
    private String render;
    private Integer width;
    private Boolean fixed;
    private String className;
    private Boolean sorter;
    private String filterType;
    private String filterConfig;
    private String empty;
    private String mapping;
    private String config;
    private String option;
    private String format;
    private String datum;
    private String controlId;
    private Boolean active;
    private String sigma;
    private String metadata;
    private String language;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public UiColumn() {}

    public UiColumn(IUiColumn value) {
        this.key = value.getKey();
        this.title = value.getTitle();
        this.dataIndex = value.getDataIndex();
        this.position = value.getPosition();
        this.render = value.getRender();
        this.width = value.getWidth();
        this.fixed = value.getFixed();
        this.className = value.getClassName();
        this.sorter = value.getSorter();
        this.filterType = value.getFilterType();
        this.filterConfig = value.getFilterConfig();
        this.empty = value.getEmpty();
        this.mapping = value.getMapping();
        this.config = value.getConfig();
        this.option = value.getOption();
        this.format = value.getFormat();
        this.datum = value.getDatum();
        this.controlId = value.getControlId();
        this.active = value.getActive();
        this.sigma = value.getSigma();
        this.metadata = value.getMetadata();
        this.language = value.getLanguage();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public UiColumn(
        String key,
        String title,
        String dataIndex,
        Integer position,
        String render,
        Integer width,
        Boolean fixed,
        String className,
        Boolean sorter,
        String filterType,
        String filterConfig,
        String empty,
        String mapping,
        String config,
        String option,
        String format,
        String datum,
        String controlId,
        Boolean active,
        String sigma,
        String metadata,
        String language,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.title = title;
        this.dataIndex = dataIndex;
        this.position = position;
        this.render = render;
        this.width = width;
        this.fixed = fixed;
        this.className = className;
        this.sorter = sorter;
        this.filterType = filterType;
        this.filterConfig = filterConfig;
        this.empty = empty;
        this.mapping = mapping;
        this.config = config;
        this.option = option;
        this.format = format;
        this.datum = datum;
        this.controlId = controlId;
        this.active = active;
        this.sigma = sigma;
        this.metadata = metadata;
        this.language = language;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public UiColumn(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.KEY</code>. 「key」- 列主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.KEY</code>. 「key」- 列主键
     */
    @Override
    public UiColumn setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.TITLE</code>. 「title」- 列标题
     */
    @Override
    public String getTitle() {
        return this.title;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.TITLE</code>. 「title」- 列标题
     */
    @Override
    public UiColumn setTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.DATA_INDEX</code>. 「dataIndex」- 列名
     */
    @Override
    public String getDataIndex() {
        return this.dataIndex;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.DATA_INDEX</code>. 「dataIndex」- 列名
     */
    @Override
    public UiColumn setDataIndex(String dataIndex) {
        this.dataIndex = dataIndex;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.POSITION</code>. 「position」- 当前列的位置
     */
    @Override
    public Integer getPosition() {
        return this.position;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.POSITION</code>. 「position」- 当前列的位置
     */
    @Override
    public UiColumn setPosition(Integer position) {
        this.position = position;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.RENDER</code>. 「render」-
     * 使用的Render函数
     */
    @Override
    public String getRender() {
        return this.render;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.RENDER</code>. 「render」-
     * 使用的Render函数
     */
    @Override
    public UiColumn setRender(String render) {
        this.render = render;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.WIDTH</code>. 「width」- 当前列的宽度
     */
    @Override
    public Integer getWidth() {
        return this.width;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.WIDTH</code>. 「width」- 当前列的宽度
     */
    @Override
    public UiColumn setWidth(Integer width) {
        this.width = width;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.FIXED</code>. 「fixed」- 当前列是否固定
     */
    @Override
    public Boolean getFixed() {
        return this.fixed;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.FIXED</code>. 「fixed」- 当前列是否固定
     */
    @Override
    public UiColumn setFixed(Boolean fixed) {
        this.fixed = fixed;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.CLASS_NAME</code>. 「className」-
     * 当前列的特殊CSS类
     */
    @Override
    public String getClassName() {
        return this.className;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.CLASS_NAME</code>. 「className」-
     * 当前列的特殊CSS类
     */
    @Override
    public UiColumn setClassName(String className) {
        this.className = className;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.SORTER</code>. 「sorter」- 当前列是否支持排序
     */
    @Override
    public Boolean getSorter() {
        return this.sorter;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.SORTER</code>. 「sorter」- 当前列是否支持排序
     */
    @Override
    public UiColumn setSorter(Boolean sorter) {
        this.sorter = sorter;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.FILTER_TYPE</code>. 「filterType」-
     * $filter.type 支持列搜索时的搜索类型
     */
    @Override
    public String getFilterType() {
        return this.filterType;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.FILTER_TYPE</code>. 「filterType」-
     * $filter.type 支持列搜索时的搜索类型
     */
    @Override
    public UiColumn setFilterType(String filterType) {
        this.filterType = filterType;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.FILTER_CONFIG</code>.
     * 「filterConfig」- $filter.config 列搜索支持时的搜索配置
     */
    @Override
    public String getFilterConfig() {
        return this.filterConfig;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.FILTER_CONFIG</code>.
     * 「filterConfig」- $filter.config 列搜索支持时的搜索配置
     */
    @Override
    public UiColumn setFilterConfig(String filterConfig) {
        this.filterConfig = filterConfig;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.EMPTY</code>. 「empty」- $empty 专用
     */
    @Override
    public String getEmpty() {
        return this.empty;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.EMPTY</code>. 「empty」- $empty 专用
     */
    @Override
    public UiColumn setEmpty(String empty) {
        this.empty = empty;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.MAPPING</code>. 「mapping」-
     * $mapping专用
     */
    @Override
    public String getMapping() {
        return this.mapping;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.MAPPING</code>. 「mapping」-
     * $mapping专用
     */
    @Override
    public UiColumn setMapping(String mapping) {
        this.mapping = mapping;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.CONFIG</code>. 「config」- $config专用
     */
    @Override
    public String getConfig() {
        return this.config;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.CONFIG</code>. 「config」- $config专用
     */
    @Override
    public UiColumn setConfig(String config) {
        this.config = config;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.OPTION</code>. 「option」-
     * $option专用，executor时
     */
    @Override
    public String getOption() {
        return this.option;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.OPTION</code>. 「option」-
     * $option专用，executor时
     */
    @Override
    public UiColumn setOption(String option) {
        this.option = option;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.FORMAT</code>. 「format」-
     * $format时间格式专用
     */
    @Override
    public String getFormat() {
        return this.format;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.FORMAT</code>. 「format」-
     * $format时间格式专用
     */
    @Override
    public UiColumn setFormat(String format) {
        this.format = format;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.DATUM</code>. 「datum」- $datum专用
     */
    @Override
    public String getDatum() {
        return this.datum;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.DATUM</code>. 「datum」- $datum专用
     */
    @Override
    public UiColumn setDatum(String datum) {
        this.datum = datum;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.CONTROL_ID</code>. 「controlId」-
     * 关联的控件ID
     */
    @Override
    public String getControlId() {
        return this.controlId;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.CONTROL_ID</code>. 「controlId」-
     * 关联的控件ID
     */
    @Override
    public UiColumn setControlId(String controlId) {
        this.controlId = controlId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public UiColumn setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public UiColumn setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public UiColumn setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public UiColumn setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public UiColumn setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public UiColumn setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public UiColumn setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public UiColumn setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final UiColumn other = (UiColumn) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        }
        else if (!this.key.equals(other.key))
            return false;
        if (this.title == null) {
            if (other.title != null)
                return false;
        }
        else if (!this.title.equals(other.title))
            return false;
        if (this.dataIndex == null) {
            if (other.dataIndex != null)
                return false;
        }
        else if (!this.dataIndex.equals(other.dataIndex))
            return false;
        if (this.position == null) {
            if (other.position != null)
                return false;
        }
        else if (!this.position.equals(other.position))
            return false;
        if (this.render == null) {
            if (other.render != null)
                return false;
        }
        else if (!this.render.equals(other.render))
            return false;
        if (this.width == null) {
            if (other.width != null)
                return false;
        }
        else if (!this.width.equals(other.width))
            return false;
        if (this.fixed == null) {
            if (other.fixed != null)
                return false;
        }
        else if (!this.fixed.equals(other.fixed))
            return false;
        if (this.className == null) {
            if (other.className != null)
                return false;
        }
        else if (!this.className.equals(other.className))
            return false;
        if (this.sorter == null) {
            if (other.sorter != null)
                return false;
        }
        else if (!this.sorter.equals(other.sorter))
            return false;
        if (this.filterType == null) {
            if (other.filterType != null)
                return false;
        }
        else if (!this.filterType.equals(other.filterType))
            return false;
        if (this.filterConfig == null) {
            if (other.filterConfig != null)
                return false;
        }
        else if (!this.filterConfig.equals(other.filterConfig))
            return false;
        if (this.empty == null) {
            if (other.empty != null)
                return false;
        }
        else if (!this.empty.equals(other.empty))
            return false;
        if (this.mapping == null) {
            if (other.mapping != null)
                return false;
        }
        else if (!this.mapping.equals(other.mapping))
            return false;
        if (this.config == null) {
            if (other.config != null)
                return false;
        }
        else if (!this.config.equals(other.config))
            return false;
        if (this.option == null) {
            if (other.option != null)
                return false;
        }
        else if (!this.option.equals(other.option))
            return false;
        if (this.format == null) {
            if (other.format != null)
                return false;
        }
        else if (!this.format.equals(other.format))
            return false;
        if (this.datum == null) {
            if (other.datum != null)
                return false;
        }
        else if (!this.datum.equals(other.datum))
            return false;
        if (this.controlId == null) {
            if (other.controlId != null)
                return false;
        }
        else if (!this.controlId.equals(other.controlId))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        }
        else if (!this.active.equals(other.active))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        }
        else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        }
        else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        }
        else if (!this.language.equals(other.language))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.title == null) ? 0 : this.title.hashCode());
        result = prime * result + ((this.dataIndex == null) ? 0 : this.dataIndex.hashCode());
        result = prime * result + ((this.position == null) ? 0 : this.position.hashCode());
        result = prime * result + ((this.render == null) ? 0 : this.render.hashCode());
        result = prime * result + ((this.width == null) ? 0 : this.width.hashCode());
        result = prime * result + ((this.fixed == null) ? 0 : this.fixed.hashCode());
        result = prime * result + ((this.className == null) ? 0 : this.className.hashCode());
        result = prime * result + ((this.sorter == null) ? 0 : this.sorter.hashCode());
        result = prime * result + ((this.filterType == null) ? 0 : this.filterType.hashCode());
        result = prime * result + ((this.filterConfig == null) ? 0 : this.filterConfig.hashCode());
        result = prime * result + ((this.empty == null) ? 0 : this.empty.hashCode());
        result = prime * result + ((this.mapping == null) ? 0 : this.mapping.hashCode());
        result = prime * result + ((this.config == null) ? 0 : this.config.hashCode());
        result = prime * result + ((this.option == null) ? 0 : this.option.hashCode());
        result = prime * result + ((this.format == null) ? 0 : this.format.hashCode());
        result = prime * result + ((this.datum == null) ? 0 : this.datum.hashCode());
        result = prime * result + ((this.controlId == null) ? 0 : this.controlId.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UiColumn (");

        sb.append(key);
        sb.append(", ").append(title);
        sb.append(", ").append(dataIndex);
        sb.append(", ").append(position);
        sb.append(", ").append(render);
        sb.append(", ").append(width);
        sb.append(", ").append(fixed);
        sb.append(", ").append(className);
        sb.append(", ").append(sorter);
        sb.append(", ").append(filterType);
        sb.append(", ").append(filterConfig);
        sb.append(", ").append(empty);
        sb.append(", ").append(mapping);
        sb.append(", ").append(config);
        sb.append(", ").append(option);
        sb.append(", ").append(format);
        sb.append(", ").append(datum);
        sb.append(", ").append(controlId);
        sb.append(", ").append(active);
        sb.append(", ").append(sigma);
        sb.append(", ").append(metadata);
        sb.append(", ").append(language);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUiColumn from) {
        setKey(from.getKey());
        setTitle(from.getTitle());
        setDataIndex(from.getDataIndex());
        setPosition(from.getPosition());
        setRender(from.getRender());
        setWidth(from.getWidth());
        setFixed(from.getFixed());
        setClassName(from.getClassName());
        setSorter(from.getSorter());
        setFilterType(from.getFilterType());
        setFilterConfig(from.getFilterConfig());
        setEmpty(from.getEmpty());
        setMapping(from.getMapping());
        setConfig(from.getConfig());
        setOption(from.getOption());
        setFormat(from.getFormat());
        setDatum(from.getDatum());
        setControlId(from.getControlId());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IUiColumn> E into(E into) {
        into.from(this);
        return into;
    }
}
