/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables;


import cn.vertxup.ui.domain.Db;
import cn.vertxup.ui.domain.Keys;
import cn.vertxup.ui.domain.tables.records.UiVisitorRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UiVisitor extends TableImpl<UiVisitorRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.UI_VISITOR</code>
     */
    public static final UiVisitor UI_VISITOR = new UiVisitor();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.UI_VISITOR.IDENTIFIER</code>. 「identifier」-
     * 维度1：标识模型
     */
    public final TableField<UiVisitorRecord, String> IDENTIFIER = createField(DSL.name("IDENTIFIER"), SQLDataType.VARCHAR(36).nullable(false), this, "「identifier」- 维度1：标识模型");
    /**
     * The column <code>DB_ETERNAL.UI_VISITOR.PAGE</code>. 「page」- 维度2：页面ID
     */
    public final TableField<UiVisitorRecord, String> PAGE = createField(DSL.name("PAGE"), SQLDataType.VARCHAR(36).nullable(false), this, "「page」- 维度2：页面ID");
    /**
     * The column <code>DB_ETERNAL.UI_VISITOR.PATH</code>. 「path」- 维度3：路径信息，view
     * + position
     */
    public final TableField<UiVisitorRecord, String> PATH = createField(DSL.name("PATH"), SQLDataType.VARCHAR(128).nullable(false), this, "「path」- 维度3：路径信息，view + position");
    /**
     * The column <code>DB_ETERNAL.UI_VISITOR.TYPE</code>. 「type」- 维度4：操作类型：List
     * / Form 或其他
     */
    public final TableField<UiVisitorRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(36).nullable(false), this, "「type」- 维度4：操作类型：List / Form 或其他");
    /**
     * The column <code>DB_ETERNAL.UI_VISITOR.CONTROL_ID</code>. 「controlId」-
     * 挂载专用的ID：List / Form 都可用
     */
    public final TableField<UiVisitorRecord, String> CONTROL_ID = createField(DSL.name("CONTROL_ID"), SQLDataType.VARCHAR(36), this, "「controlId」- 挂载专用的ID：List / Form 都可用");
    /**
     * The column <code>DB_ETERNAL.UI_VISITOR.RESOURCE_ID</code>. 「resourceId」-
     * 关联资源ID
     */
    public final TableField<UiVisitorRecord, String> RESOURCE_ID = createField(DSL.name("RESOURCE_ID"), SQLDataType.VARCHAR(36), this, "「resourceId」- 关联资源ID");
    /**
     * The column <code>DB_ETERNAL.UI_VISITOR.SIGMA</code>. 「sigma」- 高维度：统一标识符
     */
    public final TableField<UiVisitorRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(128).nullable(false), this, "「sigma」- 高维度：统一标识符");
    /**
     * The column <code>DB_ETERNAL.UI_VISITOR.METADATA</code>. 「metadata」-
     * 附加配置数据
     */
    public final TableField<UiVisitorRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>DB_ETERNAL.UI_VISITOR.RUN_COMPONENT</code>.
     * 「runComponent」- 执行组件，扩展时专用
     */
    public final TableField<UiVisitorRecord, String> RUN_COMPONENT = createField(DSL.name("RUN_COMPONENT"), SQLDataType.CLOB, this, "「runComponent」- 执行组件，扩展时专用");

    private UiVisitor(Name alias, Table<UiVisitorRecord> aliased) {
        this(alias, aliased, null);
    }

    private UiVisitor(Name alias, Table<UiVisitorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_VISITOR</code> table reference
     */
    public UiVisitor(String alias) {
        this(DSL.name(alias), UI_VISITOR);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_VISITOR</code> table reference
     */
    public UiVisitor(Name alias) {
        this(alias, UI_VISITOR);
    }

    /**
     * Create a <code>DB_ETERNAL.UI_VISITOR</code> table reference
     */
    public UiVisitor() {
        this(DSL.name("UI_VISITOR"), null);
    }

    public <O extends Record> UiVisitor(Table<O> child, ForeignKey<O, UiVisitorRecord> key) {
        super(child, key, UI_VISITOR);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UiVisitorRecord> getRecordType() {
        return UiVisitorRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<UiVisitorRecord> getPrimaryKey() {
        return Keys.KEY_UI_VISITOR_PRIMARY;
    }

    @Override
    public UiVisitor as(String alias) {
        return new UiVisitor(DSL.name(alias), this);
    }

    @Override
    public UiVisitor as(Name alias) {
        return new UiVisitor(alias, this);
    }

    @Override
    public UiVisitor as(Table<?> alias) {
        return new UiVisitor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UiVisitor rename(String name) {
        return new UiVisitor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UiVisitor rename(Name name) {
        return new UiVisitor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UiVisitor rename(Table<?> name) {
        return new UiVisitor(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
