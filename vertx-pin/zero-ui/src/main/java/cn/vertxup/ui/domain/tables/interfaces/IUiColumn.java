/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;

import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.setOrThrow;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IUiColumn extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.KEY</code>. 「key」- 列主键
     */
    public IUiColumn setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.KEY</code>. 「key」- 列主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.TITLE</code>. 「title」- 列标题
     */
    public IUiColumn setTitle(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.TITLE</code>. 「title」- 列标题
     */
    public String getTitle();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.DATA_INDEX</code>. 「dataIndex」- 列名
     */
    public IUiColumn setDataIndex(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.DATA_INDEX</code>. 「dataIndex」- 列名
     */
    public String getDataIndex();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.POSITION</code>. 「position」- 当前列的位置
     */
    public IUiColumn setPosition(Integer value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.POSITION</code>. 「position」- 当前列的位置
     */
    public Integer getPosition();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.RENDER</code>. 「render」-
     * 使用的Render函数
     */
    public IUiColumn setRender(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.RENDER</code>. 「render」-
     * 使用的Render函数
     */
    public String getRender();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.WIDTH</code>. 「width」- 当前列的宽度
     */
    public IUiColumn setWidth(Integer value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.WIDTH</code>. 「width」- 当前列的宽度
     */
    public Integer getWidth();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.FIXED</code>. 「fixed」- 当前列是否固定
     */
    public IUiColumn setFixed(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.FIXED</code>. 「fixed」- 当前列是否固定
     */
    public Boolean getFixed();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.CLASS_NAME</code>. 「className」-
     * 当前列的特殊CSS类
     */
    public IUiColumn setClassName(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.CLASS_NAME</code>. 「className」-
     * 当前列的特殊CSS类
     */
    public String getClassName();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.SORTER</code>. 「sorter」- 当前列是否支持排序
     */
    public IUiColumn setSorter(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.SORTER</code>. 「sorter」- 当前列是否支持排序
     */
    public Boolean getSorter();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.FILTER_TYPE</code>. 「filterType」-
     * $filter.type 支持列搜索时的搜索类型
     */
    public IUiColumn setFilterType(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.FILTER_TYPE</code>. 「filterType」-
     * $filter.type 支持列搜索时的搜索类型
     */
    public String getFilterType();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.FILTER_CONFIG</code>.
     * 「filterConfig」- $filter.config 列搜索支持时的搜索配置
     */
    public IUiColumn setFilterConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.FILTER_CONFIG</code>.
     * 「filterConfig」- $filter.config 列搜索支持时的搜索配置
     */
    public String getFilterConfig();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.EMPTY</code>. 「empty」- $empty 专用
     */
    public IUiColumn setEmpty(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.EMPTY</code>. 「empty」- $empty 专用
     */
    public String getEmpty();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.MAPPING</code>. 「mapping」-
     * $mapping专用
     */
    public IUiColumn setMapping(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.MAPPING</code>. 「mapping」-
     * $mapping专用
     */
    public String getMapping();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.CONFIG</code>. 「config」- $config专用
     */
    public IUiColumn setConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.CONFIG</code>. 「config」- $config专用
     */
    public String getConfig();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.OPTION</code>. 「option」-
     * $option专用，executor时
     */
    public IUiColumn setOption(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.OPTION</code>. 「option」-
     * $option专用，executor时
     */
    public String getOption();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.FORMAT</code>. 「format」-
     * $format时间格式专用
     */
    public IUiColumn setFormat(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.FORMAT</code>. 「format」-
     * $format时间格式专用
     */
    public String getFormat();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.DATUM</code>. 「datum」- $datum专用
     */
    public IUiColumn setDatum(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.DATUM</code>. 「datum」- $datum专用
     */
    public String getDatum();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.CONTROL_ID</code>. 「controlId」-
     * 关联的控件ID
     */
    public IUiColumn setControlId(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.CONTROL_ID</code>. 「controlId」-
     * 关联的控件ID
     */
    public String getControlId();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.ACTIVE</code>. 「active」- 是否启用
     */
    public IUiColumn setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.SIGMA</code>. 「sigma」- 统一标识
     */
    public IUiColumn setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.METADATA</code>. 「metadata」- 附加配置
     */
    public IUiColumn setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IUiColumn setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public IUiColumn setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IUiColumn setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public IUiColumn setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_COLUMN.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IUiColumn setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_COLUMN.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IUiColumn
     */
    public void from(IUiColumn from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IUiColumn
     */
    public <E extends IUiColumn> E into(E into);

        @Override
        public default IUiColumn fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setTitle,json::getString,"TITLE","java.lang.String");
                setOrThrow(this::setDataIndex,json::getString,"DATA_INDEX","java.lang.String");
                setOrThrow(this::setPosition,json::getInteger,"POSITION","java.lang.Integer");
                setOrThrow(this::setRender,json::getString,"RENDER","java.lang.String");
                setOrThrow(this::setWidth,json::getInteger,"WIDTH","java.lang.Integer");
                setOrThrow(this::setFixed,json::getBoolean,"FIXED","java.lang.Boolean");
                setOrThrow(this::setClassName,json::getString,"CLASS_NAME","java.lang.String");
                setOrThrow(this::setSorter,json::getBoolean,"SORTER","java.lang.Boolean");
                setOrThrow(this::setFilterType,json::getString,"FILTER_TYPE","java.lang.String");
                setOrThrow(this::setFilterConfig,json::getString,"FILTER_CONFIG","java.lang.String");
                setOrThrow(this::setEmpty,json::getString,"EMPTY","java.lang.String");
                setOrThrow(this::setMapping,json::getString,"MAPPING","java.lang.String");
                setOrThrow(this::setConfig,json::getString,"CONFIG","java.lang.String");
                setOrThrow(this::setOption,json::getString,"OPTION","java.lang.String");
                setOrThrow(this::setFormat,json::getString,"FORMAT","java.lang.String");
                setOrThrow(this::setDatum,json::getString,"DATUM","java.lang.String");
                setOrThrow(this::setControlId,json::getString,"CONTROL_ID","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                setOrThrow(this::setUpdatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"UPDATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setUpdatedBy,json::getString,"UPDATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("TITLE",getTitle());
                json.put("DATA_INDEX",getDataIndex());
                json.put("POSITION",getPosition());
                json.put("RENDER",getRender());
                json.put("WIDTH",getWidth());
                json.put("FIXED",getFixed());
                json.put("CLASS_NAME",getClassName());
                json.put("SORTER",getSorter());
                json.put("FILTER_TYPE",getFilterType());
                json.put("FILTER_CONFIG",getFilterConfig());
                json.put("EMPTY",getEmpty());
                json.put("MAPPING",getMapping());
                json.put("CONFIG",getConfig());
                json.put("OPTION",getOption());
                json.put("FORMAT",getFormat());
                json.put("DATUM",getDatum());
                json.put("CONTROL_ID",getControlId());
                json.put("ACTIVE",getActive());
                json.put("SIGMA",getSigma());
                json.put("METADATA",getMetadata());
                json.put("LANGUAGE",getLanguage());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                json.put("UPDATED_AT",getUpdatedAt()==null?null:getUpdatedAt().toString());
                json.put("UPDATED_BY",getUpdatedBy());
                return json;
        }

}
