/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables.daos;


import cn.vertxup.ui.domain.tables.UiList;
import cn.vertxup.ui.domain.tables.records.UiListRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UiListDao extends AbstractVertxDAO<UiListRecord, cn.vertxup.ui.domain.tables.pojos.UiList, String, Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>>, Future<cn.vertxup.ui.domain.tables.pojos.UiList>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<UiListRecord,cn.vertxup.ui.domain.tables.pojos.UiList,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public UiListDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(UiList.UI_LIST, cn.vertxup.ui.domain.tables.pojos.UiList.class, new JDBCClassicQueryExecutor<UiListRecord,cn.vertxup.ui.domain.tables.pojos.UiList,String>(configuration,cn.vertxup.ui.domain.tables.pojos.UiList.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.ui.domain.tables.pojos.UiList object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByName(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByCode(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByIdentifier(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.IDENTIFIER.in(values));
        }

        /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByIdentifier(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.IDENTIFIER.in(values),limit);
        }

        /**
     * Find records that have <code>V_QUERY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByVQuery(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.V_QUERY.in(values));
        }

        /**
     * Find records that have <code>V_QUERY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByVQuery(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.V_QUERY.in(values),limit);
        }

        /**
     * Find records that have <code>V_SEARCH IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByVSearch(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.V_SEARCH.in(values));
        }

        /**
     * Find records that have <code>V_SEARCH IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByVSearch(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.V_SEARCH.in(values),limit);
        }

        /**
     * Find records that have <code>V_TABLE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByVTable(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.V_TABLE.in(values));
        }

        /**
     * Find records that have <code>V_TABLE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByVTable(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.V_TABLE.in(values),limit);
        }

        /**
     * Find records that have <code>V_SEGMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByVSegment(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.V_SEGMENT.in(values));
        }

        /**
     * Find records that have <code>V_SEGMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByVSegment(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.V_SEGMENT.in(values),limit);
        }

        /**
     * Find records that have <code>DYNAMIC_COLUMN IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByDynamicColumn(Collection<Boolean> values) {
                return findManyByCondition(UiList.UI_LIST.DYNAMIC_COLUMN.in(values));
        }

        /**
     * Find records that have <code>DYNAMIC_COLUMN IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByDynamicColumn(Collection<Boolean> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.DYNAMIC_COLUMN.in(values),limit);
        }

        /**
     * Find records that have <code>DYNAMIC_SWITCH IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByDynamicSwitch(Collection<Boolean> values) {
                return findManyByCondition(UiList.UI_LIST.DYNAMIC_SWITCH.in(values));
        }

        /**
     * Find records that have <code>DYNAMIC_SWITCH IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByDynamicSwitch(Collection<Boolean> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.DYNAMIC_SWITCH.in(values),limit);
        }

        /**
     * Find records that have <code>OPTIONS_AJAX IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByOptionsAjax(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.OPTIONS_AJAX.in(values));
        }

        /**
     * Find records that have <code>OPTIONS_AJAX IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByOptionsAjax(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.OPTIONS_AJAX.in(values),limit);
        }

        /**
     * Find records that have <code>OPTIONS_SUBMIT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByOptionsSubmit(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.OPTIONS_SUBMIT.in(values));
        }

        /**
     * Find records that have <code>OPTIONS_SUBMIT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByOptionsSubmit(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.OPTIONS_SUBMIT.in(values),limit);
        }

        /**
     * Find records that have <code>OPTIONS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByOptions(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.OPTIONS.in(values));
        }

        /**
     * Find records that have <code>OPTIONS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByOptions(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.OPTIONS.in(values),limit);
        }

        /**
     * Find records that have <code>CLASS_COMBINER IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByClassCombiner(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.CLASS_COMBINER.in(values));
        }

        /**
     * Find records that have <code>CLASS_COMBINER IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByClassCombiner(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.CLASS_COMBINER.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(UiList.UI_LIST.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(UiList.UI_LIST.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(UiList.UI_LIST.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(UiList.UI_LIST.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.ui.domain.tables.pojos.UiList>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(UiList.UI_LIST.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<UiListRecord,cn.vertxup.ui.domain.tables.pojos.UiList,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<UiListRecord,cn.vertxup.ui.domain.tables.pojos.UiList,String>) super.queryExecutor();
        }
}
