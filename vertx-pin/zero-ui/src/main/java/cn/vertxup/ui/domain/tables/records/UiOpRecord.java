/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables.records;


import cn.vertxup.ui.domain.tables.UiOp;
import cn.vertxup.ui.domain.tables.interfaces.IUiOp;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record17;
import org.jooq.Row17;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UiOpRecord extends UpdatableRecordImpl<UiOpRecord> implements VertxPojo, Record17<String, String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String>, IUiOp {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.KEY</code>. 「key」- 操作主键
     */
    @Override
    public UiOpRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.KEY</code>. 「key」- 操作主键
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.ACTION</code>. 「action」-
     * S_ACTION中的code（权限检查专用）
     */
    @Override
    public UiOpRecord setAction(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.ACTION</code>. 「action」-
     * S_ACTION中的code（权限检查专用）
     */
    @Override
    public String getAction() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.TEXT</code>. 「text」- 该操作上的文字信息
     */
    @Override
    public UiOpRecord setText(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.TEXT</code>. 「text」- 该操作上的文字信息
     */
    @Override
    public String getText() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.EVENT</code>. 「event」- 操作中的 event 事件名称
     */
    @Override
    public UiOpRecord setEvent(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.EVENT</code>. 「event」- 操作中的 event 事件名称
     */
    @Override
    public String getEvent() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.CLIENT_KEY</code>. 「clientKey」-
     * 一般是Html中对应的key信息，如 $opSave
     */
    @Override
    public UiOpRecord setClientKey(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.CLIENT_KEY</code>. 「clientKey」-
     * 一般是Html中对应的key信息，如 $opSave
     */
    @Override
    public String getClientKey() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.CLIENT_ID</code>. 「clientId」-
     * 没有特殊情况，clientId = clientKey
     */
    @Override
    public UiOpRecord setClientId(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.CLIENT_ID</code>. 「clientId」-
     * 没有特殊情况，clientId = clientKey
     */
    @Override
    public String getClientId() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.CONFIG</code>. 「config」-
     * 该按钮操作对应的配置数据信息, icon, type
     */
    @Override
    public UiOpRecord setConfig(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.CONFIG</code>. 「config」-
     * 该按钮操作对应的配置数据信息, icon, type
     */
    @Override
    public String getConfig() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.PLUGIN</code>. 「plugin」- 该按钮中的插件，如
     * tooltip，component等
     */
    @Override
    public UiOpRecord setPlugin(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.PLUGIN</code>. 「plugin」- 该按钮中的插件，如
     * tooltip，component等
     */
    @Override
    public String getPlugin() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.CONTROL_ID</code>. 「controlId」- 挂载专用的ID
     */
    @Override
    public UiOpRecord setControlId(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.CONTROL_ID</code>. 「controlId」- 挂载专用的ID
     */
    @Override
    public String getControlId() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public UiOpRecord setActive(Boolean value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public UiOpRecord setSigma(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public UiOpRecord setMetadata(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public UiOpRecord setLanguage(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public UiOpRecord setCreatedAt(LocalDateTime value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public UiOpRecord setCreatedBy(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public UiOpRecord setUpdatedAt(LocalDateTime value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.UI_OP.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public UiOpRecord setUpdatedBy(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.UI_OP.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(16);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record17 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row17<String, String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    @Override
    public Row17<String, String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row17) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return UiOp.UI_OP.KEY;
    }

    @Override
    public Field<String> field2() {
        return UiOp.UI_OP.ACTION;
    }

    @Override
    public Field<String> field3() {
        return UiOp.UI_OP.TEXT;
    }

    @Override
    public Field<String> field4() {
        return UiOp.UI_OP.EVENT;
    }

    @Override
    public Field<String> field5() {
        return UiOp.UI_OP.CLIENT_KEY;
    }

    @Override
    public Field<String> field6() {
        return UiOp.UI_OP.CLIENT_ID;
    }

    @Override
    public Field<String> field7() {
        return UiOp.UI_OP.CONFIG;
    }

    @Override
    public Field<String> field8() {
        return UiOp.UI_OP.PLUGIN;
    }

    @Override
    public Field<String> field9() {
        return UiOp.UI_OP.CONTROL_ID;
    }

    @Override
    public Field<Boolean> field10() {
        return UiOp.UI_OP.ACTIVE;
    }

    @Override
    public Field<String> field11() {
        return UiOp.UI_OP.SIGMA;
    }

    @Override
    public Field<String> field12() {
        return UiOp.UI_OP.METADATA;
    }

    @Override
    public Field<String> field13() {
        return UiOp.UI_OP.LANGUAGE;
    }

    @Override
    public Field<LocalDateTime> field14() {
        return UiOp.UI_OP.CREATED_AT;
    }

    @Override
    public Field<String> field15() {
        return UiOp.UI_OP.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field16() {
        return UiOp.UI_OP.UPDATED_AT;
    }

    @Override
    public Field<String> field17() {
        return UiOp.UI_OP.UPDATED_BY;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getAction();
    }

    @Override
    public String component3() {
        return getText();
    }

    @Override
    public String component4() {
        return getEvent();
    }

    @Override
    public String component5() {
        return getClientKey();
    }

    @Override
    public String component6() {
        return getClientId();
    }

    @Override
    public String component7() {
        return getConfig();
    }

    @Override
    public String component8() {
        return getPlugin();
    }

    @Override
    public String component9() {
        return getControlId();
    }

    @Override
    public Boolean component10() {
        return getActive();
    }

    @Override
    public String component11() {
        return getSigma();
    }

    @Override
    public String component12() {
        return getMetadata();
    }

    @Override
    public String component13() {
        return getLanguage();
    }

    @Override
    public LocalDateTime component14() {
        return getCreatedAt();
    }

    @Override
    public String component15() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component16() {
        return getUpdatedAt();
    }

    @Override
    public String component17() {
        return getUpdatedBy();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getAction();
    }

    @Override
    public String value3() {
        return getText();
    }

    @Override
    public String value4() {
        return getEvent();
    }

    @Override
    public String value5() {
        return getClientKey();
    }

    @Override
    public String value6() {
        return getClientId();
    }

    @Override
    public String value7() {
        return getConfig();
    }

    @Override
    public String value8() {
        return getPlugin();
    }

    @Override
    public String value9() {
        return getControlId();
    }

    @Override
    public Boolean value10() {
        return getActive();
    }

    @Override
    public String value11() {
        return getSigma();
    }

    @Override
    public String value12() {
        return getMetadata();
    }

    @Override
    public String value13() {
        return getLanguage();
    }

    @Override
    public LocalDateTime value14() {
        return getCreatedAt();
    }

    @Override
    public String value15() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value16() {
        return getUpdatedAt();
    }

    @Override
    public String value17() {
        return getUpdatedBy();
    }

    @Override
    public UiOpRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public UiOpRecord value2(String value) {
        setAction(value);
        return this;
    }

    @Override
    public UiOpRecord value3(String value) {
        setText(value);
        return this;
    }

    @Override
    public UiOpRecord value4(String value) {
        setEvent(value);
        return this;
    }

    @Override
    public UiOpRecord value5(String value) {
        setClientKey(value);
        return this;
    }

    @Override
    public UiOpRecord value6(String value) {
        setClientId(value);
        return this;
    }

    @Override
    public UiOpRecord value7(String value) {
        setConfig(value);
        return this;
    }

    @Override
    public UiOpRecord value8(String value) {
        setPlugin(value);
        return this;
    }

    @Override
    public UiOpRecord value9(String value) {
        setControlId(value);
        return this;
    }

    @Override
    public UiOpRecord value10(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public UiOpRecord value11(String value) {
        setSigma(value);
        return this;
    }

    @Override
    public UiOpRecord value12(String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public UiOpRecord value13(String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public UiOpRecord value14(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public UiOpRecord value15(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public UiOpRecord value16(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public UiOpRecord value17(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public UiOpRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, String value9, Boolean value10, String value11, String value12, String value13, LocalDateTime value14, String value15, LocalDateTime value16, String value17) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUiOp from) {
        setKey(from.getKey());
        setAction(from.getAction());
        setText(from.getText());
        setEvent(from.getEvent());
        setClientKey(from.getClientKey());
        setClientId(from.getClientId());
        setConfig(from.getConfig());
        setPlugin(from.getPlugin());
        setControlId(from.getControlId());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IUiOp> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UiOpRecord
     */
    public UiOpRecord() {
        super(UiOp.UI_OP);
    }

    /**
     * Create a detached, initialised UiOpRecord
     */
    public UiOpRecord(String key, String action, String text, String event, String clientKey, String clientId, String config, String plugin, String controlId, Boolean active, String sigma, String metadata, String language, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(UiOp.UI_OP);

        setKey(key);
        setAction(action);
        setText(text);
        setEvent(event);
        setClientKey(clientKey);
        setClientId(clientId);
        setConfig(config);
        setPlugin(plugin);
        setControlId(controlId);
        setActive(active);
        setSigma(sigma);
        setMetadata(metadata);
        setLanguage(language);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
    }

    /**
     * Create a detached, initialised UiOpRecord
     */
    public UiOpRecord(cn.vertxup.ui.domain.tables.pojos.UiOp value) {
        super(UiOp.UI_OP);

        if (value != null) {
            setKey(value.getKey());
            setAction(value.getAction());
            setText(value.getText());
            setEvent(value.getEvent());
            setClientKey(value.getClientKey());
            setClientId(value.getClientId());
            setConfig(value.getConfig());
            setPlugin(value.getPlugin());
            setControlId(value.getControlId());
            setActive(value.getActive());
            setSigma(value.getSigma());
            setMetadata(value.getMetadata());
            setLanguage(value.getLanguage());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
        }
    }

        public UiOpRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
