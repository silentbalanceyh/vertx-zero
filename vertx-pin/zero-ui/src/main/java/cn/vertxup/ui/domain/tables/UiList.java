/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables;


import cn.vertxup.ui.domain.Db;
import cn.vertxup.ui.domain.Keys;
import cn.vertxup.ui.domain.tables.records.UiListRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UiList extends TableImpl<UiListRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.UI_LIST</code>
     */
    public static final UiList UI_LIST = new UiList();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.UI_LIST.KEY</code>. 「key」- 主键
     */
    public final TableField<UiListRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 主键");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.NAME</code>. 「name」- 名称
     */
    public final TableField<UiListRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 名称");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.CODE</code>. 「code」- 系统编码
     */
    public final TableField<UiListRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 系统编码");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.IDENTIFIER</code>. 「identifier」-
     * 表单所属的模型ID
     */
    public final TableField<UiListRecord, String> IDENTIFIER = createField(DSL.name("IDENTIFIER"), SQLDataType.VARCHAR(255), this, "「identifier」- 表单所属的模型ID");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.V_QUERY</code>. 「vQuery」- 连接query到
     * grid -&gt; query 节点
     */
    public final TableField<UiListRecord, String> V_QUERY = createField(DSL.name("V_QUERY"), SQLDataType.VARCHAR(36), this, "「vQuery」- 连接query到 grid -> query 节点");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.V_SEARCH</code>. 「vSearch」- 连接search到
     * grid -&gt; options 节点
     */
    public final TableField<UiListRecord, String> V_SEARCH = createField(DSL.name("V_SEARCH"), SQLDataType.VARCHAR(36), this, "「vSearch」- 连接search到 grid -> options 节点");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.V_TABLE</code>. 「vTable」- 连接table到
     * grid -&gt; table 节点
     */
    public final TableField<UiListRecord, String> V_TABLE = createField(DSL.name("V_TABLE"), SQLDataType.VARCHAR(36), this, "「vTable」- 连接table到 grid -> table 节点");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.V_SEGMENT</code>. 「vSegment」-
     * Json结构，对应到 grid -&gt; component 节点
     */
    public final TableField<UiListRecord, String> V_SEGMENT = createField(DSL.name("V_SEGMENT"), SQLDataType.CLOB, this, "「vSegment」- Json结构，对应到 grid -> component 节点");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.DYNAMIC_COLUMN</code>.
     * 「dynamicColumn」- 动态列？
     */
    public final TableField<UiListRecord, Boolean> DYNAMIC_COLUMN = createField(DSL.name("DYNAMIC_COLUMN"), SQLDataType.BIT, this, "「dynamicColumn」- 动态列？");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.DYNAMIC_SWITCH</code>.
     * 「dynamicSwitch」- 动态切换？
     */
    public final TableField<UiListRecord, Boolean> DYNAMIC_SWITCH = createField(DSL.name("DYNAMIC_SWITCH"), SQLDataType.BIT, this, "「dynamicSwitch」- 动态切换？");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.OPTIONS_AJAX</code>. 「optionsAjax」-
     * 所有 ajax系列的配置
     */
    public final TableField<UiListRecord, String> OPTIONS_AJAX = createField(DSL.name("OPTIONS_AJAX"), SQLDataType.CLOB, this, "「optionsAjax」- 所有 ajax系列的配置");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.OPTIONS_SUBMIT</code>.
     * 「optionsSubmit」- 所有提交类的配置
     */
    public final TableField<UiListRecord, String> OPTIONS_SUBMIT = createField(DSL.name("OPTIONS_SUBMIT"), SQLDataType.CLOB, this, "「optionsSubmit」- 所有提交类的配置");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.OPTIONS</code>. 「options」- 配置项
     */
    public final TableField<UiListRecord, String> OPTIONS = createField(DSL.name("OPTIONS"), SQLDataType.CLOB, this, "「options」- 配置项");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.CLASS_COMBINER</code>.
     * 「classCombiner」- 组装器
     */
    public final TableField<UiListRecord, String> CLASS_COMBINER = createField(DSL.name("CLASS_COMBINER"), SQLDataType.VARCHAR(255), this, "「classCombiner」- 组装器");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<UiListRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<UiListRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<UiListRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<UiListRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<UiListRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<UiListRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<UiListRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.UI_LIST.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<UiListRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private UiList(Name alias, Table<UiListRecord> aliased) {
        this(alias, aliased, null);
    }

    private UiList(Name alias, Table<UiListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_LIST</code> table reference
     */
    public UiList(String alias) {
        this(DSL.name(alias), UI_LIST);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_LIST</code> table reference
     */
    public UiList(Name alias) {
        this(alias, UI_LIST);
    }

    /**
     * Create a <code>DB_ETERNAL.UI_LIST</code> table reference
     */
    public UiList() {
        this(DSL.name("UI_LIST"), null);
    }

    public <O extends Record> UiList(Table<O> child, ForeignKey<O, UiListRecord> key) {
        super(child, key, UI_LIST);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UiListRecord> getRecordType() {
        return UiListRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<UiListRecord> getPrimaryKey() {
        return Keys.KEY_UI_LIST_PRIMARY;
    }

    @Override
    public List<UniqueKey<UiListRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_UI_LIST_CODE);
    }

    @Override
    public UiList as(String alias) {
        return new UiList(DSL.name(alias), this);
    }

    @Override
    public UiList as(Name alias) {
        return new UiList(alias, this);
    }

    @Override
    public UiList as(Table<?> alias) {
        return new UiList(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UiList rename(String name) {
        return new UiList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UiList rename(Name name) {
        return new UiList(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UiList rename(Table<?> name) {
        return new UiList(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<String, String, String, String, String, String, String, String, Boolean, Boolean, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row22) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function22<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function22<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
