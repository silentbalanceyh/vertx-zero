/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IUiControl extends VertxPojo, Serializable {

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.KEY</code>. 「key」- 主键
     */
    public IUiControl setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.KEY</code>. 「key」- 主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.SIGN</code>. 「sign」- 控件使用的签名基本信息
     */
    public IUiControl setSign(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.SIGN</code>. 「sign」- 控件使用的签名基本信息
     */
    public String getSign();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.PAGE_ID</code>. 「pageId」-
     * 当前控件所在的页面ID
     */
    public IUiControl setPageId(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.PAGE_ID</code>. 「pageId」-
     * 当前控件所在的页面ID
     */
    public String getPageId();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.TYPE</code>. 「type」-
     * 当前控件的类型：CONTAINER / COMPONENT / FORM / LIST，其中 FORM / LIST 需要访问子表
     */
    public IUiControl setType(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.TYPE</code>. 「type」-
     * 当前控件的类型：CONTAINER / COMPONENT / FORM / LIST，其中 FORM / LIST 需要访问子表
     */
    public String getType();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.CONTAINER_NAME</code>.
     * 「containerName」- 当前控件使用的容器名
     */
    public IUiControl setContainerName(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.CONTAINER_NAME</code>.
     * 「containerName」- 当前控件使用的容器名
     */
    public String getContainerName();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.CONTAINER_CONFIG</code>.
     * 「containerConfig」- 当前控件使用的容器配置
     */
    public IUiControl setContainerConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.CONTAINER_CONFIG</code>.
     * 「containerConfig」- 当前控件使用的容器配置
     */
    public String getContainerConfig();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.ASSIST</code>. 「assist」 -
     * 辅助数据（容器专用）
     */
    public IUiControl setAssist(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.ASSIST</code>. 「assist」 -
     * 辅助数据（容器专用）
     */
    public String getAssist();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.GRID</code>. 「grid」 - 容器专用
     */
    public IUiControl setGrid(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.GRID</code>. 「grid」 - 容器专用
     */
    public String getGrid();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.COMPONENT_NAME</code>.
     * 「componentName」- 当前控件使用的组件名
     */
    public IUiControl setComponentName(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.COMPONENT_NAME</code>.
     * 「componentName」- 当前控件使用的组件名
     */
    public String getComponentName();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.COMPONENT_CONFIG</code>.
     * 「componentConfig」- 当前控件使用的配置
     */
    public IUiControl setComponentConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.COMPONENT_CONFIG</code>.
     * 「componentConfig」- 当前控件使用的配置
     */
    public String getComponentConfig();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.COMPONENT_DATA</code>.
     * 「componentData」- 当前控件使用的数据，使用表达式结构
     */
    public IUiControl setComponentData(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.COMPONENT_DATA</code>.
     * 「componentData」- 当前控件使用的数据，使用表达式结构
     */
    public String getComponentData();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.ACTIVE</code>. 「active」- 是否启用
     */
    public IUiControl setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.SIGMA</code>. 「sigma」- 统一标识
     */
    public IUiControl setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.METADATA</code>. 「metadata」- 附加配置
     */
    public IUiControl setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IUiControl setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public IUiControl setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public IUiControl setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public IUiControl setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public IUiControl setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IUiControl
     */
    public void from(IUiControl from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IUiControl
     */
    public <E extends IUiControl> E into(E into);

        @Override
        public default IUiControl fromJson(io.vertx.core.json.JsonObject json) {
                setOrThrow(this::setKey,json::getString,"KEY","java.lang.String");
                setOrThrow(this::setSign,json::getString,"SIGN","java.lang.String");
                setOrThrow(this::setPageId,json::getString,"PAGE_ID","java.lang.String");
                setOrThrow(this::setType,json::getString,"TYPE","java.lang.String");
                setOrThrow(this::setContainerName,json::getString,"CONTAINER_NAME","java.lang.String");
                setOrThrow(this::setContainerConfig,json::getString,"CONTAINER_CONFIG","java.lang.String");
                setOrThrow(this::setAssist,json::getString,"ASSIST","java.lang.String");
                setOrThrow(this::setGrid,json::getString,"GRID","java.lang.String");
                setOrThrow(this::setComponentName,json::getString,"COMPONENT_NAME","java.lang.String");
                setOrThrow(this::setComponentConfig,json::getString,"COMPONENT_CONFIG","java.lang.String");
                setOrThrow(this::setComponentData,json::getString,"COMPONENT_DATA","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"ACTIVE","java.lang.Boolean");
                setOrThrow(this::setSigma,json::getString,"SIGMA","java.lang.String");
                setOrThrow(this::setMetadata,json::getString,"METADATA","java.lang.String");
                setOrThrow(this::setLanguage,json::getString,"LANGUAGE","java.lang.String");
                setOrThrow(this::setCreatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"CREATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setCreatedBy,json::getString,"CREATED_BY","java.lang.String");
                setOrThrow(this::setUpdatedAt,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"UPDATED_AT","java.time.LocalDateTime");
                setOrThrow(this::setUpdatedBy,json::getString,"UPDATED_BY","java.lang.String");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                json.put("KEY",getKey());
                json.put("SIGN",getSign());
                json.put("PAGE_ID",getPageId());
                json.put("TYPE",getType());
                json.put("CONTAINER_NAME",getContainerName());
                json.put("CONTAINER_CONFIG",getContainerConfig());
                json.put("ASSIST",getAssist());
                json.put("GRID",getGrid());
                json.put("COMPONENT_NAME",getComponentName());
                json.put("COMPONENT_CONFIG",getComponentConfig());
                json.put("COMPONENT_DATA",getComponentData());
                json.put("ACTIVE",getActive());
                json.put("SIGMA",getSigma());
                json.put("METADATA",getMetadata());
                json.put("LANGUAGE",getLanguage());
                json.put("CREATED_AT",getCreatedAt()==null?null:getCreatedAt().toString());
                json.put("CREATED_BY",getCreatedBy());
                json.put("UPDATED_AT",getUpdatedAt()==null?null:getUpdatedAt().toString());
                json.put("UPDATED_BY",getUpdatedBy());
                return json;
        }

}
