/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables;


import cn.vertxup.erp.domain.Db;
import cn.vertxup.erp.domain.Keys;
import cn.vertxup.erp.domain.tables.records.RCompanyCustomerRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class RCompanyCustomer extends TableImpl<RCompanyCustomerRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.R_COMPANY_CUSTOMER</code>
     */
    public static final RCompanyCustomer R_COMPANY_CUSTOMER = new RCompanyCustomer();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.R_COMPANY_CUSTOMER.COMPANY_ID</code>.
     * 「companyId」- 企业的ID
     */
    public final TableField<RCompanyCustomerRecord, String> COMPANY_ID = createField(DSL.name("COMPANY_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「companyId」- 企业的ID");
    /**
     * The column <code>DB_ETERNAL.R_COMPANY_CUSTOMER.CUSTOMER_ID</code>.
     * 「customerId」- 客户信息的ID
     */
    public final TableField<RCompanyCustomerRecord, String> CUSTOMER_ID = createField(DSL.name("CUSTOMER_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「customerId」- 客户信息的ID");
    /**
     * The column <code>DB_ETERNAL.R_COMPANY_CUSTOMER.COMMENT</code>. 「comment」-
     * 关系备注
     */
    public final TableField<RCompanyCustomerRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB, this, "「comment」- 关系备注");

    private RCompanyCustomer(Name alias, Table<RCompanyCustomerRecord> aliased) {
        this(alias, aliased, null);
    }

    private RCompanyCustomer(Name alias, Table<RCompanyCustomerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.R_COMPANY_CUSTOMER</code> table
     * reference
     */
    public RCompanyCustomer(String alias) {
        this(DSL.name(alias), R_COMPANY_CUSTOMER);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.R_COMPANY_CUSTOMER</code> table
     * reference
     */
    public RCompanyCustomer(Name alias) {
        this(alias, R_COMPANY_CUSTOMER);
    }

    /**
     * Create a <code>DB_ETERNAL.R_COMPANY_CUSTOMER</code> table reference
     */
    public RCompanyCustomer() {
        this(DSL.name("R_COMPANY_CUSTOMER"), null);
    }

    public <O extends Record> RCompanyCustomer(Table<O> child, ForeignKey<O, RCompanyCustomerRecord> key) {
        super(child, key, R_COMPANY_CUSTOMER);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RCompanyCustomerRecord> getRecordType() {
        return RCompanyCustomerRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<RCompanyCustomerRecord> getPrimaryKey() {
        return Keys.KEY_R_COMPANY_CUSTOMER_PRIMARY;
    }

    @Override
    public RCompanyCustomer as(String alias) {
        return new RCompanyCustomer(DSL.name(alias), this);
    }

    @Override
    public RCompanyCustomer as(Name alias) {
        return new RCompanyCustomer(alias, this);
    }

    @Override
    public RCompanyCustomer as(Table<?> alias) {
        return new RCompanyCustomer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RCompanyCustomer rename(String name) {
        return new RCompanyCustomer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RCompanyCustomer rename(Name name) {
        return new RCompanyCustomer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RCompanyCustomer rename(Table<?> name) {
        return new RCompanyCustomer(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
