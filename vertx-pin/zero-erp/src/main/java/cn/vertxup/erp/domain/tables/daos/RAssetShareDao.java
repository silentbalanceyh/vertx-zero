/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables.daos;


import cn.vertxup.erp.domain.tables.RAssetShare;
import cn.vertxup.erp.domain.tables.records.RAssetShareRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;
import org.jooq.Record3;

import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RAssetShareDao extends AbstractVertxDAO<RAssetShareRecord, cn.vertxup.erp.domain.tables.pojos.RAssetShare, Record3<String, String, String>, Future<List<cn.vertxup.erp.domain.tables.pojos.RAssetShare>>, Future<cn.vertxup.erp.domain.tables.pojos.RAssetShare>, Future<Integer>, Future<Record3<String, String, String>>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<RAssetShareRecord,cn.vertxup.erp.domain.tables.pojos.RAssetShare,Record3<String, String, String>> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public RAssetShareDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(RAssetShare.R_ASSET_SHARE, cn.vertxup.erp.domain.tables.pojos.RAssetShare.class, new JDBCClassicQueryExecutor<RAssetShareRecord,cn.vertxup.erp.domain.tables.pojos.RAssetShare,Record3<String, String, String>>(configuration,cn.vertxup.erp.domain.tables.pojos.RAssetShare.class,vertx));
        }

        @Override
        protected Record3<String, String, String> getId(cn.vertxup.erp.domain.tables.pojos.RAssetShare object) {
                return compositeKeyRecord(object.getAssetId(), object.getEntityType(), object.getEntityId());
        }

        /**
     * Find records that have <code>ENTITY_TYPE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.RAssetShare>> findManyByEntityType(Collection<String> values) {
                return findManyByCondition(RAssetShare.R_ASSET_SHARE.ENTITY_TYPE.in(values));
        }

        /**
     * Find records that have <code>ENTITY_TYPE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.RAssetShare>> findManyByEntityType(Collection<String> values, int limit) {
                return findManyByCondition(RAssetShare.R_ASSET_SHARE.ENTITY_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>ENTITY_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.RAssetShare>> findManyByEntityId(Collection<String> values) {
                return findManyByCondition(RAssetShare.R_ASSET_SHARE.ENTITY_ID.in(values));
        }

        /**
     * Find records that have <code>ENTITY_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.RAssetShare>> findManyByEntityId(Collection<String> values, int limit) {
                return findManyByCondition(RAssetShare.R_ASSET_SHARE.ENTITY_ID.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.RAssetShare>> findManyByComment(Collection<String> values) {
                return findManyByCondition(RAssetShare.R_ASSET_SHARE.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.RAssetShare>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(RAssetShare.R_ASSET_SHARE.COMMENT.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<RAssetShareRecord,cn.vertxup.erp.domain.tables.pojos.RAssetShare,Record3<String, String, String>> queryExecutor(){
                return (JDBCClassicQueryExecutor<RAssetShareRecord,cn.vertxup.erp.domain.tables.pojos.RAssetShare,Record3<String, String, String>>) super.queryExecutor();
        }
}
