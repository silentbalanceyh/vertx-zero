/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables;


import cn.vertxup.erp.domain.Db;
import cn.vertxup.erp.domain.Keys;
import cn.vertxup.erp.domain.tables.records.EContractRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EContract extends TableImpl<EContractRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.E_CONTRACT</code>
     */
    public static final EContract E_CONTRACT = new EContract();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.KEY</code>. 「key」- 合同主键
     */
    public final TableField<EContractRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 合同主键");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.NAME</code>. 「name」- 合同名称
     */
    public final TableField<EContractRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 合同名称");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.CODE</code>. 「code」- 合同编号
     */
    public final TableField<EContractRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 合同编号");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.DEPT_ID</code>. 「deptId」- 所属部门,
     * resource.departments
     */
    public final TableField<EContractRecord, String> DEPT_ID = createField(DSL.name("DEPT_ID"), SQLDataType.VARCHAR(36), this, "「deptId」- 所属部门, resource.departments");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.TYPE</code>. 「type」-
     * 合同分类，zero.contract
     */
    public final TableField<EContractRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(36), this, "「type」- 合同分类，zero.contract");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.STATUS</code>. 「status」-
     * 合同状态，zero.contract.status
     */
    public final TableField<EContractRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(36), this, "「status」- 合同状态，zero.contract.status");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.BUDGET</code>. 「budget」-
     * 所属预算，zero.contract.budget
     */
    public final TableField<EContractRecord, String> BUDGET = createField(DSL.name("BUDGET"), SQLDataType.VARCHAR(36), this, "「budget」- 所属预算，zero.contract.budget");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.LEVEL</code>. 「level」-
     * 合同级别，zero.contract.level
     */
    public final TableField<EContractRecord, String> LEVEL = createField(DSL.name("LEVEL"), SQLDataType.VARCHAR(36), this, "「level」- 合同级别，zero.contract.level");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.TITLE</code>. 「title」- 合同标题
     */
    public final TableField<EContractRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(255), this, "「title」- 合同标题");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.SUBJECT</code>. 「subject」- 合同目标
     */
    public final TableField<EContractRecord, String> SUBJECT = createField(DSL.name("SUBJECT"), SQLDataType.CLOB, this, "「subject」- 合同目标");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.DESCRIPTION</code>. 「description」-
     * 合同描述
     */
    public final TableField<EContractRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "「description」- 合同描述");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.AMOUNT</code>. 「amount」- 合同金额
     */
    public final TableField<EContractRecord, BigDecimal> AMOUNT = createField(DSL.name("AMOUNT"), SQLDataType.DECIMAL(18, 2), this, "「amount」- 合同金额");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.REMARK</code>. 「remark」- 合同备注
     */
    public final TableField<EContractRecord, String> REMARK = createField(DSL.name("REMARK"), SQLDataType.CLOB, this, "「remark」- 合同备注");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.PLAN_START_AT</code>.
     * 「planStartAt」- 开始日期
     */
    public final TableField<EContractRecord, LocalDateTime> PLAN_START_AT = createField(DSL.name("PLAN_START_AT"), SQLDataType.LOCALDATETIME(0), this, "「planStartAt」- 开始日期");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.PLAN_END_AT</code>. 「planEndAt」-
     * 结束日期
     */
    public final TableField<EContractRecord, LocalDateTime> PLAN_END_AT = createField(DSL.name("PLAN_END_AT"), SQLDataType.LOCALDATETIME(0), this, "「planEndAt」- 结束日期");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.START_AT</code>. 「startAt」- 实际开始日期
     */
    public final TableField<EContractRecord, LocalDateTime> START_AT = createField(DSL.name("START_AT"), SQLDataType.LOCALDATETIME(0), this, "「startAt」- 实际开始日期");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.END_AT</code>. 「endAt」- 实际结束日期
     */
    public final TableField<EContractRecord, LocalDateTime> END_AT = createField(DSL.name("END_AT"), SQLDataType.LOCALDATETIME(0), this, "「endAt」- 实际结束日期");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.SIGNED_BY</code>. 「signedBy」- 签订人
     */
    public final TableField<EContractRecord, String> SIGNED_BY = createField(DSL.name("SIGNED_BY"), SQLDataType.VARCHAR(36), this, "「signedBy」- 签订人");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.SIGNED_AT</code>. 「signedAt」- 签订时间
     */
    public final TableField<EContractRecord, LocalDateTime> SIGNED_AT = createField(DSL.name("SIGNED_AT"), SQLDataType.LOCALDATETIME(0), this, "「signedAt」- 签订时间");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.PARTY_A</code>. 「partyA」-
     * 甲方（关联公司ID，E_COMPANY）
     */
    public final TableField<EContractRecord, String> PARTY_A = createField(DSL.name("PARTY_A"), SQLDataType.VARCHAR(36), this, "「partyA」- 甲方（关联公司ID，E_COMPANY）");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.PARTY_B</code>. 「partyB」-
     * 乙方（关联客户ID，E_CUSTOMER）
     */
    public final TableField<EContractRecord, String> PARTY_B = createField(DSL.name("PARTY_B"), SQLDataType.VARCHAR(36), this, "「partyB」- 乙方（关联客户ID，E_CUSTOMER）");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.A_NAME</code>. 「aName」-
     * 甲方名称（个人为姓名/企业为企业名）
     */
    public final TableField<EContractRecord, String> A_NAME = createField(DSL.name("A_NAME"), SQLDataType.VARCHAR(255), this, "「aName」- 甲方名称（个人为姓名/企业为企业名）");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.A_PHONE</code>. 「aPhone」- 甲方电话
     */
    public final TableField<EContractRecord, String> A_PHONE = createField(DSL.name("A_PHONE"), SQLDataType.VARCHAR(20), this, "「aPhone」- 甲方电话");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.A_LEGAL</code>. 「aLegal」-
     * 甲方法人（企业合同专用）
     */
    public final TableField<EContractRecord, String> A_LEGAL = createField(DSL.name("A_LEGAL"), SQLDataType.VARCHAR(255), this, "「aLegal」- 甲方法人（企业合同专用）");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.A_ADDRESS</code>. 「aAddress」- 甲方地址
     */
    public final TableField<EContractRecord, String> A_ADDRESS = createField(DSL.name("A_ADDRESS"), SQLDataType.CLOB, this, "「aAddress」- 甲方地址");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.B_NAME</code>. 「bName」-
     * 乙方名称（个人为姓名/企业为企业名）
     */
    public final TableField<EContractRecord, String> B_NAME = createField(DSL.name("B_NAME"), SQLDataType.VARCHAR(255), this, "「bName」- 乙方名称（个人为姓名/企业为企业名）");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.B_PHONE</code>. 「bPhone」- 乙方人电话
     */
    public final TableField<EContractRecord, String> B_PHONE = createField(DSL.name("B_PHONE"), SQLDataType.VARCHAR(20), this, "「bPhone」- 乙方人电话");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.B_LEGAL</code>. 「bLegal」-
     * 乙方法人（企业合同专用）
     */
    public final TableField<EContractRecord, String> B_LEGAL = createField(DSL.name("B_LEGAL"), SQLDataType.VARCHAR(255), this, "「bLegal」- 乙方法人（企业合同专用）");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.B_ADDRESS</code>. 「bAddress」- 乙方地址
     */
    public final TableField<EContractRecord, String> B_ADDRESS = createField(DSL.name("B_ADDRESS"), SQLDataType.CLOB, this, "「bAddress」- 乙方地址");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<EContractRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<EContractRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.SIGMA</code>. 「sigma」-
     * 统一标识（公司所属应用）
     */
    public final TableField<EContractRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识（公司所属应用）");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<EContractRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<EContractRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public final TableField<EContractRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<EContractRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.E_CONTRACT.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public final TableField<EContractRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private EContract(Name alias, Table<EContractRecord> aliased) {
        this(alias, aliased, null);
    }

    private EContract(Name alias, Table<EContractRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.E_CONTRACT</code> table reference
     */
    public EContract(String alias) {
        this(DSL.name(alias), E_CONTRACT);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.E_CONTRACT</code> table reference
     */
    public EContract(Name alias) {
        this(alias, E_CONTRACT);
    }

    /**
     * Create a <code>DB_ETERNAL.E_CONTRACT</code> table reference
     */
    public EContract() {
        this(DSL.name("E_CONTRACT"), null);
    }

    public <O extends Record> EContract(Table<O> child, ForeignKey<O, EContractRecord> key) {
        super(child, key, E_CONTRACT);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EContractRecord> getRecordType() {
        return EContractRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<EContractRecord> getPrimaryKey() {
        return Keys.KEY_E_CONTRACT_PRIMARY;
    }

    @Override
    public List<UniqueKey<EContractRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_E_CONTRACT_CODE);
    }

    @Override
    public EContract as(String alias) {
        return new EContract(DSL.name(alias), this);
    }

    @Override
    public EContract as(Name alias) {
        return new EContract(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EContract rename(String name) {
        return new EContract(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EContract rename(Name name) {
        return new EContract(name, null);
    }
}
