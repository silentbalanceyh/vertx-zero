/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables;


import cn.vertxup.erp.domain.Db;
import cn.vertxup.erp.domain.Keys;
import cn.vertxup.erp.domain.tables.records.TVendorCheckOutRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TVendorCheckOut extends TableImpl<TVendorCheckOutRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.T_VENDOR_CHECK_OUT</code>
     */
    public static final TVendorCheckOut T_VENDOR_CHECK_OUT = new TVendorCheckOut();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.T_VENDOR_CHECK_OUT.KEY</code>. 「key」- Ticket
     * Primary Key
     */
    public final TableField<TVendorCheckOutRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- Ticket Primary Key");
    /**
     * The column <code>DB_ETERNAL.T_VENDOR_CHECK_OUT.COMMENT_EXTENSION</code>.
     * 「commentExtension」- Extension Comment
     */
    public final TableField<TVendorCheckOutRecord, String> COMMENT_EXTENSION = createField(DSL.name("COMMENT_EXTENSION"), SQLDataType.CLOB, this, "「commentExtension」- Extension Comment");
    /**
     * The column <code>DB_ETERNAL.T_VENDOR_CHECK_OUT.CLASSIFICATION</code>.
     * 「classification」- The ticket related business type
     */
    public final TableField<TVendorCheckOutRecord, String> CLASSIFICATION = createField(DSL.name("CLASSIFICATION"), SQLDataType.VARCHAR(64), this, "「classification」- The ticket related business type");
    /**
     * The column <code>DB_ETERNAL.T_VENDOR_CHECK_OUT.START_AT</code>.
     * 「startAt」- From
     */
    public final TableField<TVendorCheckOutRecord, LocalDateTime> START_AT = createField(DSL.name("START_AT"), SQLDataType.LOCALDATETIME(0), this, "「startAt」- From");
    /**
     * The column <code>DB_ETERNAL.T_VENDOR_CHECK_OUT.END_AT</code>. 「endAt」- To
     */
    public final TableField<TVendorCheckOutRecord, LocalDateTime> END_AT = createField(DSL.name("END_AT"), SQLDataType.LOCALDATETIME(0), this, "「endAt」- To");
    /**
     * The column <code>DB_ETERNAL.T_VENDOR_CHECK_OUT.DAYS</code>. 「days」-
     * Duration
     */
    public final TableField<TVendorCheckOutRecord, Integer> DAYS = createField(DSL.name("DAYS"), SQLDataType.INTEGER, this, "「days」- Duration");
    /**
     * The column <code>DB_ETERNAL.T_VENDOR_CHECK_OUT.LEAVE_AT</code>.
     * 「leaveAt」- To
     */
    public final TableField<TVendorCheckOutRecord, LocalDateTime> LEAVE_AT = createField(DSL.name("LEAVE_AT"), SQLDataType.LOCALDATETIME(0), this, "「leaveAt」- To");
    /**
     * The column <code>DB_ETERNAL.T_VENDOR_CHECK_OUT.REASON</code>. 「reason」-
     * The reason to be done
     */
    public final TableField<TVendorCheckOutRecord, String> REASON = createField(DSL.name("REASON"), SQLDataType.CLOB, this, "「reason」- The reason to be done");

    private TVendorCheckOut(Name alias, Table<TVendorCheckOutRecord> aliased) {
        this(alias, aliased, null);
    }

    private TVendorCheckOut(Name alias, Table<TVendorCheckOutRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.T_VENDOR_CHECK_OUT</code> table
     * reference
     */
    public TVendorCheckOut(String alias) {
        this(DSL.name(alias), T_VENDOR_CHECK_OUT);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.T_VENDOR_CHECK_OUT</code> table
     * reference
     */
    public TVendorCheckOut(Name alias) {
        this(alias, T_VENDOR_CHECK_OUT);
    }

    /**
     * Create a <code>DB_ETERNAL.T_VENDOR_CHECK_OUT</code> table reference
     */
    public TVendorCheckOut() {
        this(DSL.name("T_VENDOR_CHECK_OUT"), null);
    }

    public <O extends Record> TVendorCheckOut(Table<O> child, ForeignKey<O, TVendorCheckOutRecord> key) {
        super(child, key, T_VENDOR_CHECK_OUT);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TVendorCheckOutRecord> getRecordType() {
        return TVendorCheckOutRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<TVendorCheckOutRecord> getPrimaryKey() {
        return Keys.KEY_T_VENDOR_CHECK_OUT_PRIMARY;
    }

    @Override
    public TVendorCheckOut as(String alias) {
        return new TVendorCheckOut(DSL.name(alias), this);
    }

    @Override
    public TVendorCheckOut as(Name alias) {
        return new TVendorCheckOut(alias, this);
    }

    @Override
    public TVendorCheckOut as(Table<?> alias) {
        return new TVendorCheckOut(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TVendorCheckOut rename(String name) {
        return new TVendorCheckOut(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TVendorCheckOut rename(Name name) {
        return new TVendorCheckOut(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TVendorCheckOut rename(Table<?> name) {
        return new TVendorCheckOut(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, LocalDateTime, LocalDateTime, Integer, LocalDateTime, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
