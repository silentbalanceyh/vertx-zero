/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables;


import cn.vertxup.erp.domain.Db;
import cn.vertxup.erp.domain.Keys;
import cn.vertxup.erp.domain.tables.records.RTeamEmployeeRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class RTeamEmployee extends TableImpl<RTeamEmployeeRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.R_TEAM_EMPLOYEE</code>
     */
    public static final RTeamEmployee R_TEAM_EMPLOYEE = new RTeamEmployee();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.R_TEAM_EMPLOYEE.TEAM_ID</code>. 「teamId」-
     * 组的ID
     */
    public final TableField<RTeamEmployeeRecord, String> TEAM_ID = createField(DSL.name("TEAM_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「teamId」- 组的ID");
    /**
     * The column <code>DB_ETERNAL.R_TEAM_EMPLOYEE.EMPLOYEE_ID</code>.
     * 「employeeId」- 员工ID
     */
    public final TableField<RTeamEmployeeRecord, String> EMPLOYEE_ID = createField(DSL.name("EMPLOYEE_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「employeeId」- 员工ID");
    /**
     * The column <code>DB_ETERNAL.R_TEAM_EMPLOYEE.COMMENT</code>. 「comment」-
     * 关系备注
     */
    public final TableField<RTeamEmployeeRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB, this, "「comment」- 关系备注");

    private RTeamEmployee(Name alias, Table<RTeamEmployeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private RTeamEmployee(Name alias, Table<RTeamEmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.R_TEAM_EMPLOYEE</code> table reference
     */
    public RTeamEmployee(String alias) {
        this(DSL.name(alias), R_TEAM_EMPLOYEE);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.R_TEAM_EMPLOYEE</code> table reference
     */
    public RTeamEmployee(Name alias) {
        this(alias, R_TEAM_EMPLOYEE);
    }

    /**
     * Create a <code>DB_ETERNAL.R_TEAM_EMPLOYEE</code> table reference
     */
    public RTeamEmployee() {
        this(DSL.name("R_TEAM_EMPLOYEE"), null);
    }

    public <O extends Record> RTeamEmployee(Table<O> child, ForeignKey<O, RTeamEmployeeRecord> key) {
        super(child, key, R_TEAM_EMPLOYEE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RTeamEmployeeRecord> getRecordType() {
        return RTeamEmployeeRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<RTeamEmployeeRecord> getPrimaryKey() {
        return Keys.KEY_R_TEAM_EMPLOYEE_PRIMARY;
    }

    @Override
    public RTeamEmployee as(String alias) {
        return new RTeamEmployee(DSL.name(alias), this);
    }

    @Override
    public RTeamEmployee as(Name alias) {
        return new RTeamEmployee(alias, this);
    }

    @Override
    public RTeamEmployee as(Table<?> alias) {
        return new RTeamEmployee(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RTeamEmployee rename(String name) {
        return new RTeamEmployee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RTeamEmployee rename(Name name) {
        return new RTeamEmployee(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RTeamEmployee rename(Table<?> name) {
        return new RTeamEmployee(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
