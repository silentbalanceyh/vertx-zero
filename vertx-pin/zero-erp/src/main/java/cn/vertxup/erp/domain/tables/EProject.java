/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables;


import cn.vertxup.erp.domain.DbHotel;
import cn.vertxup.erp.domain.Keys;
import cn.vertxup.erp.domain.tables.records.EProjectRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EProject extends TableImpl<EProjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DB_HOTEL.E_PROJECT</code>
     */
    public static final EProject E_PROJECT = new EProject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EProjectRecord> getRecordType() {
        return EProjectRecord.class;
    }

    /**
     * The column <code>DB_HOTEL.E_PROJECT.KEY</code>. 「key」- 项目ID
     */
    public final TableField<EProjectRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 项目ID");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.NAME</code>. 「name」- 项目名称
     */
    public final TableField<EProjectRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 项目名称");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.CODE</code>. 「code」- 项目编号
     */
    public final TableField<EProjectRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 项目编号");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.SHORT_NAME</code>. 「shortName」- 项目简称
     */
    public final TableField<EProjectRecord, String> SHORT_NAME = createField(DSL.name("SHORT_NAME"), SQLDataType.VARCHAR(255), this, "「shortName」- 项目简称");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.DEPT_ID</code>. 「deptId」- 所属部门,
     * resource.departments
     */
    public final TableField<EProjectRecord, String> DEPT_ID = createField(DSL.name("DEPT_ID"), SQLDataType.VARCHAR(36), this, "「deptId」- 所属部门, resource.departments");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.TYPE</code>. 「type」-
     * 项目分类，zero.project
     */
    public final TableField<EProjectRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(36), this, "「type」- 项目分类，zero.project");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.STATUS</code>. 「status」-
     * 项目状态，zero.project.status
     */
    public final TableField<EProjectRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(36), this, "「status」- 项目状态，zero.project.status");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.BUDGET</code>. 「budget」-
     * 所属预算，zero.project.budget
     */
    public final TableField<EProjectRecord, String> BUDGET = createField(DSL.name("BUDGET"), SQLDataType.VARCHAR(36), this, "「budget」- 所属预算，zero.project.budget");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.LEVEL</code>. 「level」-
     * 项目级别，zero.project.level
     */
    public final TableField<EProjectRecord, String> LEVEL = createField(DSL.name("LEVEL"), SQLDataType.VARCHAR(36), this, "「level」- 项目级别，zero.project.level");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.PRIORITY</code>. 「priority」-
     * 项目优先级，zero.project.priority
     */
    public final TableField<EProjectRecord, String> PRIORITY = createField(DSL.name("PRIORITY"), SQLDataType.VARCHAR(36), this, "「priority」- 项目优先级，zero.project.priority");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.RISK</code>. 「risk」-
     * 项目风险，zero.project.risk
     */
    public final TableField<EProjectRecord, String> RISK = createField(DSL.name("RISK"), SQLDataType.VARCHAR(36), this, "「risk」- 项目风险，zero.project.risk");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.TITLE</code>. 「title」- 项目标题
     */
    public final TableField<EProjectRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(1024), this, "「title」- 项目标题");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.ICON</code>. 「icon」- 项目图标
     */
    public final TableField<EProjectRecord, String> ICON = createField(DSL.name("ICON"), SQLDataType.VARCHAR(255), this, "「icon」- 项目图标");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.AMOUNT</code>. 「amount」- 项目金额
     */
    public final TableField<EProjectRecord, BigDecimal> AMOUNT = createField(DSL.name("AMOUNT"), SQLDataType.DECIMAL(18, 2), this, "「amount」- 项目金额");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.SUBJECT</code>. 「subject」- 项目目标
     */
    public final TableField<EProjectRecord, String> SUBJECT = createField(DSL.name("SUBJECT"), SQLDataType.CLOB, this, "「subject」- 项目目标");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.DESCRIPTION</code>. 「description」-
     * 主单描述内容
     */
    public final TableField<EProjectRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "「description」- 主单描述内容");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.REMARK</code>. 「remark」- 项目备注
     */
    public final TableField<EProjectRecord, String> REMARK = createField(DSL.name("REMARK"), SQLDataType.CLOB, this, "「remark」- 项目备注");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.LEAD_BY</code>. 「leadBy」- 项目经理
     */
    public final TableField<EProjectRecord, String> LEAD_BY = createField(DSL.name("LEAD_BY"), SQLDataType.VARCHAR(36), this, "「leadBy」- 项目经理");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.PLAN_START_AT</code>. 「planStartAt」-
     * 开始日期
     */
    public final TableField<EProjectRecord, LocalDateTime> PLAN_START_AT = createField(DSL.name("PLAN_START_AT"), SQLDataType.LOCALDATETIME(0), this, "「planStartAt」- 开始日期");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.PLAN_END_AT</code>. 「planEndAt」- 结束日期
     */
    public final TableField<EProjectRecord, LocalDateTime> PLAN_END_AT = createField(DSL.name("PLAN_END_AT"), SQLDataType.LOCALDATETIME(0), this, "「planEndAt」- 结束日期");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.START_AT</code>. 「startAt」- 实际开始日期
     */
    public final TableField<EProjectRecord, LocalDateTime> START_AT = createField(DSL.name("START_AT"), SQLDataType.LOCALDATETIME(0), this, "「startAt」- 实际开始日期");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.END_AT</code>. 「endAt」- 实际结束日期
     */
    public final TableField<EProjectRecord, LocalDateTime> END_AT = createField(DSL.name("END_AT"), SQLDataType.LOCALDATETIME(0), this, "「endAt」- 实际结束日期");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<EProjectRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<EProjectRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.SIGMA</code>. 「sigma」- 统一标识（项目所属应用）
     */
    public final TableField<EProjectRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识（项目所属应用）");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<EProjectRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<EProjectRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<EProjectRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<EProjectRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");

    /**
     * The column <code>DB_HOTEL.E_PROJECT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<EProjectRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private EProject(Name alias, Table<EProjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private EProject(Name alias, Table<EProjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_HOTEL.E_PROJECT</code> table reference
     */
    public EProject(String alias) {
        this(DSL.name(alias), E_PROJECT);
    }

    /**
     * Create an aliased <code>DB_HOTEL.E_PROJECT</code> table reference
     */
    public EProject(Name alias) {
        this(alias, E_PROJECT);
    }

    /**
     * Create a <code>DB_HOTEL.E_PROJECT</code> table reference
     */
    public EProject() {
        this(DSL.name("E_PROJECT"), null);
    }

    public <O extends Record> EProject(Table<O> child, ForeignKey<O, EProjectRecord> key) {
        super(child, key, E_PROJECT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DbHotel.DB_HOTEL;
    }

    @Override
    public UniqueKey<EProjectRecord> getPrimaryKey() {
        return Keys.KEY_E_PROJECT_PRIMARY;
    }

    @Override
    public List<UniqueKey<EProjectRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_E_PROJECT_CODE);
    }

    @Override
    public EProject as(String alias) {
        return new EProject(DSL.name(alias), this);
    }

    @Override
    public EProject as(Name alias) {
        return new EProject(alias, this);
    }

    @Override
    public EProject as(Table<?> alias) {
        return new EProject(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EProject rename(String name) {
        return new EProject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EProject rename(Name name) {
        return new EProject(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EProject rename(Table<?> name) {
        return new EProject(name.getQualifiedName(), null);
    }
}
