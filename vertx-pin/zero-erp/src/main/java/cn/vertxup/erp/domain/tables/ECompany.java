/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables;


import cn.vertxup.erp.domain.Db;
import cn.vertxup.erp.domain.Keys;
import cn.vertxup.erp.domain.tables.records.ECompanyRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ECompany extends TableImpl<ECompanyRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.E_COMPANY</code>
     */
    public static final ECompany E_COMPANY = new ECompany();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.KEY</code>. 「key」- 公司主键
     */
    public final TableField<ECompanyRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 公司主键");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.NAME</code>. 「name」- 公司名称
     */
    public final TableField<ECompanyRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 公司名称");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.ALIAS</code>. 「alias」- 公司别称
     */
    public final TableField<ECompanyRecord, String> ALIAS = createField(DSL.name("ALIAS"), SQLDataType.VARCHAR(255), this, "「alias」- 公司别称");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.TITLE</code>. 「title」- 公司显示标题
     */
    public final TableField<ECompanyRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(255), this, "「title」- 公司显示标题");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.CODE</code>. 「code」- 公司编号
     */
    public final TableField<ECompanyRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 公司编号");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.COMMENT</code>. 「comment」- 公司简介
     */
    public final TableField<ECompanyRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB, this, "「comment」- 公司简介");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.TAX_CODE</code>. 「taxCode」- 公司税号
     */
    public final TableField<ECompanyRecord, String> TAX_CODE = createField(DSL.name("TAX_CODE"), SQLDataType.VARCHAR(255), this, "「taxCode」- 公司税号");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.TAX_TITLE</code>. 「taxTitle」- 开票抬头
     */
    public final TableField<ECompanyRecord, String> TAX_TITLE = createField(DSL.name("TAX_TITLE"), SQLDataType.VARCHAR(255), this, "「taxTitle」- 开票抬头");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.EMAIL</code>. 「email」- 企业邮箱
     */
    public final TableField<ECompanyRecord, String> EMAIL = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(255), this, "「email」- 企业邮箱");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.FAX</code>. 「fax」- 传真号
     */
    public final TableField<ECompanyRecord, String> FAX = createField(DSL.name("FAX"), SQLDataType.VARCHAR(255), this, "「fax」- 传真号");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.HOMEPAGE</code>. 「homepage」- 公司主页
     */
    public final TableField<ECompanyRecord, String> HOMEPAGE = createField(DSL.name("HOMEPAGE"), SQLDataType.VARCHAR(128), this, "「homepage」- 公司主页");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.LOGO</code>. 「logo」- 附件对应的
     * attachment Key
     */
    public final TableField<ECompanyRecord, String> LOGO = createField(DSL.name("LOGO"), SQLDataType.VARCHAR(36), this, "「logo」- 附件对应的 attachment Key");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.PHONE</code>. 「phone」- 公司座机
     */
    public final TableField<ECompanyRecord, String> PHONE = createField(DSL.name("PHONE"), SQLDataType.VARCHAR(20), this, "「phone」- 公司座机");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.ADDRESS</code>. 「address」- 公司地址
     */
    public final TableField<ECompanyRecord, String> ADDRESS = createField(DSL.name("ADDRESS"), SQLDataType.CLOB, this, "「address」- 公司地址");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.LOCATION_ID</code>. 「locationId」-
     * 启用LBS时对应的Location主键
     */
    public final TableField<ECompanyRecord, String> LOCATION_ID = createField(DSL.name("LOCATION_ID"), SQLDataType.VARCHAR(36), this, "「locationId」- 启用LBS时对应的Location主键");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.CORPORATION_NAME</code>.
     * 「corporationName」- 企业法人
     */
    public final TableField<ECompanyRecord, String> CORPORATION_NAME = createField(DSL.name("CORPORATION_NAME"), SQLDataType.VARCHAR(255), this, "「corporationName」- 企业法人");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.CORPORATION_PHONE</code>.
     * 「corporationPhone」- 法人电话
     */
    public final TableField<ECompanyRecord, String> CORPORATION_PHONE = createField(DSL.name("CORPORATION_PHONE"), SQLDataType.VARCHAR(255), this, "「corporationPhone」- 法人电话");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.CONTACT_NAME</code>. 「contactName」-
     * 联系人电话
     */
    public final TableField<ECompanyRecord, String> CONTACT_NAME = createField(DSL.name("CONTACT_NAME"), SQLDataType.VARCHAR(255), this, "「contactName」- 联系人电话");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.CONTACT_PHONE</code>.
     * 「contactPhone」- 联系人电话
     */
    public final TableField<ECompanyRecord, String> CONTACT_PHONE = createField(DSL.name("CONTACT_PHONE"), SQLDataType.VARCHAR(20), this, "「contactPhone」- 联系人电话");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.CONTACT_ONLINE</code>.
     * 「contactOnline」- 在线联系方式
     */
    public final TableField<ECompanyRecord, String> CONTACT_ONLINE = createField(DSL.name("CONTACT_ONLINE"), SQLDataType.VARCHAR(255), this, "「contactOnline」- 在线联系方式");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.COMPANY_ID</code>. 「companyId」-
     * 公司、子公司结构时需要
     */
    public final TableField<ECompanyRecord, String> COMPANY_ID = createField(DSL.name("COMPANY_ID"), SQLDataType.VARCHAR(36), this, "「companyId」- 公司、子公司结构时需要");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.CUSTOMER_ID</code>. 「customerId」-
     * 公司作为客户时的客户信息
     */
    public final TableField<ECompanyRecord, String> CUSTOMER_ID = createField(DSL.name("CUSTOMER_ID"), SQLDataType.VARCHAR(36), this, "「customerId」- 公司作为客户时的客户信息");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.TYPE</code>. 「type」- 公司分类
     */
    public final TableField<ECompanyRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(36), this, "「type」- 公司分类");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<ECompanyRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<ECompanyRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.SIGMA</code>. 「sigma」- 统一标识（公司所属应用）
     */
    public final TableField<ECompanyRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识（公司所属应用）");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<ECompanyRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<ECompanyRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<ECompanyRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<ECompanyRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.E_COMPANY.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<ECompanyRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private ECompany(Name alias, Table<ECompanyRecord> aliased) {
        this(alias, aliased, null);
    }

    private ECompany(Name alias, Table<ECompanyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB_ETERNAL.E_COMPANY</code> table reference
     */
    public ECompany(String alias) {
        this(DSL.name(alias), E_COMPANY);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.E_COMPANY</code> table reference
     */
    public ECompany(Name alias) {
        this(alias, E_COMPANY);
    }

    /**
     * Create a <code>DB_ETERNAL.E_COMPANY</code> table reference
     */
    public ECompany() {
        this(DSL.name("E_COMPANY"), null);
    }

    public <O extends Record> ECompany(Table<O> child, ForeignKey<O, ECompanyRecord> key) {
        super(child, key, E_COMPANY);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ECompanyRecord> getRecordType() {
        return ECompanyRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB_ETERNAL;
    }

    @Override
    public UniqueKey<ECompanyRecord> getPrimaryKey() {
        return Keys.KEY_E_COMPANY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ECompanyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_E_COMPANY_NAME, Keys.KEY_E_COMPANY_CODE, Keys.KEY_E_COMPANY_TAX_CODE, Keys.KEY_E_COMPANY_CUSTOMER_ID);
    }

    @Override
    public ECompany as(String alias) {
        return new ECompany(DSL.name(alias), this);
    }

    @Override
    public ECompany as(Name alias) {
        return new ECompany(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ECompany rename(String name) {
        return new ECompany(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ECompany rename(Name name) {
        return new ECompany(name, null);
    }
}
