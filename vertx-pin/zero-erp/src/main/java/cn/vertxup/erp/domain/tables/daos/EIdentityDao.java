/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables.daos;


import cn.vertxup.erp.domain.tables.EIdentity;
import cn.vertxup.erp.domain.tables.records.EIdentityRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EIdentityDao extends AbstractVertxDAO<EIdentityRecord, cn.vertxup.erp.domain.tables.pojos.EIdentity, String, Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>>, Future<cn.vertxup.erp.domain.tables.pojos.EIdentity>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<EIdentityRecord,cn.vertxup.erp.domain.tables.pojos.EIdentity,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public EIdentityDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(EIdentity.E_IDENTITY, cn.vertxup.erp.domain.tables.pojos.EIdentity.class, new JDBCClassicQueryExecutor<EIdentityRecord,cn.vertxup.erp.domain.tables.pojos.EIdentity,String>(configuration,cn.vertxup.erp.domain.tables.pojos.EIdentity.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.erp.domain.tables.pojos.EIdentity object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByCode(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByType(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByStatus(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.STATUS.in(values));
        }

        /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByStatus(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.STATUS.in(values),limit);
        }

        /**
     * Find records that have <code>COUNTRY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByCountry(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.COUNTRY.in(values));
        }

        /**
     * Find records that have <code>COUNTRY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByCountry(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.COUNTRY.in(values),limit);
        }

        /**
     * Find records that have <code>NATIVE_PLACE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByNativePlace(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.NATIVE_PLACE.in(values));
        }

        /**
     * Find records that have <code>NATIVE_PLACE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByNativePlace(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.NATIVE_PLACE.in(values),limit);
        }

        /**
     * Find records that have <code>NATION IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByNation(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.NATION.in(values));
        }

        /**
     * Find records that have <code>NATION IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByNation(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.NATION.in(values),limit);
        }

        /**
     * Find records that have <code>ADDRESS IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByAddress(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.ADDRESS.in(values));
        }

        /**
     * Find records that have <code>ADDRESS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByAddress(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.ADDRESS.in(values),limit);
        }

        /**
     * Find records that have <code>REALNAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByRealname(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.REALNAME.in(values));
        }

        /**
     * Find records that have <code>REALNAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByRealname(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.REALNAME.in(values),limit);
        }

        /**
     * Find records that have <code>BIRTHDAY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByBirthday(Collection<LocalDateTime> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.BIRTHDAY.in(values));
        }

        /**
     * Find records that have <code>BIRTHDAY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByBirthday(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.BIRTHDAY.in(values),limit);
        }

        /**
     * Find records that have <code>DRIVER_LICENSE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByDriverLicense(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.DRIVER_LICENSE.in(values));
        }

        /**
     * Find records that have <code>DRIVER_LICENSE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByDriverLicense(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.DRIVER_LICENSE.in(values),limit);
        }

        /**
     * Find records that have <code>CAR_PLATE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByCarPlate(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.CAR_PLATE.in(values));
        }

        /**
     * Find records that have <code>CAR_PLATE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByCarPlate(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.CAR_PLATE.in(values),limit);
        }

        /**
     * Find records that have <code>PASSPORT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByPassport(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.PASSPORT.in(values));
        }

        /**
     * Find records that have <code>PASSPORT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByPassport(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.PASSPORT.in(values),limit);
        }

        /**
     * Find records that have <code>GENDER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByGender(Collection<Boolean> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.GENDER.in(values));
        }

        /**
     * Find records that have <code>GENDER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByGender(Collection<Boolean> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.GENDER.in(values),limit);
        }

        /**
     * Find records that have <code>MARITAL IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByMarital(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.MARITAL.in(values));
        }

        /**
     * Find records that have <code>MARITAL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByMarital(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.MARITAL.in(values),limit);
        }

        /**
     * Find records that have <code>CONTACT_MOBILE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByContactMobile(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.CONTACT_MOBILE.in(values));
        }

        /**
     * Find records that have <code>CONTACT_MOBILE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByContactMobile(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.CONTACT_MOBILE.in(values),limit);
        }

        /**
     * Find records that have <code>CONTACT_PHONE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByContactPhone(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.CONTACT_PHONE.in(values));
        }

        /**
     * Find records that have <code>CONTACT_PHONE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByContactPhone(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.CONTACT_PHONE.in(values),limit);
        }

        /**
     * Find records that have <code>CONTACT_ADDRESS IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByContactAddress(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.CONTACT_ADDRESS.in(values));
        }

        /**
     * Find records that have <code>CONTACT_ADDRESS IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByContactAddress(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.CONTACT_ADDRESS.in(values),limit);
        }

        /**
     * Find records that have <code>CONTACT_EMAIL IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByContactEmail(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.CONTACT_EMAIL.in(values));
        }

        /**
     * Find records that have <code>CONTACT_EMAIL IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByContactEmail(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.CONTACT_EMAIL.in(values),limit);
        }

        /**
     * Find records that have <code>URGENT_NAME IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByUrgentName(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.URGENT_NAME.in(values));
        }

        /**
     * Find records that have <code>URGENT_NAME IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByUrgentName(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.URGENT_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>URGENT_PHONE IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByUrgentPhone(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.URGENT_PHONE.in(values));
        }

        /**
     * Find records that have <code>URGENT_PHONE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByUrgentPhone(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.URGENT_PHONE.in(values),limit);
        }

        /**
     * Find records that have <code>EC_QQ IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByEcQq(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.EC_QQ.in(values));
        }

        /**
     * Find records that have <code>EC_QQ IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByEcQq(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.EC_QQ.in(values),limit);
        }

        /**
     * Find records that have <code>EC_ALIPAY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByEcAlipay(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.EC_ALIPAY.in(values));
        }

        /**
     * Find records that have <code>EC_ALIPAY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByEcAlipay(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.EC_ALIPAY.in(values),limit);
        }

        /**
     * Find records that have <code>EC_WECHAT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByEcWechat(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.EC_WECHAT.in(values));
        }

        /**
     * Find records that have <code>EC_WECHAT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByEcWechat(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.EC_WECHAT.in(values),limit);
        }

        /**
     * Find records that have <code>IDC_TYPE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcType(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_TYPE.in(values));
        }

        /**
     * Find records that have <code>IDC_TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcType(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>IDC_NUMBER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcNumber(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_NUMBER.in(values));
        }

        /**
     * Find records that have <code>IDC_NUMBER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcNumber(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_NUMBER.in(values),limit);
        }

        /**
     * Find records that have <code>IDC_ADDRESS IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcAddress(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_ADDRESS.in(values));
        }

        /**
     * Find records that have <code>IDC_ADDRESS IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcAddress(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_ADDRESS.in(values),limit);
        }

        /**
     * Find records that have <code>IDC_EXPIRED_AT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcExpiredAt(Collection<LocalDateTime> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_EXPIRED_AT.in(values));
        }

        /**
     * Find records that have <code>IDC_EXPIRED_AT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcExpiredAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_EXPIRED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>IDC_FRONT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcFront(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_FRONT.in(values));
        }

        /**
     * Find records that have <code>IDC_FRONT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcFront(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_FRONT.in(values),limit);
        }

        /**
     * Find records that have <code>IDC_BACK IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcBack(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_BACK.in(values));
        }

        /**
     * Find records that have <code>IDC_BACK IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcBack(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_BACK.in(values),limit);
        }

        /**
     * Find records that have <code>IDC_ISSUER IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcIssuer(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_ISSUER.in(values));
        }

        /**
     * Find records that have <code>IDC_ISSUER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcIssuer(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_ISSUER.in(values),limit);
        }

        /**
     * Find records that have <code>IDC_ISSUE_AT IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcIssueAt(Collection<LocalDateTime> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_ISSUE_AT.in(values));
        }

        /**
     * Find records that have <code>IDC_ISSUE_AT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByIdcIssueAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.IDC_ISSUE_AT.in(values),limit);
        }

        /**
     * Find records that have <code>VERIFIED IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByVerified(Collection<Boolean> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.VERIFIED.in(values));
        }

        /**
     * Find records that have <code>VERIFIED IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByVerified(Collection<Boolean> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.VERIFIED.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(EIdentity.E_IDENTITY.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EIdentity>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(EIdentity.E_IDENTITY.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<EIdentityRecord,cn.vertxup.erp.domain.tables.pojos.EIdentity,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<EIdentityRecord,cn.vertxup.erp.domain.tables.pojos.EIdentity,String>) super.queryExecutor();
        }
}
