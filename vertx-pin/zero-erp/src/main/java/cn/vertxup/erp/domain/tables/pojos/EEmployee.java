/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables.pojos;


import cn.vertxup.erp.domain.tables.interfaces.IEEmployee;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EEmployee implements VertxPojo, IEEmployee {

    private static final long serialVersionUID = 1L;

    private String key;
    private String companyId;
    private String deptId;
    private String teamId;
    private String identityId;
    private String viceName;
    private String viceEmail;
    private String viceMobile;
    private String workNumber;
    private String workTitle;
    private String workLocation;
    private String workPhone;
    private String workExtension;
    private LocalDateTime workHireAt;
    private String bankId;
    private String bankCard;
    private String type;
    private String status;
    private String metadata;
    private Boolean active;
    private String sigma;
    private String language;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public EEmployee() {}

    public EEmployee(IEEmployee value) {
        this.key = value.getKey();
        this.companyId = value.getCompanyId();
        this.deptId = value.getDeptId();
        this.teamId = value.getTeamId();
        this.identityId = value.getIdentityId();
        this.viceName = value.getViceName();
        this.viceEmail = value.getViceEmail();
        this.viceMobile = value.getViceMobile();
        this.workNumber = value.getWorkNumber();
        this.workTitle = value.getWorkTitle();
        this.workLocation = value.getWorkLocation();
        this.workPhone = value.getWorkPhone();
        this.workExtension = value.getWorkExtension();
        this.workHireAt = value.getWorkHireAt();
        this.bankId = value.getBankId();
        this.bankCard = value.getBankCard();
        this.type = value.getType();
        this.status = value.getStatus();
        this.metadata = value.getMetadata();
        this.active = value.getActive();
        this.sigma = value.getSigma();
        this.language = value.getLanguage();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public EEmployee(
        String key,
        String companyId,
        String deptId,
        String teamId,
        String identityId,
        String viceName,
        String viceEmail,
        String viceMobile,
        String workNumber,
        String workTitle,
        String workLocation,
        String workPhone,
        String workExtension,
        LocalDateTime workHireAt,
        String bankId,
        String bankCard,
        String type,
        String status,
        String metadata,
        Boolean active,
        String sigma,
        String language,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.companyId = companyId;
        this.deptId = deptId;
        this.teamId = teamId;
        this.identityId = identityId;
        this.viceName = viceName;
        this.viceEmail = viceEmail;
        this.viceMobile = viceMobile;
        this.workNumber = workNumber;
        this.workTitle = workTitle;
        this.workLocation = workLocation;
        this.workPhone = workPhone;
        this.workExtension = workExtension;
        this.workHireAt = workHireAt;
        this.bankId = bankId;
        this.bankCard = bankCard;
        this.type = type;
        this.status = status;
        this.metadata = metadata;
        this.active = active;
        this.sigma = sigma;
        this.language = language;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public EEmployee(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.KEY</code>. 「key」- 员工主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.KEY</code>. 「key」- 员工主键
     */
    @Override
    public EEmployee setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.COMPANY_ID</code>. 「companyId」-
     * 所属公司
     */
    @Override
    public String getCompanyId() {
        return this.companyId;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.COMPANY_ID</code>. 「companyId」-
     * 所属公司
     */
    @Override
    public EEmployee setCompanyId(String companyId) {
        this.companyId = companyId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.DEPT_ID</code>. 「deptId」- 所属部门
     */
    @Override
    public String getDeptId() {
        return this.deptId;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.DEPT_ID</code>. 「deptId」- 所属部门
     */
    @Override
    public EEmployee setDeptId(String deptId) {
        this.deptId = deptId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.TEAM_ID</code>. 「teamId」- 所属组
     */
    @Override
    public String getTeamId() {
        return this.teamId;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.TEAM_ID</code>. 「teamId」- 所属组
     */
    @Override
    public EEmployee setTeamId(String teamId) {
        this.teamId = teamId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.IDENTITY_ID</code>. 「identityId」-
     * 关联档案
     */
    @Override
    public String getIdentityId() {
        return this.identityId;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.IDENTITY_ID</code>. 「identityId」-
     * 关联档案
     */
    @Override
    public EEmployee setIdentityId(String identityId) {
        this.identityId = identityId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.VICE_NAME</code>. 「viceName」- 员工姓名
     */
    @Override
    public String getViceName() {
        return this.viceName;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.VICE_NAME</code>. 「viceName」- 员工姓名
     */
    @Override
    public EEmployee setViceName(String viceName) {
        this.viceName = viceName;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.VICE_EMAIL</code>. 「viceEmail」-
     * 员工邮箱
     */
    @Override
    public String getViceEmail() {
        return this.viceEmail;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.VICE_EMAIL</code>. 「viceEmail」-
     * 员工邮箱
     */
    @Override
    public EEmployee setViceEmail(String viceEmail) {
        this.viceEmail = viceEmail;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.VICE_MOBILE</code>. 「viceMobile」-
     * 员工手机
     */
    @Override
    public String getViceMobile() {
        return this.viceMobile;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.VICE_MOBILE</code>. 「viceMobile」-
     * 员工手机
     */
    @Override
    public EEmployee setViceMobile(String viceMobile) {
        this.viceMobile = viceMobile;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.WORK_NUMBER</code>. 「workNumber」-
     * 工号
     */
    @Override
    public String getWorkNumber() {
        return this.workNumber;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.WORK_NUMBER</code>. 「workNumber」-
     * 工号
     */
    @Override
    public EEmployee setWorkNumber(String workNumber) {
        this.workNumber = workNumber;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.WORK_TITLE</code>. 「workTitle」- 头衔
     */
    @Override
    public String getWorkTitle() {
        return this.workTitle;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.WORK_TITLE</code>. 「workTitle」- 头衔
     */
    @Override
    public EEmployee setWorkTitle(String workTitle) {
        this.workTitle = workTitle;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.WORK_LOCATION</code>.
     * 「workLocation」- 办公地点
     */
    @Override
    public String getWorkLocation() {
        return this.workLocation;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.WORK_LOCATION</code>.
     * 「workLocation」- 办公地点
     */
    @Override
    public EEmployee setWorkLocation(String workLocation) {
        this.workLocation = workLocation;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.WORK_PHONE</code>. 「workPhone」-
     * 办公电话
     */
    @Override
    public String getWorkPhone() {
        return this.workPhone;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.WORK_PHONE</code>. 「workPhone」-
     * 办公电话
     */
    @Override
    public EEmployee setWorkPhone(String workPhone) {
        this.workPhone = workPhone;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.WORK_EXTENSION</code>.
     * 「workExtension」- 分机号
     */
    @Override
    public String getWorkExtension() {
        return this.workExtension;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.WORK_EXTENSION</code>.
     * 「workExtension」- 分机号
     */
    @Override
    public EEmployee setWorkExtension(String workExtension) {
        this.workExtension = workExtension;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.WORK_HIRE_AT</code>. 「workHireAt」-
     * 入职时间
     */
    @Override
    public LocalDateTime getWorkHireAt() {
        return this.workHireAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.WORK_HIRE_AT</code>. 「workHireAt」-
     * 入职时间
     */
    @Override
    public EEmployee setWorkHireAt(LocalDateTime workHireAt) {
        this.workHireAt = workHireAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.BANK_ID</code>. 「bankId」- 开户行
     */
    @Override
    public String getBankId() {
        return this.bankId;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.BANK_ID</code>. 「bankId」- 开户行
     */
    @Override
    public EEmployee setBankId(String bankId) {
        this.bankId = bankId;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.BANK_CARD</code>. 「bankCard」-
     * 开户行账号
     */
    @Override
    public String getBankCard() {
        return this.bankCard;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.BANK_CARD</code>. 「bankCard」-
     * 开户行账号
     */
    @Override
    public EEmployee setBankCard(String bankCard) {
        this.bankCard = bankCard;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.TYPE</code>. 「type」- 员工分类
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.TYPE</code>. 「type」- 员工分类
     */
    @Override
    public EEmployee setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.STATUS</code>. 「status」- 员工状态
     */
    @Override
    public String getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.STATUS</code>. 「status」- 员工状态
     */
    @Override
    public EEmployee setStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public EEmployee setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public EEmployee setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.SIGMA</code>. 「sigma」-
     * 统一标识（公司所属应用）
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.SIGMA</code>. 「sigma」-
     * 统一标识（公司所属应用）
     */
    @Override
    public EEmployee setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public EEmployee setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    @Override
    public EEmployee setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    @Override
    public EEmployee setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    @Override
    public EEmployee setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.E_EMPLOYEE.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>DB_ETERNAL.E_EMPLOYEE.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    @Override
    public EEmployee setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final EEmployee other = (EEmployee) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        }
        else if (!this.key.equals(other.key))
            return false;
        if (this.companyId == null) {
            if (other.companyId != null)
                return false;
        }
        else if (!this.companyId.equals(other.companyId))
            return false;
        if (this.deptId == null) {
            if (other.deptId != null)
                return false;
        }
        else if (!this.deptId.equals(other.deptId))
            return false;
        if (this.teamId == null) {
            if (other.teamId != null)
                return false;
        }
        else if (!this.teamId.equals(other.teamId))
            return false;
        if (this.identityId == null) {
            if (other.identityId != null)
                return false;
        }
        else if (!this.identityId.equals(other.identityId))
            return false;
        if (this.viceName == null) {
            if (other.viceName != null)
                return false;
        }
        else if (!this.viceName.equals(other.viceName))
            return false;
        if (this.viceEmail == null) {
            if (other.viceEmail != null)
                return false;
        }
        else if (!this.viceEmail.equals(other.viceEmail))
            return false;
        if (this.viceMobile == null) {
            if (other.viceMobile != null)
                return false;
        }
        else if (!this.viceMobile.equals(other.viceMobile))
            return false;
        if (this.workNumber == null) {
            if (other.workNumber != null)
                return false;
        }
        else if (!this.workNumber.equals(other.workNumber))
            return false;
        if (this.workTitle == null) {
            if (other.workTitle != null)
                return false;
        }
        else if (!this.workTitle.equals(other.workTitle))
            return false;
        if (this.workLocation == null) {
            if (other.workLocation != null)
                return false;
        }
        else if (!this.workLocation.equals(other.workLocation))
            return false;
        if (this.workPhone == null) {
            if (other.workPhone != null)
                return false;
        }
        else if (!this.workPhone.equals(other.workPhone))
            return false;
        if (this.workExtension == null) {
            if (other.workExtension != null)
                return false;
        }
        else if (!this.workExtension.equals(other.workExtension))
            return false;
        if (this.workHireAt == null) {
            if (other.workHireAt != null)
                return false;
        }
        else if (!this.workHireAt.equals(other.workHireAt))
            return false;
        if (this.bankId == null) {
            if (other.bankId != null)
                return false;
        }
        else if (!this.bankId.equals(other.bankId))
            return false;
        if (this.bankCard == null) {
            if (other.bankCard != null)
                return false;
        }
        else if (!this.bankCard.equals(other.bankCard))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        }
        else if (!this.status.equals(other.status))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        }
        else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        }
        else if (!this.active.equals(other.active))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        }
        else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        }
        else if (!this.language.equals(other.language))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.companyId == null) ? 0 : this.companyId.hashCode());
        result = prime * result + ((this.deptId == null) ? 0 : this.deptId.hashCode());
        result = prime * result + ((this.teamId == null) ? 0 : this.teamId.hashCode());
        result = prime * result + ((this.identityId == null) ? 0 : this.identityId.hashCode());
        result = prime * result + ((this.viceName == null) ? 0 : this.viceName.hashCode());
        result = prime * result + ((this.viceEmail == null) ? 0 : this.viceEmail.hashCode());
        result = prime * result + ((this.viceMobile == null) ? 0 : this.viceMobile.hashCode());
        result = prime * result + ((this.workNumber == null) ? 0 : this.workNumber.hashCode());
        result = prime * result + ((this.workTitle == null) ? 0 : this.workTitle.hashCode());
        result = prime * result + ((this.workLocation == null) ? 0 : this.workLocation.hashCode());
        result = prime * result + ((this.workPhone == null) ? 0 : this.workPhone.hashCode());
        result = prime * result + ((this.workExtension == null) ? 0 : this.workExtension.hashCode());
        result = prime * result + ((this.workHireAt == null) ? 0 : this.workHireAt.hashCode());
        result = prime * result + ((this.bankId == null) ? 0 : this.bankId.hashCode());
        result = prime * result + ((this.bankCard == null) ? 0 : this.bankCard.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("EEmployee (");

        sb.append(key);
        sb.append(", ").append(companyId);
        sb.append(", ").append(deptId);
        sb.append(", ").append(teamId);
        sb.append(", ").append(identityId);
        sb.append(", ").append(viceName);
        sb.append(", ").append(viceEmail);
        sb.append(", ").append(viceMobile);
        sb.append(", ").append(workNumber);
        sb.append(", ").append(workTitle);
        sb.append(", ").append(workLocation);
        sb.append(", ").append(workPhone);
        sb.append(", ").append(workExtension);
        sb.append(", ").append(workHireAt);
        sb.append(", ").append(bankId);
        sb.append(", ").append(bankCard);
        sb.append(", ").append(type);
        sb.append(", ").append(status);
        sb.append(", ").append(metadata);
        sb.append(", ").append(active);
        sb.append(", ").append(sigma);
        sb.append(", ").append(language);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IEEmployee from) {
        setKey(from.getKey());
        setCompanyId(from.getCompanyId());
        setDeptId(from.getDeptId());
        setTeamId(from.getTeamId());
        setIdentityId(from.getIdentityId());
        setViceName(from.getViceName());
        setViceEmail(from.getViceEmail());
        setViceMobile(from.getViceMobile());
        setWorkNumber(from.getWorkNumber());
        setWorkTitle(from.getWorkTitle());
        setWorkLocation(from.getWorkLocation());
        setWorkPhone(from.getWorkPhone());
        setWorkExtension(from.getWorkExtension());
        setWorkHireAt(from.getWorkHireAt());
        setBankId(from.getBankId());
        setBankCard(from.getBankCard());
        setType(from.getType());
        setStatus(from.getStatus());
        setMetadata(from.getMetadata());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IEEmployee> E into(E into) {
        into.from(this);
        return into;
    }
}
