/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables.daos;


import cn.vertxup.erp.domain.tables.EDept;
import cn.vertxup.erp.domain.tables.records.EDeptRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EDeptDao extends AbstractVertxDAO<EDeptRecord, cn.vertxup.erp.domain.tables.pojos.EDept, String, Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>>, Future<cn.vertxup.erp.domain.tables.pojos.EDept>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<EDeptRecord,cn.vertxup.erp.domain.tables.pojos.EDept,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public EDeptDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(EDept.E_DEPT, cn.vertxup.erp.domain.tables.pojos.EDept.class, new JDBCClassicQueryExecutor<EDeptRecord,cn.vertxup.erp.domain.tables.pojos.EDept,String>(configuration,cn.vertxup.erp.domain.tables.pojos.EDept.class,vertx));
        }

        @Override
        protected String getId(cn.vertxup.erp.domain.tables.pojos.EDept object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByName(Collection<String> values) {
                return findManyByCondition(EDept.E_DEPT.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(EDept.E_DEPT.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByCode(Collection<String> values) {
                return findManyByCondition(EDept.E_DEPT.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(EDept.E_DEPT.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>MANAGER_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByManagerId(Collection<String> values) {
                return findManyByCondition(EDept.E_DEPT.MANAGER_ID.in(values));
        }

        /**
     * Find records that have <code>MANAGER_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByManagerId(Collection<String> values, int limit) {
                return findManyByCondition(EDept.E_DEPT.MANAGER_ID.in(values),limit);
        }

        /**
     * Find records that have <code>MANAGER_NAME IN (values)</code>
     * asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByManagerName(Collection<String> values) {
                return findManyByCondition(EDept.E_DEPT.MANAGER_NAME.in(values));
        }

        /**
     * Find records that have <code>MANAGER_NAME IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByManagerName(Collection<String> values, int limit) {
                return findManyByCondition(EDept.E_DEPT.MANAGER_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>COMPANY_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByCompanyId(Collection<String> values) {
                return findManyByCondition(EDept.E_DEPT.COMPANY_ID.in(values));
        }

        /**
     * Find records that have <code>COMPANY_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByCompanyId(Collection<String> values, int limit) {
                return findManyByCondition(EDept.E_DEPT.COMPANY_ID.in(values),limit);
        }

        /**
     * Find records that have <code>DEPT_ID IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByDeptId(Collection<String> values) {
                return findManyByCondition(EDept.E_DEPT.DEPT_ID.in(values));
        }

        /**
     * Find records that have <code>DEPT_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByDeptId(Collection<String> values, int limit) {
                return findManyByCondition(EDept.E_DEPT.DEPT_ID.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByComment(Collection<String> values) {
                return findManyByCondition(EDept.E_DEPT.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(EDept.E_DEPT.COMMENT.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(EDept.E_DEPT.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(EDept.E_DEPT.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(EDept.E_DEPT.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(EDept.E_DEPT.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(EDept.E_DEPT.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(EDept.E_DEPT.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(EDept.E_DEPT.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(EDept.E_DEPT.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(EDept.E_DEPT.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(EDept.E_DEPT.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(EDept.E_DEPT.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(EDept.E_DEPT.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(EDept.E_DEPT.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(EDept.E_DEPT.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(EDept.E_DEPT.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<cn.vertxup.erp.domain.tables.pojos.EDept>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(EDept.E_DEPT.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<EDeptRecord,cn.vertxup.erp.domain.tables.pojos.EDept,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<EDeptRecord,cn.vertxup.erp.domain.tables.pojos.EDept,String>) super.queryExecutor();
        }
}
